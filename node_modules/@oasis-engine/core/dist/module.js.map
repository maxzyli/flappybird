{"version":3,"file":"module.js","sources":["../src/asset/AssetPromise.ts","../src/base/Util.ts","../src/asset/ResourceManager.ts","../src/base/Event.ts","../src/clone/enums/CloneMode.ts","../src/clone/CloneManager.ts","../src/base/EngineObject.ts","../src/base/EventDispatcher.ts","../src/base/Logger.ts","../src/base/Time.ts","../src/base/Constant.ts","../src/DisorderedArray.ts","../src/shader/ShaderMacroCollection.ts","../src/ComponentsManager.ts","../src/clone/ComponentCloner.ts","../src/ComponentsDependencies.ts","../src/Layer.ts","../src/Component.ts","../src/UpdateFlag.ts","../src/UpdateFlagManager.ts","../src/Transform.ts","../src/Entity.ts","../src/FeatureManager.ts","../src/material/enums/RenderQueueType.ts","../src/asset/RefObject.ts","../src/shader/enums/ShaderDataGroup.ts","../src/texture/Texture.ts","../src/shaderlib/pbr/index.ts","../src/shaderlib/ShaderLib.ts","../src/shaderlib/ShaderFactory.ts","../src/shader/ShaderMacro.ts","../src/shader/ShaderUniform.ts","../src/shader/ShaderUniformBlock.ts","../src/shader/ShaderProgram.ts","../src/shader/ShaderProperty.ts","../src/shader/Shader.ts","../src/shader/ShaderData.ts","../src/shader/enums/BlendFactor.ts","../src/shader/enums/BlendOperation.ts","../src/shader/enums/ColorWriteMask.ts","../src/shader/state/RenderTargetBlendState.ts","../src/shader/state/BlendState.ts","../src/shader/enums/CompareFunction.ts","../src/shader/state/DepthState.ts","../src/shader/enums/CullMode.ts","../src/shader/state/RasterState.ts","../src/shader/enums/StencilOperation.ts","../src/shader/state/StencilState.ts","../src/shader/state/RenderState.ts","../src/material/Material.ts","../src/RenderPipeline/ClassPool.ts","../src/RenderPipeline/RenderContext.ts","../src/RenderPipeline/RenderElement.ts","../src/RenderPipeline/SpriteElement.ts","../src/RenderPipeline/SpriteMaskElement.ts","../src/2d/enums/SpriteMaskInteraction.ts","../src/Renderer.ts","../src/2d/enums/SpriteMaskLayer.ts","../src/2d/sprite/SpriteMask.ts","../src/graphic/enums/VertexElementFormat.ts","../src/graphic/enums/BufferUsage.ts","../src/graphic/enums/IndexFormat.ts","../src/graphic/BufferUtil.ts","../src/graphic/VertexElement.ts","../src/graphic/enums/BufferBindFlag.ts","../src/graphic/enums/SetDataOptions.ts","../src/graphic/Buffer.ts","../src/graphic/enums/MeshTopology.ts","../src/graphic/IndexBufferBinding.ts","../src/graphic/SubMesh.ts","../src/graphic/Mesh.ts","../src/graphic/VertexBufferBinding.ts","../src/texture/enums/TextureFilterMode.ts","../src/texture/enums/TextureFormat.ts","../src/texture/enums/TextureWrapMode.ts","../src/texture/Texture2D.ts","../src/texture/enums/RenderBufferColorFormat.ts","../src/texture/enums/RenderBufferDepthFormat.ts","../src/texture/enums/TextureCubeFace.ts","../src/texture/TextureCubeMap.ts","../src/texture/RenderDepthTexture.ts","../src/texture/RenderTarget.ts","../src/texture/RenderColorTexture.ts","../src/mesh/ModelMesh.ts","../src/mesh/Skin.ts","../src/mesh/MeshRenderer.ts","../src/mesh/SkinnedMeshRenderer.ts","../src/mesh/PrimitiveMesh.ts","../src/mesh/BufferMesh.ts","../src/mesh/BlendShapeFrame.ts","../src/mesh/BlendShape.ts","../src/RenderPipeline/Basic2DBatcher.ts","../src/RenderPipeline/SpriteMaskBatcher.ts","../src/RenderPipeline/SpriteMaskManager.ts","../src/enums/BackgroundMode.ts","../src/enums/BackgroundTextureFillMode.ts","../src/sky/Sky.ts","../src/Background.ts","../src/lighting/enums/DiffuseMode.ts","../src/lighting/AmbientLight.ts","../src/SceneFeature.ts","../src/lighting/Light.ts","../src/lighting/DirectLight.ts","../src/lighting/PointLight.ts","../src/lighting/SpotLight.ts","../src/lighting/LightFeature.ts","../src/Scene.ts","../src/SceneManager.ts","../src/shader/ShaderPool.ts","../src/shader/ShaderProgramPool.ts","../src/collider/ColliderFeature.ts","../src/collider/Collider.ts","../src/collider/ABoxCollider.ts","../src/collider/PlaneCollider.ts","../src/collider/ASphereCollider.ts","../src/collider/BoxCollider.ts","../src/collider/SphereCollider.ts","../src/collider/index.ts","../src/HitResult.ts","../src/PhysicsManager.ts","../src/Engine.ts","../src/SystemInfo.ts","../src/EngineFeature.ts","../src/Script.ts","../src/enums/CameraClearFlags.ts","../src/RenderPipeline/RenderPass.ts","../src/RenderPipeline/SpriteBatcher.ts","../src/RenderPipeline/RenderQueue.ts","../src/RenderPipeline/BasicRenderPipeline.ts","../src/Camera.ts","../src/asset/request.ts","../src/asset/Loader.ts","../src/asset/AssetType.ts","../src/material/enums/RenderFace.ts","../src/material/enums/BlendMode.ts","../src/material/BaseMaterial.ts","../src/material/BlinnPhongMaterial.ts","../src/material/PBRBaseMaterial.ts","../src/material/PBRMaterial.ts","../src/material/PBRSpecularMaterial.ts","../src/material/UnlitMaterial.ts","../src/2d/atlas/SpriteAtlas.ts","../src/2d/sprite/Sprite.ts","../src/2d/sprite/SpriteRenderer.ts","../src/animation/AnimationClipCurveBinding.ts","../src/animation/enums/AnimationProperty.ts","../src/animation/Motion.ts","../src/animation/AnimationClip.ts","../src/animation/AnimatorUtils.ts","../src/animation/enums/AnimatorLayerBlendingMode.ts","../src/animation/enums/LayerState.ts","../src/animation/internal/AnimationCurveOwner.ts","../src/animation/internal/AnimationEventHandler.ts","../src/animation/AnimatorTransition.ts","../src/animation/enums/WrapMode.ts","../src/animation/internal/AnimatorStatePlayData.ts","../src/animation/internal/AnimatorLayerData.ts","../src/animation/internal/AnimatorStateData.ts","../src/animation/internal/AnimatorStateInfo.ts","../src/animation/internal/CrossCurveData.ts","../src/animation/Animator.ts","../src/animation/AnimatorController.ts","../src/animation/AnimatorControllerLayer.ts","../src/animation/AnimatorState.ts","../src/animation/AnimatorStateMachine.ts","../src/animation/enums/InterpolableValueType.ts","../src/animation/enums/InterpolationType.ts","../src/animation/AnimationCurve.ts","../src/animation/KeyFrame.ts","../src/animation/AnimationEvent.ts","../src/animation/enums/AnimatorConditionMode.ts","../src/sky/SkyBoxMaterial.ts","../src/particle/ParticleRenderer.ts","../src/trail/TrailMaterial.ts","../src/trail/TrailRenderer.ts","../src/collision/intersect.ts","../src/collision/CollisionDetection.ts","../src/fog/Fog.ts","../src/fog/EXP2Fog.ts","../src/fog/LinearFog.ts","../src/env-probe/Probe.ts","../src/env-probe/CubeProbe.ts","../src/shadow/LightShadow.ts","../src/shadow/Extension.ts","../src/shadow/ShadowMapMaterial.ts","../src/shadow/ShadowMapPass.ts","../src/shadow/ShadowMaterial.ts","../src/shadow/ShadowPass.ts","../src/shadow/ShadowFeature.ts","../src/shadow/index.ts","../src/index.ts"],"sourcesContent":["type PromiseNotifier = (progress: number) => void;\n\n/**\n * Asset Promise Status\n */\nexport enum AssetPromiseStatus {\n  /** Success. */\n  Success,\n  /** Pending. */\n  Pending,\n  /** Failed. */\n  Failed\n}\n/**\n * Asset Loading Promise.\n */\nexport class AssetPromise<T> extends Promise<T> {\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>,\n      T10 | PromiseLike<T10>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8, T9>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>,\n      T9 | PromiseLike<T9>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8, T9]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7, T8>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>,\n      T8 | PromiseLike<T8>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7, T8]>;\n\n  static all<T1, T2, T3, T4, T5, T6, T7>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>,\n      T7 | PromiseLike<T7>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6, T7]>;\n\n  static all<T1, T2, T3, T4, T5, T6>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>,\n      T6 | PromiseLike<T6>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5, T6]>;\n\n  static all<T1, T2, T3, T4, T5>(\n    values: readonly [\n      T1 | PromiseLike<T1>,\n      T2 | PromiseLike<T2>,\n      T3 | PromiseLike<T3>,\n      T4 | PromiseLike<T4>,\n      T5 | PromiseLike<T5>\n    ]\n  ): AssetPromise<[T1, T2, T3, T4, T5]>;\n\n  static all<T1, T2, T3, T4>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>, T4 | PromiseLike<T4>]\n  ): AssetPromise<[T1, T2, T3, T4]>;\n\n  static all<T1, T2, T3>(\n    values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>, T3 | PromiseLike<T3>]\n  ): AssetPromise<[T1, T2, T3]>;\n\n  static all<T1, T2>(values: readonly [T1 | PromiseLike<T1>, T2 | PromiseLike<T2>]): AssetPromise<[T1, T2]>;\n\n  static all<T>(values: readonly (T | PromiseLike<T>)[]): AssetPromise<T[]>;\n\n  /**\n   * Return a new resource Promise through the provided asset promise collection.\n   * The resolved of the new AssetPromise will be triggered when all the Promises in the provided set are completed.\n   * @param - AssetPromise Collection\n   * @returns AssetPromise\n   */\n  static all<T>(promises: T | PromiseLike<T>[]): AssetPromise<T[]> {\n    return new AssetPromise((resolve, reject, setProgress) => {\n      if (!Array.isArray(promises)) {\n        return resolve([promises]);\n      }\n\n      let completed = 0;\n      let total = promises.length;\n      let results = new Array<T>(total);\n\n      promises.forEach((value, index) => {\n        Promise.resolve(value)\n          .then((result) => {\n            results[index] = result;\n\n            completed += 1;\n            setProgress(completed / total);\n\n            if (completed == total) {\n              resolve(results);\n            }\n          })\n          .catch((err) => reject(err));\n      });\n    });\n  }\n\n  private _status: AssetPromiseStatus;\n  private _progress: number;\n  private _reject: (reason?: any) => void;\n  private _listeners: Set<PromiseNotifier>;\n\n  /**\n   * Current promise state.\n   */\n  get status(): AssetPromiseStatus {\n    return this._status;\n  }\n\n  /**\n   * Loading progress.\n   */\n  get progress(): number {\n    return this._progress;\n  }\n\n  /**\n   * Progress callback.\n   * @param callback - Progress callback\n   * @returns Asset Promise\n   */\n  onProgress(callback: (progress?: number) => any): AssetPromise<T> {\n    this._listeners.add(callback);\n    return this;\n  }\n\n  /**\n   * Cancel promise request.\n   * @returns Asset promise\n   */\n  cancel(): AssetPromise<T> {\n    if (this._status !== AssetPromiseStatus.Pending) {\n      return this;\n    }\n    this._reject(\"Promise Canceled\");\n    return this;\n  }\n\n  /**\n   * Create an asset loading Promise.\n   * @param executor - A callback used to initialize the promise. This callback is passed two arguments:\n   * a resolve callback used to resolve the promise with a value or the result of another promise,\n   * and a reject callback used to reject the promise with a provided reason or error.\n   * and a setProgress callback used to set promise progress with a percent.\n   */\n  constructor(\n    executor: (\n      resolve: (value?: T | PromiseLike<T>) => void,\n      reject?: (reason?: any) => void,\n      setProgress?: PromiseNotifier\n    ) => void\n  ) {\n    let newReject: (reason?: any) => void;\n\n    const setProgress = (progress: number) => {\n      if (progress <= this._progress) {\n        return;\n      }\n      this._progress = progress;\n\n      for (const listener of this._listeners) {\n        listener(progress);\n      }\n    };\n\n    super((resolve, reject) => {\n      newReject = (reason?: any) => {\n        // Add it to the micro task to avoid reporting an error when calling this directly.\n        Promise.resolve().then(() => {\n          this._status = AssetPromiseStatus.Failed;\n          reject(reason);\n        });\n      };\n      executor(\n        (value: T) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly.\n          Promise.resolve().then(() => {\n            setProgress(1);\n            this._status = AssetPromiseStatus.Success;\n            resolve(value);\n          });\n        },\n        newReject,\n        (progress: number) => {\n          // Add it to the micro task to avoid reporting an error when calling this directly\n          Promise.resolve().then(() => {\n            setProgress(progress);\n          });\n        }\n      );\n    });\n    this._reject = newReject;\n    this._listeners = new Set();\n    this._progress = 0;\n    this._status = AssetPromiseStatus.Pending;\n  }\n}\n","export const Util = {\n  isArray:\n    \"isArray\" in Array\n      ? Array.isArray\n      : (value: any): boolean => {\n          return toString.call(value) === \"[object Array]\";\n        },\n  isArrayLike(x: any): boolean {\n    return !!x && typeof x.length === \"number\" && typeof x !== \"function\";\n  },\n  clone<T>(obj: T): T {\n    if (typeof obj !== \"object\" || obj === null) {\n      return obj;\n    }\n    let rst;\n    if (Util.isArrayLike(obj)) {\n      rst = (obj as any).slice();\n      for (let i = 0, l = (obj as any).length; i < l; i++) {\n        rst[i] = Util.clone(obj[i]);\n      }\n    } else {\n      rst = {};\n      for (const k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          rst[k] = Util.clone(obj[k]);\n        }\n      }\n    }\n\n    return rst;\n  },\n\n  downloadBlob(blob: Blob, fileName: string = \"\") {\n    if (navigator && navigator.msSaveBlob) {\n      navigator.msSaveBlob(blob, fileName);\n      return;\n    }\n\n    let url = window.URL.createObjectURL(blob);\n    let a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    a.href = url;\n    a.download = fileName;\n    a.addEventListener(\"click\", () => {\n      if (a.parentElement) {\n        a.parentElement.removeChild(a);\n      }\n    });\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n};\n\nexport const isArrayLike = <T>(x: any): x is ArrayLike<T> =>\n  x && typeof x.length === \"number\" && typeof x !== \"function\";\n\n/**\n * Fastly remove an element from array.\n * @param array - Array\n * @param item - Element\n */\nexport function removeFromArray(array: any[], item: any): boolean {\n  const index = array.indexOf(item);\n  if (index < 0) {\n    return false;\n  }\n  const last = array.length - 1;\n  if (index !== last) {\n    const end = array[last];\n    array[index] = end;\n  }\n  array.length--;\n  return true;\n}\n\nexport function ObjectValues(obj: any) {\n  return Object.keys(obj).map((key: any) => obj[key]);\n}\n","import { AssetPromise } from \"./AssetPromise\";\nimport { LoadItem } from \"./LoadItem\";\nimport { RefObject } from \"./RefObject\";\nimport { Engine } from \"..\";\nimport { Loader } from \"./Loader\";\nimport { AssetType } from \"./AssetType\";\nimport { ObjectValues } from \"../base/Util\";\n\n/**\n * ResourceManager\n */\nexport class ResourceManager {\n  /** Loader collection. */\n  private static _loaders: { [key: number]: Loader<any> } = {};\n  private static _extTypeMapping: { [key: string]: string } = {};\n\n  /**\n   * @internal\n   */\n  static _addLoader(type: string, loader: Loader<any>, extnames: string[]) {\n    this._loaders[type] = loader;\n    for (let i = 0, len = extnames.length; i < len; i++) {\n      this._extTypeMapping[extnames[i]] = type;\n    }\n  }\n\n  private static _getTypeByUrl(url: string): string {\n    const path = url.split(\"?\")[0];\n    return this._extTypeMapping[path.substring(path.lastIndexOf(\".\") + 1)];\n  }\n\n  /** The number of retries after failing to load assets. */\n  retryCount: number = 1;\n  /** Retry delay time after failed to load assets, in milliseconds. */\n  retryInterval: number = 0;\n  /** The default timeout period for loading assets, in milliseconds. */\n  timeout: number = 20000;\n\n  /** Asset path pool, key is asset ID, value is asset path */\n  private _assetPool: { [key: number]: string } = Object.create(null);\n  /** Asset pool, the key is the asset path and the value is the asset. */\n  private _assetUrlPool: { [key: string]: Object } = Object.create(null);\n  /** Reference counted object pool, key is the object ID, and reference counted objects are put into this pool. */\n  private _refObjectPool: { [key: number]: RefObject } = Object.create(null);\n  /** Loading assets. */\n  private _loadingPromises: { [url: string]: AssetPromise<any> } = {};\n\n  /**\n   * Create a ResourceManager.\n   * @param engine - Engine to which the current ResourceManager belongs\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load asset asynchronously through the path.\n   * @param path - Path\n   * @returns Asset promise\n   */\n  load<T>(path: string): AssetPromise<T>;\n\n  /**\n   * Load asset collection asynchronously through urls.\n   * @param paths - Path collections\n   * @returns Asset Promise\n   */\n  load(paths: string[]): AssetPromise<Object[]>;\n\n  /**\n   * Load the asset asynchronously by asset item information.\n   * @param assetItem - AssetItem\n   * @returns AssetPromise\n   */\n  load<T>(assetItem: LoadItem): AssetPromise<T>;\n\n  /**\n   * Load the asset collection asynchronously by loading the information collection.\n   * @param assetItems - Asset collection\n   * @returns AssetPromise\n   */\n  load(assetItems: LoadItem[]): AssetPromise<Object[]>;\n\n  load<T>(assetInfo: string | LoadItem | (LoadItem | string)[]): AssetPromise<T | Object[]> {\n    // single item\n    if (!Array.isArray(assetInfo)) {\n      return this._loadSingleItem(assetInfo);\n    }\n    // multi items\n    const promises = assetInfo.map((item) => this._loadSingleItem<T>(item));\n    return AssetPromise.all(promises);\n  }\n\n  /**\n   * Cancel all assets that have not finished loading.\n   */\n  cancelNotLoaded(): void;\n\n  /**\n   * Cancel assets whose url has not finished loading.\n   * @param url - Resource url\n   */\n  cancelNotLoaded(url: string): void;\n\n  /**\n   * Cancel the incompletely loaded assets in urls.\n   * @param urls - Resource urls\n   */\n  cancelNotLoaded(urls: string[]): void;\n\n  cancelNotLoaded(url?: string | string[]): void {\n    if (!url) {\n      ObjectValues(this._loadingPromises).forEach((promise) => {\n        promise.cancel();\n      });\n    } else if (typeof url === \"string\") {\n      this._loadingPromises[url]?.cancel();\n    } else {\n      url.forEach((p) => {\n        this._loadingPromises[p]?.cancel();\n      });\n    }\n  }\n\n  /**\n   * Garbage collection will release resource objects managed by reference counting.\n   * @remarks The release principle is that it is not referenced by the components, including direct and indirect reference.\n   */\n  gc(): void {\n    const objects = ObjectValues(this._refObjectPool);\n    for (let i = 0, len = objects.length; i < len; i++) {\n      if (!objects[i].isGCIgnored) {\n        objects[i].destroy();\n      }\n    }\n  }\n\n  /**\n   * Get asset url from instanceId.\n   * @param instanceId - Engine instance id\n   * @returns Asset url\n   */\n  getAssetPath(instanceId: number): string {\n    return this._assetPool[instanceId];\n  }\n\n  /**\n   * @internal\n   */\n  _addAsset(path: string, asset: RefObject): void {\n    this._assetPool[asset.instanceId] = path;\n    this._assetUrlPool[path] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteAsset(asset: RefObject): void {\n    const id = asset.instanceId;\n    const path = this._assetPool[id];\n    if (path) {\n      delete this._assetPool[id];\n      delete this._assetUrlPool[path];\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _addRefObject(id: number, asset: RefObject): void {\n    this._refObjectPool[id] = asset;\n  }\n\n  /**\n   * @internal\n   */\n  _deleteRefObject(id: number): void {\n    delete this._refObjectPool[id];\n  }\n\n  private _assignDefaultOptions(assetInfo: LoadItem): LoadItem | never {\n    assetInfo.type = assetInfo.type ?? ResourceManager._getTypeByUrl(assetInfo.url);\n    if (assetInfo.type === undefined) {\n      throw `asset type should be specified: ${assetInfo.url}`;\n    }\n    assetInfo.retryCount = assetInfo.retryCount ?? this.retryCount;\n    assetInfo.timeout = assetInfo.timeout ?? this.timeout;\n    assetInfo.retryInterval = assetInfo.retryInterval ?? this.retryInterval;\n    assetInfo.url = assetInfo.url ?? assetInfo.urls.join(\",\");\n    return assetInfo;\n  }\n\n  private _loadSingleItem<T>(item: LoadItem | string): AssetPromise<T> {\n    const info = this._assignDefaultOptions(typeof item === \"string\" ? { url: item } : item);\n    const url = info.url;\n    // has cache\n    if (this._assetUrlPool[url]) {\n      return new AssetPromise((resolve) => {\n        resolve(this._assetUrlPool[url] as T);\n      });\n    }\n    // loading\n    if (this._loadingPromises[url]) {\n      return this._loadingPromises[info.url];\n    }\n    const loader = ResourceManager._loaders[info.type];\n    const promise = loader.load(info, this);\n    this._loadingPromises[url] = promise;\n    promise\n      .then((res) => {\n        if (loader.useCache) this._addAsset(url, res);\n        delete this._loadingPromises[url];\n      })\n      .catch(() => {});\n    return promise;\n  }\n}\n\n/**\n * Declare ResourceLoader's decorator.\n * @param assetType - Type of asset\n * @param extnames - Name of file extension\n */\nexport function resourceLoader(assetType: string, extnames: string[], useCache: boolean = true) {\n  return <T extends Loader<any>>(Target: { new (useCache: boolean): T }) => {\n    const loader = new Target(useCache);\n    ResourceManager._addLoader(assetType, loader, extnames);\n  };\n}\n","import { EventDispatcher } from \"./EventDispatcher\";\n\nexport type Listener = ((e: Event) => any) & { once?: boolean };\n\n/** Event Object. * @class */\nexport class Event {\n  get propagationStopped(): boolean {\n    return this._propagationStopped;\n  }\n\n  get target(): EventDispatcher {\n    return this._target;\n  }\n\n  set target(t) {\n    this._target = t;\n  }\n\n  get timeStamp(): number {\n    return this._timeStamp;\n  }\n\n  get currentTarget(): EventDispatcher {\n    return this._currentTarget;\n  }\n\n  set currentTarget(t) {\n    this._currentTarget = t;\n  }\n\n  get bubbles(): boolean {\n    return this._bubbles;\n  }\n\n  get type(): string | number {\n    return this._type;\n  }\n\n  public data: any;\n\n  private _timeStamp: number;\n\n  private _target: EventDispatcher;\n\n  private _currentTarget: any;\n\n  private _bubbles: boolean;\n\n  private _propagationStopped: boolean;\n\n  private _type: string | number;\n\n  constructor(type: string | number, target: EventDispatcher = null, data: any = {}, bubbles: boolean = true) {\n    this._timeStamp = new Date().getTime();\n    this._target = target;\n    this.data = data;\n    this._currentTarget = null;\n    this._bubbles = bubbles;\n    this._propagationStopped = false;\n    this._type = type;\n  }\n\n  public stopPropagation(): void {\n    this._propagationStopped = true;\n  }\n}\n","/**\n * Clone mode.\n */\nexport enum CloneMode {\n  /** Ignore clone. */\n  Ignore,\n  /** Assignment clone. */\n  Assignment,\n  /** Shallow clone. */\n  Shallow,\n  /** Deep clone. */\n  Deep\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\ntype TypeArray =\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n\n/**\n * Property decorator, ignore the property when cloning.\n */\nexport function ignoreClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Ignore);\n}\n\n/**\n * Property decorator, assign value to the property when cloning.\n *\n * @remarks\n * If it's a primitive type, the value will be copied.\n * If it's a class type, the reference will be copied.\n */\nexport function assignmentClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Assignment);\n}\n\n/**\n * Property decorator, shallow clone the property when cloning.\n * After cloning, it will keep its own reference independent, and use the method of assignment to clone all its internal properties.\n * if the internal property is a primitive type, the value will be copied, if the internal property is a reference type, its reference address will be copied.。\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n */\nexport function shallowClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Shallow);\n}\n\n/**\n * Property decorator, deep clone the property when cloning.\n * After cloning, it will maintain its own reference independence, and all its internal deep properties will remain completely independent.\n *\n * @remarks\n * Applicable to Object, Array, TypedArray and Class types.\n * If Class is encountered during the deep cloning process, the custom cloning function of the object will be called first.\n * Custom cloning requires the object to implement the IClone interface.\n */\nexport function deepClone(target: Object, propertyKey: string): void {\n  CloneManager.registerCloneMode(target, propertyKey, CloneMode.Deep);\n}\n\n/**\n * @internal\n * Clone manager.\n */\nexport class CloneManager {\n  /** @internal */\n  static _subCloneModeMap = new Map<Object, Object>();\n  /** @internal */\n  static _cloneModeMap = new Map<Object, Object>();\n\n  private static _objectType = Object.getPrototypeOf(Object);\n\n  /**\n   * Register clone mode.\n   * @param target - Clone target\n   * @param propertyKey - Clone property name\n   * @param mode - Clone mode\n   */\n  static registerCloneMode(target: Object, propertyKey: string, mode: CloneMode): void {\n    let targetMap = CloneManager._subCloneModeMap.get(target.constructor);\n    if (!targetMap) {\n      targetMap = Object.create(null);\n      CloneManager._subCloneModeMap.set(target.constructor, targetMap);\n    }\n    targetMap[propertyKey] = mode;\n  }\n\n  /**\n   * Get the clone mode according to the prototype chain.\n   */\n  static getCloneMode(type: Function): Object {\n    let cloneModes = CloneManager._cloneModeMap.get(type);\n    if (!cloneModes) {\n      cloneModes = Object.create(null);\n      CloneManager._cloneModeMap.set(type, cloneModes);\n      const objectType = CloneManager._objectType;\n      const cloneModeMap = CloneManager._subCloneModeMap;\n      while (type !== objectType) {\n        const subCloneModes = cloneModeMap.get(type);\n        if (subCloneModes) {\n          Object.assign(cloneModes, subCloneModes);\n        }\n        type = Object.getPrototypeOf(type);\n      }\n    }\n    return cloneModes;\n  }\n\n  /**\n   * Deep clone the object.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static deepCloneObject(source: Object, target: Object): void {\n    const type = source.constructor;\n    switch (type) {\n      case Uint8Array:\n      case Uint16Array:\n      case Uint32Array:\n      case Int8Array:\n      case Int16Array:\n      case Int32Array:\n      case Float32Array:\n      case Float64Array:\n        // Type array clone.\n        (<TypeArray>target).set(<TypeArray>source);\n        break;\n      case Array:\n        // Array clone.\n        for (let i = 0, n = (<[]>source).length; i < n; i++) {\n          CloneManager._deepCloneObjectItem(source, target, i);\n        }\n        break;\n      default:\n        const customSource = <IClone>source;\n        if (customSource.clone && customSource.cloneTo) {\n          // Custom clone.\n          customSource.cloneTo(target);\n        } else {\n          // Object or other class not implements custom clone.\n          const keys = Object.keys(source);\n          for (let i = 0, n = keys.length; i < n; i++) {\n            CloneManager._deepCloneObjectItem(source, target, keys[i]);\n          }\n        }\n    }\n  }\n\n  private static _deepCloneObjectItem(source: object, target: object, k: number | string): void {\n    const sourceItem = source[k];\n    if (sourceItem instanceof Object) {\n      const itemType = (<Object>sourceItem).constructor;\n      switch (itemType) {\n        case Uint8Array:\n        case Uint16Array:\n        case Uint32Array:\n        case Int8Array:\n        case Int16Array:\n        case Int32Array:\n        case Float32Array:\n        case Float64Array:\n          // Type array clone.\n          const sourceTypeArrayItem = <TypeArray>sourceItem;\n          let targetTypeArrayItem = <TypeArray>target[k];\n          if (targetTypeArrayItem == null) {\n            target[k] = sourceTypeArrayItem.slice();\n          } else {\n            targetTypeArrayItem.set(sourceTypeArrayItem);\n          }\n          break;\n        case Array:\n          // Array clone.\n          const sourceArrayItem = <[]>sourceItem;\n          let targetArrayItem = <[]>target[k];\n          if (targetArrayItem == null) {\n            target[k] = new Array(sourceArrayItem.length);\n          } else {\n            targetArrayItem.length = sourceArrayItem.length;\n          }\n          CloneManager.deepCloneObject(sourceArrayItem, targetArrayItem);\n          break;\n        default:\n          if (sourceItem.clone && sourceItem.cloneTo) {\n            // Custom clone.\n            let sourceCustomItem = <IClone>sourceItem;\n            let targetCustomItem = <IClone>target[k];\n            if (targetCustomItem) {\n              sourceCustomItem.cloneTo(targetCustomItem);\n            } else {\n              target[k] = sourceCustomItem.clone();\n            }\n          } else {\n            // Object or other class not implements custom clone.\n            let targetItem = <Object>target[k];\n            targetItem == null && (target[k] = targetItem = new sourceItem.constructor());\n            CloneManager.deepCloneObject(sourceItem, targetItem);\n            break;\n          }\n      }\n    } else {\n      // Null or undefined and primitive type.\n      target[k] = sourceItem;\n    }\n  }\n}\n","import { ignoreClone } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\n\n/**\n * EngineObject.\n */\nexport abstract class EngineObject {\n  private static _instanceIdCounter: number = 0;\n\n  /** Engine unique id. */\n  @ignoreClone\n  readonly instanceId: number = ++EngineObject._instanceIdCounter;\n\n  /** Engine to which the object belongs. */\n  @ignoreClone\n  protected _engine: Engine;\n\n  /**\n   * Get the engine which the object belongs.\n   */\n  get engine(): Engine {\n    return this._engine;\n  }\n\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n}\n","import { EngineObject } from \"./EngineObject\";\nimport { Event } from \"./Event\";\nimport { ignoreClone } from \"../clone/CloneManager\";\n\n/**\n * EventDispatcher, which can be inherited as a base class.\n */\nexport class EventDispatcher extends EngineObject {\n  @ignoreClone\n  private _evts = Object.create(null);\n  private _evtCount = 0;\n\n  /**\n   * Determine whether there is event listening.\n   * @param event - Event name\n   * @returns Returns whether there is a corresponding event\n   */\n  hasEvent(event: string): boolean {\n    return this._evts[event] != null;\n  }\n\n  /**\n   * Returns the names of all registered events.\n   * @returns All event names\n   */\n  eventNames(): string[] {\n    if (this._evtCount === 0) return [];\n    return Object.keys(this._evts);\n  }\n\n  /**\n   * Returns the number of listeners with the specified event name.\n   * @param event - Event name\n   * @returns The count of listeners\n   */\n  listenerCount(event: string): number {\n    const listeners = this._evts[event];\n\n    if (!listeners) return 0;\n    if (listeners.fn) return 1;\n    return listeners.length;\n  }\n\n  /**\n   * Dispatch the event with the specified event name.\n   * @param event - Event name\n   * @param data - Data\n   * @returns - Whether the dispatching is successful\n   */\n  dispatch(event: string, data?: any): boolean {\n    if (!this._evts[event]) {\n      return false;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn) {\n      if (listeners.once) this.removeEventListener(event, listeners.fn);\n      listeners.fn(data);\n    } else {\n      const l = listeners.length;\n      for (let i = 0; i < l; i++) {\n        if (listeners[i].once) this.removeEventListener(event, listeners[i].fn);\n        listeners[i].fn(data);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Add a listener/\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  on(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn);\n  }\n\n  /**\n   * Add a one-time listener.\n   * @param event - Event name\n   * @param fn - Function\n   * @returns This\n   */\n  once(event: string, fn: Function): EventDispatcher {\n    return this.addEventListener(event, fn, true);\n  }\n\n  /**\n   * @deprecated Use `on/once` instead.\n   * Add a listener function with the specified event name.\n   * @param event - Event name\n   * @param fn - Function\n   * @param once - Is it a one-time listener\n   * @returns this\n   */\n  addEventListener(event: string, fn: Function, once?: boolean): EventDispatcher {\n    const listener = { fn, once };\n    const events = this._evts;\n    if (!events[event]) {\n      events[event] = listener;\n      this._evtCount++;\n    } else if (!events[event].fn) {\n      events[event].push(listener);\n    } else {\n      events[event] = [events[event], listener];\n    }\n    return this;\n  }\n\n  /**\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  off(event: string, fn?: Function): EventDispatcher {\n    if (!this._evts[event]) return this;\n    if (!fn) {\n      this._clearEvent(event);\n      return this;\n    }\n\n    const listeners = this._evts[event];\n\n    if (listeners.fn && listeners.fn === fn) {\n      this._clearEvent(event);\n    } else {\n      const index = listeners.indexOf(fn);\n      if (index > -1) {\n        const temp = listeners[listeners.length - 1];\n        listeners[index] = temp;\n        listeners.length--;\n        if (listeners.length === 1) {\n          this._evts[event] = listeners[0];\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   * @deprecated Use `off` instead.\n   * Remove the event listener(s) of the specified event name.\n   * @param event - Event name\n   * @param fn - Function, If is undefined, delete all corresponding event listeners.\n   */\n  removeEventListener(event: string, fn?: Function): EventDispatcher {\n    return this.off(event, fn);\n  }\n\n  /**\n   * Remove all event listeners.\n   * @param event - Event name, delete all events if not passed\n   */\n  removeAllEventListeners(event?: string): void {\n    if (event) {\n      if (this._evts[event]) this._clearEvent(event);\n    } else {\n      this._evts = Object.create(null);\n      this._evtCount = 0;\n    }\n  }\n\n  /**\n   * @deprecated Use `dispatch` instead.\n   */\n  trigger(e: Event) {\n    this.dispatch(e.type as string, e.data);\n  }\n\n  private _clearEvent(event: string) {\n    if (--this._evtCount === 0) {\n      this._evts = Object.create(null);\n    } else {\n      delete this._evts[event];\n    }\n  }\n}\n","/**\n * @class\n * @private\n */\n/* tslint:disable */\nconst noop = (message?: any, ...optionalParams: any[]) => {};\nconst debug = console.log.bind(console);\nconst info = console.info.bind(console);\nconst warn = console.warn.bind(console);\nconst error = console.error.bind(console);\n\nexport const Logger = {\n  debug: noop,\n  info: noop,\n  warn: noop,\n  error: noop,\n  isEnabled: false,\n\n  /** Turn on log */\n  enable() {\n    this.debug = debug;\n    this.info = info;\n    this.warn = warn;\n    this.error = error;\n    this.isEnabled = true;\n  },\n\n  /** Turn off log */\n  disable() {\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n    this.isEnabled = false;\n  }\n};\n","/**\n * Tools for calculating the time per frame.\n */\nexport class Time {\n  private _clock: { now: () => number };\n\n  private _timeScale: number;\n\n  private _deltaTime: number;\n\n  private _startTime: number;\n\n  private _lastTickTime: number;\n  /**\n   * Constructor of the Time.\n   */\n  constructor() {\n    this._clock = performance ? performance : Date;\n\n    this._timeScale = 1.0;\n    this._deltaTime = 0.0001;\n\n    const now = this._clock.now();\n    this._startTime = now;\n    this._lastTickTime = now;\n  }\n\n  reset() {\n    this._lastTickTime = this._clock.now();\n  }\n\n  /**\n   * Current Time\n   */\n  get nowTime(): number {\n    return this._clock.now();\n  }\n\n  /**\n   * Time between two ticks\n   */\n  get deltaTime(): number {\n    return this._deltaTime;\n  }\n\n  /**\n   * Scaled delta time.\n   */\n  get timeScale(): number {\n    return this._timeScale;\n  }\n  set timeScale(s) {\n    this._timeScale = s;\n  }\n\n  /**\n   * Unscaled delta time.\n   */\n  get unscaledDeltaTime(): number {\n    return this._deltaTime / this._timeScale;\n  }\n\n  /**\n   * The elapsed time, after the clock is initialized.\n   */\n  get timeSinceStartup(): number {\n    return this.nowTime - this._startTime;\n  }\n\n  /**\n   * Call every frame, update delta time and other data.\n   */\n  public tick(): void {\n    const now = this.nowTime;\n    this._deltaTime = (now - this._lastTickTime) * this._timeScale;\n    this._lastTickTime = now;\n  }\n}\n","/**\n * Data type enumeration\n */\nexport enum DataType {\n  /** Float */\n  FLOAT = 5126, // gl.FLOAT\n  /** Floating-point two-dimensional vector */\n  FLOAT_VEC2 = 35664, // gl.FLOAT_VEC2\n  /** Floating-point three-dimensional vector */\n  FLOAT_VEC3 = 35665, // gl.FLOAT_VEC3\n  /** Floating-point four-dimensional vector */\n  FLOAT_VEC4 = 35666, // gl.FLOAT_VEC4\n\n  /** Integer */\n  INT = 5124, // gl.INT\n  /** Integer two-dimensional vector */\n  INT_VEC2 = 35667, // gl.INT_VEC2\n  /** Integer three-dimensional vector */\n  INT_VEC3 = 35668, // gl.INT_VEC3\n  /** Integer four-dimensional vector */\n  INT_VEC4 = 35669, // gl.INT_VEC4\n\n  /** Boolean */\n  BOOL = 35670, // gl.BOOL\n  /** Boolean two-dimensional vector */\n  BOOL_VEC2 = 35671, // gl.BOOL_VEC2\n  /** Boolean three-dimensional vector */\n  BOOL_VEC3 = 35672, // gl.BOOL_VEC3\n  /** Boolean four-dimensional vector */\n  BOOL_VEC4 = 35673, // gl.BOOL_VEC4\n\n  /** Second-order matrix */\n  FLOAT_MAT2 = 35674, // gl.FLOAT_MAT2\n  /** Third-order matrix */\n  FLOAT_MAT3 = 35675, // gl.FLOAT_MAT3\n  /** Fourth-order matrix */\n  FLOAT_MAT4 = 35676, // gl.FLOAT_MAT4\n\n  /** Float array */\n  FLOAT_ARRAY = 35677, // gl.FLOAT_ARRAY\n  /** Floating-point two-dimensional vector array */\n  FLOAT_VEC2_ARRAY = 100000,\n  /** Floating-point three-dimensional vector array */\n  FLOAT_VEC3_ARRAY,\n  /** Floating-point four-dimensional vector array */\n  FLOAT_VEC4_ARRAY,\n\n  /** Integer array */\n  INT_ARRAY,\n  /** Integer two-dimensional vector array */\n  INT_VEC2_ARRAY,\n  /** Integer three-dimensional vector array */\n  INT_VEC3_ARRAY,\n  /** Integer four-dimensional vector array */\n  INT_VEC4_ARRAY,\n\n  /** Second-order matrix array */\n  FLOAT_MAT2_ARRAY,\n  /** Third-order matrix array */\n  FLOAT_MAT3_ARRAY,\n  /** Fourth-order matrix array */\n  FLOAT_MAT4_ARRAY,\n\n  /** 2D texture sampler array */\n  SAMPLER_2D_ARRAY,\n  /** Cube map texture sampler array */\n  SAMPLER_CUBE_ARRAY,\n\n  /** 2D sampler */\n  SAMPLER_2D = 35678, // gl.SAMPLER_2D\n  /** Cube map Texture sampler */\n  SAMPLER_CUBE = 35680, // gl.SAMPLER_CUBE\n\n  /** Byte */\n  BYTE = 5120, // gl.BYTE\n  /** Unsigned byte */\n  UNSIGNED_BYTE = 5121, // gl.UNSIGNED_BYTE\n  /** Short */\n  SHORT = 5122, // gl.SHORT\n  /** Unsigned short */\n  UNSIGNED_SHORT = 5123, // gl.UNSIGNED_SHORT\n  /** Unsigned int */\n  UNSIGNED_INT = 5125 // gl.UNSIGNED_INT\n}\n\n/**\n * GL Capabilities\n * Some capabilities can be smoothed out by extension, and some capabilities must use WebGL 2.0.\n * */\nexport enum GLCapabilityType {\n  shaderVertexID = \"shaderVertexID\",\n  standardDerivatives = \"OES_standard_derivatives\",\n  shaderTextureLod = \"EXT_shader_texture_lod\",\n  elementIndexUint = \"OES_element_index_uint\",\n  depthTexture = \"WEBGL_depth_texture\",\n  drawBuffers = \"WEBGL_draw_buffers\",\n  vertexArrayObject = \"OES_vertex_array_object\",\n  instancedArrays = \"ANGLE_instanced_arrays\",\n  multipleSample = \"multipleSampleOnlySupportedInWebGL2\",\n  textureFloat = \"OES_texture_float\",\n  textureFloatLinear = \"OES_texture_float_linear\",\n  textureHalfFloat = \"OES_texture_half_float\",\n  textureHalfFloatLinear = \"OES_texture_half_float_linear\",\n  WEBGL_colorBufferFloat = \"WEBGL_color_buffer_float\",\n  colorBufferFloat = \"EXT_color_buffer_float\",\n  colorBufferHalfFloat = \"EXT_color_buffer_half_float\",\n  textureFilterAnisotropic = \"EXT_texture_filter_anisotropic\",\n  blendMinMax = \"EXT_blend_minmax\",\n\n  astc = \"WEBGL_compressed_texture_astc\",\n  astc_webkit = \"WEBKIT_WEBGL_compressed_texture_astc\",\n  etc = \"WEBGL_compressed_texture_etc\",\n  etc_webkit = \"WEBKIT_WEBGL_compressed_texture_etc\",\n  etc1 = \"WEBGL_compressed_texture_etc1\",\n  etc1_webkit = \"WEBKIT_WEBGL_compressed_texture_etc1\",\n  pvrtc = \"WEBGL_compressed_texture_pvrtc\",\n  pvrtc_webkit = \"WEBKIT_WEBGL_compressed_texture_pvrtc\",\n  s3tc = \"WEBGL_compressed_texture_s3tc\",\n  s3tc_webkit = \"WEBKIT_WEBGL_compressed_texture_s3tc\"\n  // atc = \"WEBGL_compressed_texture_atc\",\n  // s3tc_srgb = \"WEBGL_compressed_texture_s3tc_srgb\"\n}\n\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray\n  | Float32Array\n  | Float64Array;\n","/**\n * High-performance unordered array, delete uses exchange method to improve performance, internal capacity only increases.\n */\nexport class DisorderedArray<T> {\n  _elements: T[];\n\n  length: number = 0;\n\n  constructor(count: number = 0) {\n    this._elements = new Array<T>(count);\n  }\n\n  add(element: T): void {\n    if (this.length === this._elements.length) this._elements.push(element);\n    else this._elements[this.length] = element;\n    this.length++;\n  }\n\n  delete(element: T): void {\n    //TODO: It can be optimized for custom binary search and other algorithms, currently this._elements>=this.length wastes performance.\n    const index = this._elements.indexOf(element);\n    this.deleteByIndex(index);\n  }\n\n  get(index: number): T {\n    if (index >= this.length) {\n      throw \"Index is out of range.\";\n    }\n    return this._elements[index];\n  }\n\n  /**\n   *\n   * @param index\n   * @returns The replaced item is used to reset its index.\n   */\n  deleteByIndex(index: number): T {\n    var elements: T[] = this._elements;\n    let end: T = null;\n    const lastIndex = this.length - 1;\n    if (index !== lastIndex) {\n      end = elements[lastIndex];\n      elements[index] = end;\n    }\n    this.length--;\n    return end;\n  }\n\n  garbageCollection(): void {\n    this._elements.length = this.length;\n  }\n}\n","import { ShaderMacro } from \"./ShaderMacro\";\n\n/**\n * Shader macro collection.\n * @internal\n */\nexport class ShaderMacroCollection {\n  /**\n   * Union of two macro collection.\n   * @param left - input macro collection\n   * @param right - input macro collection\n   * @param out - union output macro collection\n   */\n  static unionCollection(left: ShaderMacroCollection, right: ShaderMacroCollection, out: ShaderMacroCollection): void {\n    const outMask = out._mask;\n    let minSize: number, maxSize: number;\n    let minMask: number[], maxMask: number[];\n    if (left._length < right._length) {\n      minSize = left._length;\n      maxSize = right._length;\n      minMask = left._mask;\n      maxMask = right._mask;\n    } else {\n      minSize = right._length;\n      maxSize = left._length;\n      minMask = right._mask;\n      maxMask = left._mask;\n    }\n\n    let i = 0;\n    outMask.length < maxSize && (outMask.length = maxSize);\n    for (; i < minSize; i++) {\n      outMask[i] = minMask[i] | maxMask[i];\n    }\n    for (; i < maxSize; i++) {\n      outMask[i] = maxMask[i];\n    }\n    out._length = maxSize;\n  }\n\n  /** @internal */\n  _mask: number[] = [];\n  /** @internal */\n  _length: number = 0;\n\n  /**\n   * Enable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  enable(macro: ShaderMacro): void {\n    const index = macro._index;\n    const size = index + 1;\n    const mask = this._mask;\n    let maskStart = this._length; // must from this._length because this._length maybe less than mask.length and have dirty data should clear.\n    if (maskStart < size) {\n      mask.length < size && (mask.length = size); // mask.length maybe small than size,maybe not.\n      for (; maskStart < index; maskStart++) {\n        mask[maskStart] = 0;\n      }\n      mask[index] = macro._value;\n      this._length = size;\n    } else {\n      mask[index] |= macro._value;\n    }\n  }\n\n  /**\n   * Disable one macro in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  disable(macro: ShaderMacro): void {\n    const index = macro._index;\n    const mask = this._mask;\n    const endIndex = this._length - 1;\n    if (index > endIndex) {\n      return;\n    }\n    const newValue = mask[index] & ~macro._value;\n    if (index == endIndex && newValue === 0) {\n      this._length--;\n    } else {\n      mask[index] = newValue;\n    }\n  }\n\n  /**\n   * Union of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  unionCollection(macroCollection: ShaderMacroCollection): void {\n    const addMask = macroCollection._mask;\n    const addSize = macroCollection._length;\n    const mask = this._mask;\n    const maskSize = this._length;\n    if (maskSize < addSize) {\n      mask.length < addSize && (mask.length = addSize);\n      let i = 0;\n      for (; i < maskSize; i++) {\n        mask[i] |= addMask[i];\n      }\n      for (; i < addSize; i++) {\n        mask[i] = addMask[i];\n      }\n      this._length = addSize;\n    } else {\n      for (let i = 0; i < addSize; i++) {\n        mask[i] |= addMask[i];\n      }\n    }\n  }\n\n  /**\n   * Complementarity of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  complementaryCollection(macroCollection: ShaderMacroCollection): void {\n    const removeMask = macroCollection._mask;\n    const mask = this._mask;\n    let endIndex = this._length - 1;\n    let i = Math.min(macroCollection._length - 1, endIndex);\n    for (; i >= 0; i--) {\n      const newValue = mask[i] & ~removeMask[i];\n      if (i == endIndex && newValue === 0) {\n        endIndex--;\n        this._length--;\n      } else {\n        mask[i] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Intersection of this and other macro collection.\n   * @param macroCollection - macro collection\n   */\n  intersectionCollection(macroCollection: ShaderMacroCollection): void {\n    const unionMask = macroCollection._mask;\n    const mask = this._mask;\n    for (let i = this._length - 1; i >= 0; i--) {\n      const value = mask[i] & unionMask[i];\n      if (value == 0 && i == this._length - 1) {\n        this._length--;\n      } else {\n        mask[i] = value;\n      }\n    }\n  }\n\n  /**\n   * Whether macro is enabled in this macro collection.\n   * @param macro - ShaderMacro\n   */\n  isEnable(macro: ShaderMacro): boolean {\n    const index = macro._index;\n    if (index >= this._length) {\n      return false;\n    }\n    return (this._mask[index] & macro._value) !== 0;\n  }\n\n  /**\n   * Clear this macro collection.\n   */\n  clear(): void {\n    this._length = 0;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { DisorderedArray } from \"./DisorderedArray\";\nimport { Component } from \"./Component\";\nimport { Renderer } from \"./Renderer\";\nimport { Script } from \"./Script\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * The manager of the components.\n */\nexport class ComponentsManager {\n  private static _tempVector0 = new Vector3();\n  private static _tempVector1 = new Vector3();\n\n  // Script\n  private _onStartScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _onLateUpdateScripts: DisorderedArray<Script> = new DisorderedArray();\n  private _destroyComponents: Script[] = [];\n\n  // Animation\n  private _onUpdateAnimations: DisorderedArray<Component> = new DisorderedArray();\n\n  // Render\n  private _renderers: DisorderedArray<Renderer> = new DisorderedArray();\n  private _onUpdateRenderers: DisorderedArray<Renderer> = new DisorderedArray();\n\n  // Delay dispose active/inActive Pool\n  private _componentsContainerPool: Component[][] = [];\n\n  addRenderer(renderer: Renderer) {\n    renderer._rendererIndex = this._renderers.length;\n    this._renderers.add(renderer);\n  }\n\n  removeRenderer(renderer: Renderer) {\n    const replaced = this._renderers.deleteByIndex(renderer._rendererIndex);\n    replaced && (replaced._rendererIndex = renderer._rendererIndex);\n    renderer._rendererIndex = -1;\n  }\n\n  addOnStartScript(script: Script) {\n    script._onStartIndex = this._onStartScripts.length;\n    this._onStartScripts.add(script);\n  }\n\n  removeOnStartScript(script: Script): void {\n    const replaced = this._onStartScripts.deleteByIndex(script._onStartIndex);\n    replaced && (replaced._onStartIndex = script._onStartIndex);\n    script._onStartIndex = -1;\n  }\n\n  addOnUpdateScript(script: Script) {\n    script._onUpdateIndex = this._onUpdateScripts.length;\n    this._onUpdateScripts.add(script);\n  }\n\n  removeOnUpdateScript(script: Script): void {\n    const replaced = this._onUpdateScripts.deleteByIndex(script._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = script._onUpdateIndex);\n    script._onUpdateIndex = -1;\n  }\n\n  addOnLateUpdateScript(script: Script): void {\n    script._onLateUpdateIndex = this._onLateUpdateScripts.length;\n    this._onLateUpdateScripts.add(script);\n  }\n\n  removeOnLateUpdateScript(script: Script): void {\n    const replaced = this._onLateUpdateScripts.deleteByIndex(script._onLateUpdateIndex);\n    replaced && (replaced._onLateUpdateIndex = script._onLateUpdateIndex);\n    script._onLateUpdateIndex = -1;\n  }\n\n  addOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    animation._onUpdateIndex = this._onUpdateAnimations.length;\n    this._onUpdateAnimations.add(animation);\n  }\n\n  removeOnUpdateAnimations(animation: Component): void {\n    //@ts-ignore\n    const replaced = this._onUpdateAnimations.deleteByIndex(animation._onUpdateIndex);\n    //@ts-ignore\n    replaced && (replaced._onUpdateIndex = animation._onUpdateIndex);\n    //@ts-ignore\n    animation._onUpdateIndex = -1;\n  }\n\n  addOnUpdateRenderers(renderer: Renderer): void {\n    renderer._onUpdateIndex = this._onUpdateRenderers.length;\n    this._onUpdateRenderers.add(renderer);\n  }\n\n  removeOnUpdateRenderers(renderer: Renderer): void {\n    const replaced = this._onUpdateRenderers.deleteByIndex(renderer._onUpdateIndex);\n    replaced && (replaced._onUpdateIndex = renderer._onUpdateIndex);\n    renderer._onUpdateIndex = -1;\n  }\n\n  addDestroyComponent(component): void {\n    this._destroyComponents.push(component);\n  }\n\n  callScriptOnStart(): void {\n    const onStartScripts = this._onStartScripts;\n    if (onStartScripts.length > 0) {\n      const elements = onStartScripts._elements;\n      // The 'onStartScripts.length' maybe add if you add some Script with addComponent() in some Script's onStart()\n      for (let i = 0; i < onStartScripts.length; i++) {\n        const script = elements[i];\n        script._started = true;\n        script._onStartIndex = -1;\n        script.onStart();\n      }\n      onStartScripts.length = 0;\n    }\n  }\n\n  callScriptOnUpdate(deltaTime): void {\n    const elements = this._onUpdateScripts._elements;\n    for (let i = this._onUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onUpdate(deltaTime);\n      }\n    }\n  }\n\n  callScriptOnLateUpdate(deltaTime): void {\n    const elements = this._onLateUpdateScripts._elements;\n    for (let i = this._onLateUpdateScripts.length - 1; i >= 0; --i) {\n      const element = elements[i];\n      if (element._started) {\n        element.onLateUpdate(deltaTime);\n      }\n    }\n  }\n\n  callAnimationUpdate(deltaTime): void {\n    const elements = this._onUpdateAnimations._elements;\n    for (let i = this._onUpdateAnimations.length - 1; i >= 0; --i) {\n      //@ts-ignore\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRendererOnUpdate(deltaTime: number): void {\n    const elements = this._onUpdateRenderers._elements;\n    for (let i = this._onUpdateRenderers.length - 1; i >= 0; --i) {\n      elements[i].update(deltaTime);\n    }\n  }\n\n  callRender(context: RenderContext): void {\n    const camera = context._camera;\n    const elements = this._renderers._elements;\n    for (let i = this._renderers.length - 1; i >= 0; --i) {\n      const element = elements[i];\n\n      // filter by camera culling mask.\n      if (!(camera.cullingMask & element._entity.layer)) {\n        continue;\n      }\n\n      // filter by camera frustum.\n      if (camera.enableFrustumCulling) {\n        element.isCulled = !camera._frustum.intersectsBox(element.bounds);\n        if (element.isCulled) {\n          continue;\n        }\n      }\n\n      const transform = camera.entity.transform;\n      const position = transform.worldPosition;\n      const center = element.bounds.getCenter(ComponentsManager._tempVector0);\n      if (camera.isOrthographic) {\n        const forward = transform.getWorldForward(ComponentsManager._tempVector1);\n        Vector3.subtract(center, position, center);\n        element._distanceForSort = Vector3.dot(center, forward);\n      } else {\n        element._distanceForSort = Vector3.distanceSquared(center, position);\n      }\n\n      element._updateShaderData(context);\n\n      element._render(camera);\n\n      // union camera global macro and renderer macro.\n      ShaderMacroCollection.unionCollection(\n        camera._globalShaderMacro,\n        element.shaderData._macroCollection,\n        element._globalShaderMacro\n      );\n    }\n  }\n\n  callComponentDestroy(): void {\n    const destroyComponents = this._destroyComponents;\n    const length = destroyComponents.length;\n    if (length > 0) {\n      for (let i = length - 1; i >= 0; --i) {\n        destroyComponents[i].onDestroy();\n      }\n      destroyComponents.length = 0;\n    }\n  }\n\n  callCameraOnBeginRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onBeginRender(camera);\n    }\n  }\n\n  callCameraOnEndRender(camera: Camera) {\n    const camComps = camera.entity._components;\n    for (let i = camComps.length - 1; i >= 0; --i) {\n      const camComp = camComps[i];\n      (camComp as any).onBeginRender && (camComp as any).onEndRender(camera);\n    }\n  }\n\n  getActiveChangedTempList(): Component[] {\n    return this._componentsContainerPool.length ? this._componentsContainerPool.pop() : [];\n  }\n\n  putActiveChangedTempList(componentContainer: Component[]): void {\n    componentContainer.length = 0;\n    this._componentsContainerPool.push(componentContainer);\n  }\n}\n","import { Component } from \"../Component\";\nimport { CloneManager } from \"./CloneManager\";\nimport { CloneMode } from \"./enums/CloneMode\";\n\n/**\n * Custom clone interface.\n */\nexport interface ICustomClone {\n  /**\n   * @internal\n   */\n  _cloneTo(target: ICustomClone): void;\n}\n\nexport class ComponentCloner {\n  /**\n   * Clone component.\n   * @param source - Clone source\n   * @param target - Clone target\n   */\n  static cloneComponent(source: Component, target: Component): void {\n    const cloneModes = CloneManager.getCloneMode(source.constructor);\n    const keys = Object.keys(source);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const cloneMode = cloneModes[k];\n      switch (cloneMode) {\n        case undefined:\n        case CloneMode.Assignment:\n          target[k] = source[k];\n          break;\n        case CloneMode.Shallow:\n          const sourcePropS: Object = source[k];\n          if (sourcePropS instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropS.constructor());\n            Object.assign(tarProp, sourcePropS);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropS;\n          }\n          break;\n        case CloneMode.Deep:\n          const sourcePropD: Object = source[k];\n          if (sourcePropD instanceof Object) {\n            let tarProp = <Object>target[k];\n            tarProp == null && (tarProp = target[k] = sourcePropD.constructor());\n            CloneManager.deepCloneObject(sourcePropD, tarProp);\n          } else {\n            // Null or undefined and primitive type.\n            target[k] = sourcePropD;\n          }\n          break;\n      }\n    }\n    if ((<any>source)._cloneTo) {\n      (<any>source)._cloneTo(target);\n    }\n  }\n}\n","import { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\n\ntype ComponentConstructor = new (entity: Entity) => Component;\n\n/**\n * Used for component dependency registration.\n */\nexport class ComponentsDependencies {\n  /**\n   * @internal\n   */\n  private static _dependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n  private static _invDependenciesMap = new Map<ComponentConstructor, ComponentConstructor[]>();\n\n  /**\n   * Register component dependencies.\n   * @param currentComponent - The component you want to be register.\n   * @param dependentComponent - The component's dependencies.\n   */\n  static register(currentComponent: ComponentConstructor, dependentComponent: ComponentConstructor) {\n    this._addDependency(currentComponent, dependentComponent, this._dependenciesMap);\n    this._addDependency(dependentComponent, currentComponent, this._invDependenciesMap);\n  }\n\n  /**\n   * @internal\n   */\n  static _addCheck(entity: Entity, type: ComponentConstructor) {\n    // Check if there are dependent components.\n    const dependencies = ComponentsDependencies._dependenciesMap.get(type);\n    if (dependencies) {\n      for (let i = 0, len = dependencies.length; i < len; i++) {\n        if (!entity.getComponent(dependencies[i])) {\n          throw `you should add ${dependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _removeCheck(entity: Entity, type: ComponentConstructor) {\n    const invDependencies = ComponentsDependencies._invDependenciesMap.get(type);\n    if (invDependencies) {\n      for (let i = 0, len = invDependencies.length; i < len; i++) {\n        if (entity.getComponent(invDependencies[i])) {\n          throw `you should remove ${invDependencies[i]} before adding ${type}`;\n        }\n      }\n    }\n  }\n\n  private static _addDependency(\n    currentComponent: ComponentConstructor,\n    dependentComponent: ComponentConstructor,\n    map: Map<any, any>\n  ) {\n    let components = map.get(currentComponent);\n    if (!components) {\n      components = [];\n      map.set(currentComponent, components);\n    }\n    if (components.indexOf(dependentComponent) === -1) {\n      components.push(dependentComponent);\n    }\n  }\n\n  private constructor() {}\n}\n\nexport function dependencies(...abilityClass: ComponentConstructor[]) {\n  return function <T extends ComponentConstructor>(target: T): void {\n    abilityClass.forEach((ability) => ComponentsDependencies.register(target, ability));\n  };\n}\n","/**\n * Layer, used for bit operations.\n */\nexport enum Layer {\n  /** Layer 0. */\n  Layer0 = 0x1,\n  /** Layer 1. */\n  Layer1 = 0x2,\n  /** Layer 2. */\n  Layer2 = 0x4,\n  /** Layer 3. */\n  Layer3 = 0x8,\n  /** Layer 4. */\n  Layer4 = 0x10,\n  /** Layer 5. */\n  Layer5 = 0x20,\n  /** Layer 6. */\n  Layer6 = 0x40,\n  /** Layer 7. */\n  Layer7 = 0x80,\n  /** Layer 8. */\n  Layer8 = 0x100,\n  /** Layer 9. */\n  Layer9 = 0x200,\n  /** Layer 10. */\n  Layer10 = 0x400,\n  /** Layer 11. */\n  Layer11 = 0x800,\n  /** Layer 12. */\n  Layer12 = 0x1000,\n  /** Layer 13. */\n  Layer13 = 0x2000,\n  /** Layer 14. */\n  Layer14 = 0x4000,\n  /** Layer 15. */\n  Layer15 = 0x8000,\n  /** Layer 16. */\n  Layer16 = 0x10000,\n  /** Layer 17. */\n  Layer17 = 0x20000,\n  /** Layer 18. */\n  Layer18 = 0x40000,\n  /** Layer 19. */\n  Layer19 = 0x80000,\n  /** Layer 20. */\n  Layer20 = 0x100000,\n  /** Layer 21. */\n  Layer21 = 0x200000,\n  /** Layer 22. */\n  Layer22 = 0x400000,\n  /** Layer 23. */\n  Layer23 = 0x800000,\n  /** Layer 24. */\n  Layer24 = 0x1000000,\n  /** Layer 25. */\n  Layer25 = 0x2000000,\n  /** Layer 26. */\n  Layer26 = 0x4000000,\n  /** Layer 27. */\n  Layer27 = 0x8000000,\n  /** Layer 28. */\n  Layer28 = 0x10000000,\n  /** Layer 29. */\n  Layer29 = 0x20000000,\n  /** Layer 30. */\n  Layer30 = 0x40000000,\n  /** Layer 31. */\n  Layer31 = 0x80000000,\n  /** All layers. */\n  Everything = 0xffffffff,\n  /** None layer. */\n  Nothing = 0x0\n}\n","import { EngineObject } from \"./base\";\nimport { assignmentClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { Scene } from \"./Scene\";\n\n/**\n * The base class of the components.\n */\nexport abstract class Component extends EngineObject {\n  /** @internal */\n  @ignoreClone\n  _entity: Entity;\n  /** @internal */\n  @ignoreClone\n  _destroyed: boolean = false;\n\n  @assignmentClone\n  private _enabled: boolean = true;\n  @ignoreClone\n  private _awoken: boolean = false;\n\n  /**\n   * Indicates whether the component is enabled.\n   */\n  get enabled(): boolean {\n    return this._enabled;\n  }\n\n  set enabled(value: boolean) {\n    if (value === this._enabled) {\n      return;\n    }\n    this._enabled = value;\n    if (value) {\n      this._entity.isActiveInHierarchy && this._onEnable();\n    } else {\n      this._entity.isActiveInHierarchy && this._onDisable();\n    }\n  }\n\n  /**\n   * Indicates whether the component is destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * The entity which the component belongs to.\n   */\n  get entity(): Entity {\n    return this._entity;\n  }\n\n  /**\n   * The scene which the component's entity belongs to.\n   */\n  get scene(): Scene {\n    return this._entity.scene;\n  }\n\n  constructor(entity: Entity) {\n    super(entity.engine);\n    this._entity = entity;\n  }\n\n  /**\n   * Destroy this instance.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._entity._removeComponent(this);\n    if (this._entity.isActiveInHierarchy) {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n    this._destroyed = true;\n    this._onDestroy();\n  }\n\n  /**\n   * @internal\n   */\n  _onAwake(): void {}\n\n  /**\n   * @internal\n   */\n  _onEnable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDisable(): void {}\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {}\n\n  /**\n   * @internal\n   */\n  _onActive(): void {}\n\n  /**\n   * @internal\n   */\n  _onInActive(): void {}\n\n  /**\n   * @internal\n   */\n  _setActive(value: boolean): void {\n    if (value) {\n      if (!this._awoken) {\n        this._awoken = true;\n        this._onAwake();\n      }\n      // You can do isActive = false in onAwake function.\n      if (this._entity._isActiveInHierarchy) {\n        this._onActive();\n        this._enabled && this._onEnable();\n      }\n    } else {\n      this._enabled && this._onDisable();\n      this._onInActive();\n    }\n  }\n}\n","import { removeFromArray } from \"./base/Util\";\n\n/**\n * Used to update tags.\n */\nexport class UpdateFlag {\n  /** Flag. */\n  flag = true;\n\n  constructor(private _flags: UpdateFlag[] = []) {\n    this._flags.push(this);\n  }\n\n  /**\n   * Destroy.\n   */\n  destroy(): void {\n    const flags = this._flags;\n    removeFromArray(flags, this);\n    this._flags = null;\n  }\n}\n","import { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * @internal\n */\nexport class UpdateFlagManager {\n  private _updateFlags: UpdateFlag[] = [];\n\n  register(): UpdateFlag {\n    return new UpdateFlag(this._updateFlags);\n  }\n\n  distribute(): void {\n    const updateFlags = this._updateFlags;\n    for (let i = updateFlags.length - 1; i >= 0; i--) {\n      updateFlags[i].flag = true;\n    }\n  }\n}\n","import { MathUtil, Matrix, Matrix3x3, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { UpdateFlag } from \"./UpdateFlag\";\nimport { UpdateFlagManager } from \"./UpdateFlagManager\";\n\n/**\n * Used to implement transformation related functions.\n */\nexport class Transform extends Component {\n  private static _tempQuat0: Quaternion = new Quaternion();\n  private static _tempVec3: Vector3 = new Vector3();\n  private static _tempMat30: Matrix3x3 = new Matrix3x3();\n  private static _tempMat31: Matrix3x3 = new Matrix3x3();\n  private static _tempMat32: Matrix3x3 = new Matrix3x3();\n  private static _tempMat40: Matrix = new Matrix();\n  private static _tempMat41: Matrix = new Matrix();\n  private static _tempMat42: Matrix = new Matrix();\n  private static _tempMat43: Matrix = new Matrix();\n\n  @deepClone\n  private _position: Vector3 = new Vector3();\n  @deepClone\n  private _rotation: Vector3 = new Vector3();\n  @deepClone\n  private _rotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _scale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _worldPosition: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotation: Vector3 = new Vector3();\n  @deepClone\n  private _worldRotationQuaternion: Quaternion = new Quaternion();\n  @deepClone\n  private _lossyWorldScale: Vector3 = new Vector3(1, 1, 1);\n  @deepClone\n  private _localMatrix: Matrix = new Matrix();\n  @deepClone\n  private _worldMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  @ignoreClone\n  private _isParentDirty: boolean = true;\n  @ignoreClone\n  private _parentTransformCache: Transform = null;\n\n  private _dirtyFlag: number = TransformFlag.WmWpWeWqWs;\n\n  /**\n   * Local position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    if (this._position !== value) {\n      value.cloneTo(this._position);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldPositionFlag();\n  }\n\n  /**\n   * World position.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldPosition(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldPosition)) {\n      if (this._getParentTransform()) {\n        this.worldMatrix.getTranslation(this._worldPosition);\n      } else {\n        this._position.cloneTo(this._worldPosition);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldPosition);\n    }\n    return this._worldPosition;\n  }\n\n  set worldPosition(value: Vector3) {\n    if (this._worldPosition !== value) {\n      value.cloneTo(this._worldPosition);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat41);\n      Vector3.transformCoordinate(value, Transform._tempMat41, this._position);\n    } else {\n      value.cloneTo(this._position);\n    }\n    this.position = this._position;\n    this._setDirtyFlagFalse(TransformFlag.WorldPosition);\n  }\n\n  /**\n   * Local rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotation(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.LocalEuler)) {\n      this._rotationQuaternion.toEuler(this._rotation);\n      this._rotation.scale(MathUtil.radToDegreeFactor); // radians to degrees\n\n      this._setDirtyFlagFalse(TransformFlag.LocalEuler);\n    }\n    return this._rotation;\n  }\n\n  set rotation(value: Vector3) {\n    if (this._rotation !== value) {\n      value.cloneTo(this._rotation);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalQuat);\n    this._setDirtyFlagFalse(TransformFlag.LocalEuler);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotation, defining the rotation value in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotation(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldEuler)) {\n      this.worldRotationQuaternion.toEuler(this._worldRotation);\n      this._worldRotation.scale(MathUtil.radToDegreeFactor); // Radian to angle\n      this._setDirtyFlagFalse(TransformFlag.WorldEuler);\n    }\n    return this._worldRotation;\n  }\n\n  set worldRotation(value: Vector3) {\n    if (this._worldRotation !== value) {\n      value.cloneTo(this._worldRotation);\n    }\n    Quaternion.rotationEuler(\n      MathUtil.degreeToRadian(value.x),\n      MathUtil.degreeToRadian(value.y),\n      MathUtil.degreeToRadian(value.z),\n      this._worldRotationQuaternion\n    );\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n    this._setDirtyFlagFalse(TransformFlag.WorldEuler);\n  }\n\n  /**\n   * Local rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get rotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.LocalQuat)) {\n      Quaternion.rotationEuler(\n        MathUtil.degreeToRadian(this._rotation.x),\n        MathUtil.degreeToRadian(this._rotation.y),\n        MathUtil.degreeToRadian(this._rotation.z),\n        this._rotationQuaternion\n      );\n      this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    }\n    return this._rotationQuaternion;\n  }\n\n  set rotationQuaternion(value: Quaternion) {\n    if (this._rotationQuaternion !== value) {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix | TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalQuat);\n    this._updateWorldRotationFlag();\n  }\n\n  /**\n   * World rotation, defining the rotation by using a unit quaternion.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldRotationQuaternion(): Quaternion {\n    if (this._isContainDirtyFlag(TransformFlag.WorldQuat)) {\n      const parent = this._getParentTransform();\n      if (parent != null) {\n        Quaternion.multiply(parent.worldRotationQuaternion, this.rotationQuaternion, this._worldRotationQuaternion);\n      } else {\n        this.rotationQuaternion.cloneTo(this._worldRotationQuaternion);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n    }\n    return this._worldRotationQuaternion;\n  }\n\n  set worldRotationQuaternion(value: Quaternion) {\n    if (this._worldRotationQuaternion !== value) {\n      value.cloneTo(this._worldRotationQuaternion);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Quaternion.invert(parent.worldRotationQuaternion, Transform._tempQuat0);\n      Quaternion.multiply(value, Transform._tempQuat0, this._rotationQuaternion);\n    } else {\n      value.cloneTo(this._rotationQuaternion);\n    }\n    this.rotationQuaternion = this._rotationQuaternion;\n    this._setDirtyFlagFalse(TransformFlag.WorldQuat);\n  }\n\n  /**\n   * Local scaling.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get scale(): Vector3 {\n    return this._scale;\n  }\n\n  set scale(value: Vector3) {\n    if (this._scale !== value) {\n      value.cloneTo(this._scale);\n    }\n    this._setDirtyFlagTrue(TransformFlag.LocalMatrix);\n    this._updateWorldScaleFlag();\n  }\n\n  /**\n   * Local lossy scaling.\n   * @remarks The value obtained may not be correct under certain conditions(for example, the parent node has scaling,\n   * and the child node has a rotation), the scaling will be tilted. Vector3 cannot be used to correctly represent the scaling. Must use Matrix3x3.\n   */\n  get lossyWorldScale(): Vector3 {\n    if (this._isContainDirtyFlag(TransformFlag.WorldScale)) {\n      if (this._getParentTransform()) {\n        const scaleMat = this._getScaleMatrix();\n        const e = scaleMat.elements;\n        this._lossyWorldScale.setValue(e[0], e[4], e[8]);\n      } else {\n        this._scale.cloneTo(this._lossyWorldScale);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldScale);\n    }\n    return this._lossyWorldScale;\n  }\n\n  /**\n   * Local matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get localMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.LocalMatrix)) {\n      Matrix.affineTransformation(this._scale, this.rotationQuaternion, this._position, this._localMatrix);\n      this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    }\n    return this._localMatrix;\n  }\n\n  set localMatrix(value: Matrix) {\n    if (this._localMatrix !== value) {\n      value.cloneTo(this._localMatrix);\n    }\n    this._localMatrix.decompose(this._position, this._rotationQuaternion, this._scale);\n    this._setDirtyFlagTrue(TransformFlag.LocalEuler);\n    this._setDirtyFlagFalse(TransformFlag.LocalMatrix);\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * World matrix.\n   * @remarks Need to re-assign after modification to ensure that the modification takes effect.\n   */\n  get worldMatrix(): Matrix {\n    if (this._isContainDirtyFlag(TransformFlag.WorldMatrix)) {\n      const parent = this._getParentTransform();\n      if (parent) {\n        Matrix.multiply(parent.worldMatrix, this.localMatrix, this._worldMatrix);\n      } else {\n        this.localMatrix.cloneTo(this._worldMatrix);\n      }\n      this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n    }\n    return this._worldMatrix;\n  }\n\n  set worldMatrix(value: Matrix) {\n    if (this._worldMatrix !== value) {\n      value.cloneTo(this._worldMatrix);\n    }\n    const parent = this._getParentTransform();\n    if (parent) {\n      Matrix.invert(parent.worldMatrix, Transform._tempMat42);\n      Matrix.multiply(value, Transform._tempMat42, this._localMatrix);\n    } else {\n      value.cloneTo(this._localMatrix);\n    }\n    this.localMatrix = this._localMatrix;\n    this._setDirtyFlagFalse(TransformFlag.WorldMatrix);\n  }\n\n  /**\n   * Set local position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setPosition(x: number, y: number, z: number): void {\n    this._position.setValue(x, y, z);\n    this.position = this._position;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z components of the euler angle, unit in degrees.\n   * Rotations are performed around the Y axis, the X axis, and the Z axis, in that order.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setRotation(x: number, y: number, z: number): void {\n    this._rotation.setValue(x, y, z);\n    this.rotation = this._rotation;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._rotationQuaternion.setValue(x, y, z, w);\n    this.rotationQuaternion = this._rotationQuaternion;\n  }\n\n  /**\n   * Set local scaling by scaling values along X, Y, Z axis.\n   * @param x - Scaling along X axis\n   * @param y - Scaling along Y axis\n   * @param z - Scaling along Z axis\n   */\n  setScale(x: number, y: number, z: number): void {\n    this._scale.setValue(x, y, z);\n    this.scale = this._scale;\n  }\n\n  /**\n   * Set world position by X, Y, Z value.\n   * @param x - X coordinate\n   * @param y - Y coordinate\n   * @param z - Z coordinate\n   */\n  setWorldPosition(x: number, y: number, z: number): void {\n    this._worldPosition.setValue(x, y, z);\n    this.worldPosition = this._worldPosition;\n  }\n\n  /**\n   * Set world rotation by the X, Y, Z components of the euler angle, unit in degrees, Yaw/Pitch/Roll sequence.\n   * @param x - The angle of rotation around the X axis\n   * @param y - The angle of rotation around the Y axis\n   * @param z - The angle of rotation around the Z axis\n   */\n  setWorldRotation(x: number, y: number, z: number): void {\n    this._worldRotation.setValue(x, y, z);\n    this.worldRotation = this._worldRotation;\n  }\n\n  /**\n   * Set local rotation by the X, Y, Z, and W components of the quaternion.\n   * @param x - X component of quaternion\n   * @param y - Y component of quaternion\n   * @param z - Z component of quaternion\n   * @param w - W component of quaternion\n   */\n  setWorldRotationQuaternion(x: number, y: number, z: number, w: number): void {\n    this._worldRotationQuaternion.setValue(x, y, z, w);\n    this.worldRotationQuaternion = this._worldRotationQuaternion;\n  }\n\n  /**\n   * Get the forward direction in world space.\n   * @param forward - Forward vector\n   * @returns Forward vector\n   */\n  getWorldForward(forward: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    forward.setValue(-e[8], -e[9], -e[10]);\n    return forward.normalize();\n  }\n\n  /**\n   * Get the right direction in world space.\n   * @param right - Right vector\n   * @returns Right vector\n   */\n  getWorldRight(right: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    right.setValue(e[0], e[1], e[2]);\n    return right.normalize();\n  }\n\n  /**\n   * Get the up direction in world space.\n   * @param up - Up vector\n   * @returns Up vector\n   */\n  getWorldUp(up: Vector3): Vector3 {\n    const e = this.worldMatrix.elements;\n    up.setValue(e[4], e[5], e[6]);\n    return up.normalize();\n  }\n\n  /**\n   * Translate along the passed Vector3.\n   * @param translation - Direction and distance of translation\n   * @param relativeToLocal - Relative to local space\n   */\n  translate(translation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Translate along the passed X, Y, Z value.\n   * @param x - Translate direction and distance along x axis\n   * @param y - Translate direction and distance along y axis\n   * @param z - Translate direction and distance along z axis\n   * @param relativeToLocal - Relative to local space\n   */\n  translate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  translate(\n    translationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof translationOrX === \"number\") {\n      const translate = Transform._tempVec3;\n      translate.setValue(translationOrX, <number>relativeToLocalOrY, z);\n      this._translate(translate, relativeToLocal);\n    } else {\n      this._translate(translationOrX, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param rotation - Euler angle in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotate(rotation: Vector3, relativeToLocal?: boolean): void;\n\n  /**\n   * Rotate around the passed Vector3.\n   * @param x - Rotation along x axis, in degrees\n   * @param y - Rotation along y axis, in degrees\n   * @param z - Rotation along z axis, in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotate(x: number, y: number, z: number, relativeToLocal?: boolean): void;\n\n  rotate(\n    rotationOrX: Vector3 | number,\n    relativeToLocalOrY?: boolean | number,\n    z?: number,\n    relativeToLocal?: boolean\n  ): void {\n    if (typeof rotationOrX === \"number\") {\n      this._rotateXYZ(rotationOrX, <number>relativeToLocalOrY, z, relativeToLocal);\n    } else {\n      this._rotateXYZ(rotationOrX.x, rotationOrX.y, rotationOrX.z, <boolean>relativeToLocalOrY);\n    }\n  }\n\n  /**\n   * Rotate around the specified axis according to the specified angle.\n   * @param axis - Rotate axis\n   * @param angle - Rotate angle in degrees\n   * @param relativeToLocal - Relative to local space\n   */\n  rotateByAxis(axis: Vector3, angle: number, relativeToLocal: boolean = true): void {\n    const rad = angle * MathUtil.degreeToRadFactor;\n    Quaternion.rotationAxisAngle(axis, rad, Transform._tempQuat0);\n    this._rotateByQuat(Transform._tempQuat0, relativeToLocal);\n  }\n\n  /**\n   * Rotate and ensure that the world front vector points to the target world position.\n   * @param worldPosition - Target world position\n   * @param worldUp - Up direction in world space, default is Vector3(0, 1, 0)\n   */\n  lookAt(worldPosition: Vector3, worldUp?: Vector3): void {\n    const position = this.worldPosition;\n    const EPSILON = MathUtil.zeroTolerance;\n    if (\n      Math.abs(position.x - worldPosition.x) < EPSILON &&\n      Math.abs(position.y - worldPosition.y) < EPSILON &&\n      Math.abs(position.z - worldPosition.z) < EPSILON\n    ) {\n      return;\n    }\n    const rotMat = Transform._tempMat43;\n    const worldRotationQuaternion = this._worldRotationQuaternion;\n\n    worldUp = worldUp ?? Transform._tempVec3.setValue(0, 1, 0);\n    Matrix.lookAt(position, worldPosition, worldUp, rotMat);\n    rotMat.getRotation(worldRotationQuaternion).invert();\n    this.worldRotationQuaternion = worldRotationQuaternion;\n  }\n\n  /**\n   * Register world transform change flag.\n   * @returns Change flag\n   */\n  registerWorldChangeFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  /**\n   * @internal\n   */\n  _parentChange(): void {\n    this._isParentDirty = true;\n    this._updateAllWorldFlag();\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWp)) {\n      this._worldAssociatedChange(TransformFlag.WmWp);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag(); // Rotation update of parent entity will trigger world position and rotation update of all child entity.\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldRotationQuaternion: Will trigger the world rotation (in quaternion) update of itself and all parent entities.\n   * Get worldRotation: Will trigger the world rotation(in euler and quaternion) update of itself and world rotation(in quaternion) update of all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix or worldRotationQuaternion) to be false.\n   */\n  private _updateWorldPositionAndRotationFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWq)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWq);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndRotationFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldScaleFlag() {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Get worldMatrix: Will trigger the worldMatrix update of itself and all parent entities.\n   * Get worldPosition: Will trigger the worldMatrix, local position update of itself and the worldMatrix update of all parent entities.\n   * Get worldScale: Will trigger the scaling update of itself and all parent entities.\n   * In summary, any update of related variables will cause the dirty mark of one of the full process (worldMatrix) to be false.\n   */\n  private _updateWorldPositionAndScaleFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateWorldPositionAndScaleFlag();\n      }\n    }\n  }\n\n  /**\n   * Update all world transform property dirty flag, the principle is the same as above.\n   */\n  private _updateAllWorldFlag(): void {\n    if (!this._isContainDirtyFlags(TransformFlag.WmWpWeWqWs)) {\n      this._worldAssociatedChange(TransformFlag.WmWpWeWqWs);\n      const nodeChildren = this._entity._children;\n      for (let i: number = 0, n: number = nodeChildren.length; i < n; i++) {\n        nodeChildren[i].transform?._updateAllWorldFlag();\n      }\n    }\n  }\n\n  private _getParentTransform(): Transform | null {\n    if (!this._isParentDirty) {\n      return this._parentTransformCache;\n    }\n    let parentCache: Transform = null;\n    let parent = this._entity.parent;\n    while (parent) {\n      const transform = parent.transform;\n      if (transform) {\n        parentCache = transform;\n        break;\n      } else {\n        parent = parent.parent;\n      }\n    }\n    this._parentTransformCache = parentCache;\n    this._isParentDirty = false;\n    return parentCache;\n  }\n\n  private _getScaleMatrix(): Matrix3x3 {\n    const invRotation = Transform._tempQuat0;\n    const invRotationMat = Transform._tempMat30;\n    const worldRotScaMat = Transform._tempMat31;\n    const scaMat = Transform._tempMat32;\n    worldRotScaMat.setValueByMatrix(this.worldMatrix);\n    Quaternion.invert(this.worldRotationQuaternion, invRotation);\n    Matrix3x3.rotationQuaternion(invRotation, invRotationMat);\n    Matrix3x3.multiply(invRotationMat, worldRotScaMat, scaMat);\n    return scaMat;\n  }\n\n  private _isContainDirtyFlags(targetDirtyFlags: number): boolean {\n    return (this._dirtyFlag & targetDirtyFlags) === targetDirtyFlags;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number) {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number) {\n    this._dirtyFlag &= ~type;\n  }\n\n  private _worldAssociatedChange(type: number): void {\n    this._dirtyFlag |= type;\n    this._updateFlagManager.distribute();\n  }\n\n  private _rotateByQuat(rotateQuat: Quaternion, relativeToLocal: boolean) {\n    if (relativeToLocal) {\n      Quaternion.multiply(this.rotationQuaternion, rotateQuat, this._rotationQuaternion);\n      this.rotationQuaternion = this._rotationQuaternion;\n    } else {\n      Quaternion.multiply(this.worldRotationQuaternion, rotateQuat, this._worldRotationQuaternion);\n      this.worldRotationQuaternion = this._worldRotationQuaternion;\n    }\n  }\n\n  private _translate(translation: Vector3, relativeToLocal: boolean = true): void {\n    if (relativeToLocal) {\n      this.position = this._position.add(translation);\n    } else {\n      this.worldPosition = this._worldPosition.add(translation);\n    }\n  }\n\n  private _rotateXYZ(x: number, y: number, z: number, relativeToLocal: boolean = true): void {\n    const radFactor = MathUtil.degreeToRadFactor;\n    const rotQuat = Transform._tempQuat0;\n    Quaternion.rotationEuler(x * radFactor, y * radFactor, z * radFactor, rotQuat);\n    this._rotateByQuat(rotQuat, relativeToLocal);\n  }\n}\n\n/**\n * Dirty flag of transform.\n */\nenum TransformFlag {\n  LocalEuler = 0x1,\n  LocalQuat = 0x2,\n  WorldPosition = 0x4,\n  WorldEuler = 0x8,\n  WorldQuat = 0x10,\n  WorldScale = 0x20,\n  LocalMatrix = 0x40,\n  WorldMatrix = 0x80,\n\n  /** WorldMatrix | WorldPosition */\n  WmWp = 0x84,\n  /** WorldMatrix | WorldEuler | WorldQuat */\n  WmWeWq = 0x98,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat */\n  WmWpWeWq = 0x9c,\n  /** WorldMatrix | WorldScale */\n  WmWs = 0xa0,\n  /** WorldMatrix | WorldPosition | WorldScale */\n  WmWpWs = 0xa4,\n  /** WorldMatrix | WorldPosition | WorldEuler | WorldQuat | WorldScale */\n  WmWpWeWqWs = 0xbc\n}\n","import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { EngineObject } from \"./base\";\nimport { ComponentCloner } from \"./clone/ComponentCloner\";\nimport { Component } from \"./Component\";\nimport { Script } from \"./Script\";\nimport { ComponentsDependencies } from \"./ComponentsDependencies\";\nimport { Engine } from \"./Engine\";\nimport { Layer } from \"./Layer\";\nimport { Scene } from \"./Scene\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\nimport { DisorderedArray } from \"./DisorderedArray\";\n\n/**\n * Entity, be used as components container.\n */\nexport class Entity extends EngineObject {\n  /**\n   * @internal\n   */\n  static _findChildByName(root: Entity, name: string): Entity {\n    const children = root._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @internal\n   */\n  static _traverseSetOwnerScene(entity: Entity, scene: Scene): void {\n    entity._scene = scene;\n    const children = entity._children;\n    for (let i = entity.childCount - 1; i >= 0; i--) {\n      this._traverseSetOwnerScene(children[i], scene);\n    }\n  }\n\n  /** The name of entity. */\n  name: string;\n  /** The layer the entity belongs to. */\n  layer: Layer = Layer.Layer0;\n  /** Transform component. */\n  readonly transform: Transform;\n\n  /** @internal */\n  _isActiveInHierarchy: boolean = false;\n  /** @internal */\n  _components: Component[] = [];\n  /** @internal */\n  _scripts: DisorderedArray<Script> = new DisorderedArray<Script>();\n  /** @internal */\n  _children: Entity[] = [];\n  /** @internal */\n  _scene: Scene;\n  /** @internal */\n  _isRoot: boolean = false;\n  /** @internal */\n  _isActive: boolean = true;\n\n  private _parent: Entity = null;\n  private _activeChangedComponents: Component[];\n\n  /**\n   * Whether to activate locally.\n   */\n  get isActive(): boolean {\n    return this._isActive;\n  }\n\n  set isActive(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      if (value) {\n        const parent = this._parent;\n        if (parent?._isActiveInHierarchy || (this._isRoot && this._scene._isActiveInEngine)) {\n          this._processActive();\n        }\n      } else {\n        if (this._isActiveInHierarchy) {\n          this._processInActive();\n        }\n      }\n    }\n  }\n\n  /**\n   * Whether it is active in the hierarchy.\n   */\n  get isActiveInHierarchy(): boolean {\n    return this._isActiveInHierarchy;\n  }\n\n  /**\n   * The parent entity.\n   */\n  get parent(): Entity {\n    return this._parent;\n  }\n\n  set parent(entity: Entity) {\n    if (entity !== this._parent) {\n      const oldParent = this._removeFromParent();\n      const newParent = (this._parent = entity);\n      if (newParent) {\n        newParent._children.push(this);\n        const parentScene = newParent._scene;\n        if (this._scene !== parentScene) {\n          Entity._traverseSetOwnerScene(this, parentScene);\n        }\n\n        if (newParent._isActiveInHierarchy) {\n          !this._isActiveInHierarchy && this._isActive && this._processActive();\n        } else {\n          this._isActiveInHierarchy && this._processInActive();\n        }\n      } else {\n        this._isActiveInHierarchy && this._processInActive();\n        if (oldParent) {\n          Entity._traverseSetOwnerScene(this, null);\n        }\n      }\n      this._setTransformDirty();\n    }\n  }\n\n  /**\n   * The children entities\n   */\n  get children(): Readonly<Entity[]> {\n    return this._children;\n  }\n\n  /**\n   * Number of the children entities\n   */\n  get childCount(): number {\n    return this._children.length;\n  }\n\n  /**\n   * The scene the entity belongs to.\n   */\n  get scene(): Scene {\n    return this._scene;\n  }\n\n  /**\n   * Create a entity.\n   * @param engine - The engine the entity belongs to.\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this.transform = this.addComponent(Transform);\n    this._inverseWorldMatFlag = this.transform.registerWorldChangeFlag();\n  }\n\n  /**\n   * Add component based on the component type.\n   * @param type - The type of the component.\n   * @returns\tThe component which has been added.\n   */\n  addComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    ComponentsDependencies._addCheck(this, type);\n    const component = new type(this);\n    this._components.push(component);\n    if (this._isActiveInHierarchy) {\n      component._setActive(true);\n    }\n    return component;\n  }\n\n  /**\n   * Get component which match the type.\n   * @param type - The type of the component.\n   * @returns\tThe first component which match type.\n   */\n  getComponent<T extends Component>(type: new (entity: Entity) => T): T {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * Get components which match the type.\n   * @param type - The type of the component.\n   * @param results - The components which match type.\n   * @returns\tThe components which match type.\n   */\n  getComponents<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    return results;\n  }\n\n  /**\n   * Get the components which match the type of the entity and it's children.\n   * @param type - The component type.\n   * @param results - The components collection.\n   * @returns\tThe components collection which match the type.\n   */\n  getComponentsIncludeChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): T[] {\n    results.length = 0;\n    this._getComponentsInChildren<T>(type, results);\n    return results;\n  }\n\n  /**\n   * Add child entity.\n   * @param child - The child entity which want to be added.\n   */\n  addChild(child: Entity): void {\n    child.parent = this;\n  }\n\n  /**\n   * Remove child entity.\n   * @param child - The child entity which want to be removed.\n   */\n  removeChild(child: Entity): void {\n    child.parent = null;\n  }\n\n  /**\n   * Find child entity by index.\n   * @param index - The index of the child entity.\n   * @returns\tThe component which be found.\n   */\n  getChild(index: number): Entity {\n    return this._children[index];\n  }\n\n  /**\n   * Find child entity by name.\n   * @param name - The name of the entity which want to be found.\n   * @returns The component which be found.\n   */\n  findByName(name: string): Entity {\n    const children = this._children;\n    const child = Entity._findChildByName(this, name);\n    if (child) return child;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const grandson = child.findByName(name);\n      if (grandson) {\n        return grandson;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find the entity by path.\n   * @param path - The path fo the entity eg: /entity.\n   * @returns The component which be found.\n   */\n  findByPath(path: string): Entity {\n    const splits = path.split(\"/\");\n    let entity: Entity = this;\n    for (let i = 0, length = splits.length; i < length; ++i) {\n      const split = splits[i];\n      if (split) {\n        entity = Entity._findChildByName(entity, split);\n        if (!entity) {\n          return null;\n        }\n      }\n    }\n    return entity;\n  }\n\n  /**\n   * Create child entity.\n   * @param name - The child entity's name.\n   * @returns The child entity.\n   */\n  createChild(name?: string): Entity {\n    const child = new Entity(this.engine, name);\n    child.layer = this.layer;\n    child.parent = this;\n    return child;\n  }\n\n  /**\n   * Clear children entities.\n   */\n  clearChildren(): void {\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      child._parent = null;\n      child._isActiveInHierarchy && child._processInActive();\n      Entity._traverseSetOwnerScene(child, null); // Must after child._processInActive().\n    }\n    children.length = 0;\n  }\n\n  /**\n   * Clone\n   * @returns Cloned entity.\n   */\n  clone(): Entity {\n    const cloneEntity = new Entity(this._engine, this.name);\n\n    cloneEntity._isActive = this._isActive;\n    cloneEntity.transform.localMatrix = this.transform.localMatrix;\n\n    const children = this._children;\n    for (let i = 0, len = this._children.length; i < len; i++) {\n      const child = children[i];\n      cloneEntity.addChild(child.clone());\n    }\n\n    const components = this._components;\n    for (let i = 0, n = components.length; i < n; i++) {\n      const sourceComp = components[i];\n      if (!(sourceComp instanceof Transform)) {\n        const targetComp = cloneEntity.addComponent(<new (entity: Entity) => Component>sourceComp.constructor);\n        ComponentCloner.cloneComponent(sourceComp, targetComp);\n      }\n    }\n\n    return cloneEntity;\n  }\n\n  /**\n   * Destroy self.\n   */\n  destroy(): void {\n    const abilityArray = this._components;\n    for (let i = abilityArray.length - 1; i >= 0; i--) {\n      abilityArray[i].destroy();\n    }\n    this._components.length = 0;\n\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      children[i].destroy();\n    }\n    this._children.length = 0;\n\n    if (this._parent != null) {\n      const parentChildren = this._parent._children;\n      parentChildren.splice(parentChildren.indexOf(this), 1);\n    }\n    this._parent = null;\n  }\n\n  /**\n   * @internal\n   */\n  _removeComponent(component: Component): void {\n    ComponentsDependencies._removeCheck(this, component.constructor as any);\n    const components = this._components;\n    components.splice(components.indexOf(component), 1);\n  }\n\n  /**\n   * @internal\n   */\n  _addScript(script: Script) {\n    script._entityCacheIndex = this._scripts.length;\n    this._scripts.add(script);\n  }\n\n  /**\n   * @internal\n   */\n  _removeScript(script: Script): void {\n    const replaced = this._scripts.deleteByIndex(script._entityCacheIndex);\n    replaced && (replaced._entityCacheIndex = script._entityCacheIndex);\n    script._entityCacheIndex = -1;\n  }\n\n  /**\n   * @internal\n   */\n  _removeFromParent(): Entity {\n    const oldParent = this._parent;\n    if (oldParent != null) {\n      const oldParentChildren = oldParent._children;\n      oldParentChildren.splice(oldParentChildren.indexOf(this), 1);\n      this._parent = null;\n    }\n    return oldParent;\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main inActive entity' active in hierarchy, if the operation is in main inActive entity or it's children script's onDisable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(true);\n  }\n\n  /**\n   * @internal\n   */\n  _processInActive(): void {\n    if (this._activeChangedComponents) {\n      throw \"Note: can't set the 'main active entity' inActive in hierarchy, if the operation is in main active entity or it's children script's onEnable Event.\";\n    }\n    this._activeChangedComponents = this._engine._componentsManager.getActiveChangedTempList();\n    this._setInActiveInHierarchy(this._activeChangedComponents);\n    this._setActiveComponents(false);\n  }\n\n  private _getComponentsInChildren<T extends Component>(type: new (entity: Entity) => T, results: T[]): void {\n    for (let i = this._components.length - 1; i >= 0; i--) {\n      const component = this._components[i];\n      if (component instanceof type) {\n        results.push(component);\n      }\n    }\n    for (let i = this._children.length - 1; i >= 0; i--) {\n      this._children[i]._getComponentsInChildren<T>(type, results);\n    }\n  }\n\n  private _setActiveComponents(isActive: boolean): void {\n    const activeChangedComponents = this._activeChangedComponents;\n    for (let i = 0, length = activeChangedComponents.length; i < length; ++i) {\n      activeChangedComponents[i]._setActive(isActive);\n    }\n    this._engine._componentsManager.putActiveChangedTempList(activeChangedComponents);\n    this._activeChangedComponents = null;\n  }\n\n  private _setActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = true;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setInActiveInHierarchy(activeChangedComponents: Component[]): void {\n    this._isActiveInHierarchy = false;\n    const components = this._components;\n    for (let i = components.length - 1; i >= 0; i--) {\n      activeChangedComponents.push(components[i]);\n    }\n    const children = this._children;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child: Entity = children[i];\n      child.isActive && child._setInActiveInHierarchy(activeChangedComponents);\n    }\n  }\n\n  private _setTransformDirty() {\n    if (this.transform) {\n      this.transform._parentChange();\n    } else {\n      for (let i = 0, len = this._children.length; i < len; i++) {\n        this._children[i]._setTransformDirty();\n      }\n    }\n  }\n\n  //--------------------------------------------------------------deprecated----------------------------------------------------------------\n  private _invModelMatrix: Matrix = new Matrix();\n  private _inverseWorldMatFlag: UpdateFlag;\n\n  /**\n   * @deprecated\n   * Use transform.position instead.\n   */\n  get position(): Vector3 {\n    return this.transform.position;\n  }\n\n  set position(val: Vector3) {\n    this.transform.position = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.worldPosition instead.\n   */\n  get worldPosition(): Vector3 {\n    return this.transform.worldPosition;\n  }\n\n  set worldPosition(val: Vector3) {\n    this.transform.worldPosition = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.rotationQuaternion instead.\n   */\n  get rotation(): Quaternion {\n    return this.transform.rotationQuaternion;\n  }\n\n  set rotation(val: Quaternion) {\n    this.transform.rotationQuaternion = val;\n  }\n\n  /**\n   * @deprecated\n   * Use transform.scale instead.\n   */\n  get scale(): Vector3 {\n    return this.transform.scale;\n  }\n\n  set scale(val: Vector3) {\n    this.transform.scale = val;\n  }\n\n  /**\n   * @deprecated\n   */\n  getInvModelMatrix(): Matrix {\n    if (this._inverseWorldMatFlag.flag) {\n      Matrix.invert(this.transform.worldMatrix, this._invModelMatrix);\n      this._inverseWorldMatFlag.flag = false;\n    }\n    return this._invModelMatrix;\n  }\n}\n","import { SceneFeature } from \"./SceneFeature\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Scene } from \"./Scene\";\nimport { Engine } from \"./Engine\";\n\n/**\n * Manage a set of feature objects.\n */\nexport class FeatureManager<T extends EngineFeature | SceneFeature> {\n  private _features: Array<new (engine: Engine) => T> = [];\n\n  private _objects = [];\n\n  /**\n   * Register a feature.\n   * @param {SceneFeature|EngineFeature} IFeature\n   */\n  public registerFeature(IFeature: new () => T): void {\n    const featureArray = this._features;\n\n    // Search by type, avoid adding\n    for (let i = 0, len = featureArray.length; i < len; i++) {\n      if (featureArray[i] === IFeature) {\n        return;\n      }\n    }\n\n    // Add to global array\n    featureArray.push(IFeature);\n\n    // Add to existing scene\n    const objectArray = this._objects;\n    for (let i = 0, len = objectArray.length; i < len; i++) {\n      objectArray[i].features.push(new IFeature());\n    }\n  }\n\n  /**\n   * Add an feature with functional characteristics.\n   * @param {Scene|Engine} obj - Scene or engine\n   */\n  public addObject(obj: Scene | Engine): void {\n    obj.features = [];\n    for (let i = 0, len = this._features.length; i < len; i++) {\n      obj.features.push(new this._features[i]((<any>obj).engine ?? <any>obj) as any);\n    }\n    this._objects.push(obj);\n  }\n\n  /**\n   * Call the specified method of the feature.\n   * @param obj - Scene or engine\n   * @param method - Method name\n   * @param args - Function args\n   */\n  public callFeatureMethod(obj: Scene | Engine, method: string, args: any[]): void {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature[method]) {\n        feature[method].apply(feature, args);\n      }\n    }\n  }\n\n  /**\n   * Find feature.\n   * @param obj - Scene or engine\n   * @param IFeature - plug-in\n   */\n\n  public findFeature(obj: Scene | Engine, IFeature: new () => T): T {\n    const features = obj.features;\n    const count = features.length;\n\n    for (let i = 0; i < count; i++) {\n      const feature = features[i];\n      if (feature.constructor === (IFeature as any)) {\n        return feature as any;\n      }\n    }\n    return undefined;\n  }\n}\n","/**\n * Render queue type.\n */\nexport enum RenderQueueType {\n  /** Opaque queue. */\n  Opaque = 1000,\n  /** Opaque queue, alpha cutoff. */\n  AlphaTest = 2000,\n  /** Transparent queue, rendering from back to front to ensure correct rendering of transparent objects. */\n  Transparent = 3000\n}\n","import { EngineObject } from \"../base/EngineObject\";\nimport { Engine } from \"../Engine\";\nimport { IRefObject } from \"./IRefObject\";\n\n/**\n * The base class of assets, with reference counting capability.\n */\nexport abstract class RefObject extends EngineObject implements IRefObject {\n  /** Whether to ignore the garbage collection check, if it is true, it will not be affected by ResourceManager.gc(). */\n  isGCIgnored: boolean = false;\n\n  private _refCount: number = 0;\n  private _destroyed: boolean = false;\n\n  /**\n   * Counted by valid references.\n   */\n  get refCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * Whether it has been destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  protected constructor(engine: Engine) {\n    super(engine);\n    engine.resourceManager._addRefObject(this.instanceId, this);\n  }\n\n  /**\n   * Destroy self.\n   * @param force - Whether to force the destruction, if it is false, refCount = 0 can be released successfully.\n   * @returns Whether the release was successful.\n   */\n  destroy(force: boolean = false): boolean {\n    if (this._destroyed) return true;\n    if (!force && this._refCount !== 0) return false;\n    const resourceManager = this._engine.resourceManager;\n    // resourceManager maybe null,because engine has destroyed.\n    // TODO:the right way to fix this is to ensure destroy all when call engine.destroy,thus don't need to add this project.\n    if (resourceManager) {\n      resourceManager._deleteAsset(this);\n      resourceManager._deleteRefObject(this.instanceId);\n    }\n\n    const refCount = this._getRefCount();\n    if (refCount > 0) {\n      this._addRefCount(-refCount);\n    }\n    this._engine = null;\n    this._onDestroy();\n    this._destroyed = true;\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   * Add reference resource.\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n  }\n\n  /**\n   * @internal\n   * Remove reference resource.\n   */\n  _addToResourceManager(path: string): void {\n    this._engine.resourceManager._addAsset(path, this);\n  }\n\n  /**\n   * Called when the resource is destroyed.\n   * Subclasses can override this function.\n   */\n  protected abstract _onDestroy(): void;\n}\n","/**\n * Shader data grouping.\n */\nexport enum ShaderDataGroup {\n  /** Scene group. */\n  Scene,\n  /** Camera group. */\n  Camera,\n  /** Renderer group. */\n  Renderer,\n  /** material group. */\n  Material\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { Logger } from \"../base/Logger\";\nimport { IPlatformTexture } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\n\n/**\n * The base class of texture, contains some common functions of texture-related classes.\n */\nexport abstract class Texture extends RefObject {\n  name: string;\n\n  /** @internal */\n  _platformTexture: IPlatformTexture;\n  /** @internal */\n  _mipmap: boolean;\n\n  protected _width: number;\n  protected _height: number;\n  protected _mipmapCount: number;\n\n  private _wrapModeU: TextureWrapMode;\n  private _wrapModeV: TextureWrapMode;\n  private _filterMode: TextureFilterMode;\n  private _anisoLevel: number = 1;\n\n  /**\n   * The width of the texture.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * The height of the texture.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate S.\n   */\n  get wrapModeU(): TextureWrapMode {\n    return this._wrapModeU;\n  }\n\n  set wrapModeU(value: TextureWrapMode) {\n    if (value === this._wrapModeU) return;\n    this._wrapModeU = value;\n\n    this._platformTexture.wrapModeU = value;\n  }\n\n  /**\n   * Wrapping mode for texture coordinate T.\n   */\n  get wrapModeV(): TextureWrapMode {\n    return this._wrapModeV;\n  }\n\n  set wrapModeV(value: TextureWrapMode) {\n    if (value === this._wrapModeV) return;\n    this._wrapModeV = value;\n\n    this._platformTexture.wrapModeV = value;\n  }\n\n  /**\n   * Texture mipmapping count.\n   */\n  get mipmapCount(): number {\n    return this._mipmapCount;\n  }\n\n  /**\n   * Filter mode for texture.\n   */\n  get filterMode(): TextureFilterMode {\n    return this._filterMode;\n  }\n\n  set filterMode(value: TextureFilterMode) {\n    if (value === this._filterMode) return;\n    this._filterMode = value;\n\n    this._platformTexture.filterMode = value;\n  }\n\n  /**\n   * Anisotropic level for texture.\n   */\n  get anisoLevel(): number {\n    return this._anisoLevel;\n  }\n\n  set anisoLevel(value: number) {\n    const max = this._engine._hardwareRenderer.capability.maxAnisoLevel;\n\n    if (value > max) {\n      Logger.warn(`anisoLevel:${value}, exceeds the limit and is automatically downgraded to:${max}`);\n      value = max;\n    }\n\n    if (value < 1) {\n      Logger.warn(`anisoLevel:${value}, must be greater than 0, and is automatically downgraded to 1`);\n      value = 1;\n    }\n\n    if (value === this._anisoLevel) return;\n\n    this._anisoLevel = value;\n\n    this._platformTexture.anisoLevel = value;\n  }\n\n  /**\n   * Generate multi-level textures based on the 0th level data.\n   */\n  generateMipmaps(): void {\n    if (!this._mipmap) return;\n\n    this._platformTexture.generateMipmaps();\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy() {\n    this._platformTexture.destroy();\n    this._platformTexture = null;\n  }\n\n  /**\n   * Get the maximum mip level of the corresponding size:rounding down.\n   * @remarks http://download.nvidia.com/developer/Papers/2005/NP2_Mipmapping/NP2_Mipmap_Creation.pdf\n   */\n  protected _getMaxMiplevel(size: number): number {\n    return Math.floor(Math.log2(size));\n  }\n\n  protected _getMipmapCount(): number {\n    return this._mipmap ? Math.floor(Math.log2(Math.max(this._width, this._height))) + 1 : 1;\n  }\n}\n","import pbr_common_frag_define from \"./common_frag_define.glsl\";\nimport pbr_util_frag_define from \"./util_frag_define.glsl\";\n\n/** IBL define */\nimport pbr_envmap_light_frag_define from \"./envmap_light_frag_define.glsl\";\n\n/** prop & texture */\nimport pbr_base_frag_define from \"./base_frag_define.glsl\";\nimport pbr_texture_frag_define from \"./texture_frag_define.glsl\";\n\n/** runtime context */\nimport pbr_runtime_frag_define from \"./runtime_frag_define.glsl\";\n\n// todo: BxDF\nimport pbr_brdf_cook_torrance_frag_define from \"./brdf_cook_torrance_frag_define.glsl\";\n\n/** direct + IBL */\nimport pbr_direct_irradiance_frag_define from \"./direct_irradiance_frag_define.glsl\";\nimport pbr_ibl_specular_frag_define from \"./ibl_specular_frag_define.glsl\";\nimport pbr_ibl_diffuse_frag_define from \"./ibl_diffuse_frag_define.glsl\";\n\nimport pbr_begin_frag from \"./begin_frag.glsl\";\nimport pbr_direct_irradiance_frag from \"./direct_irradiance_frag.glsl\";\nimport pbr_ibl_diffuse_frag from \"./ibl_diffuse_frag.glsl\";\nimport pbr_ibl_specular_frag from \"./ibl_specular_frag.glsl\";\nimport pbr_end_frag from \"./end_frag.glsl\";\n\nexport default {\n  pbr_common_frag_define,\n  pbr_util_frag_define,\n\n  pbr_envmap_light_frag_define,\n\n  pbr_base_frag_define,\n  pbr_texture_frag_define,\n\n  pbr_runtime_frag_define,\n\n  pbr_brdf_cook_torrance_frag_define,\n\n  pbr_direct_irradiance_frag_define,\n  pbr_ibl_specular_frag_define,\n  pbr_ibl_diffuse_frag_define,\n\n  pbr_begin_frag,\n  pbr_direct_irradiance_frag,\n  pbr_ibl_diffuse_frag,\n  pbr_ibl_specular_frag,\n  pbr_end_frag\n};\n","import common from \"./common.glsl\";\nimport common_vert from \"./common_vert.glsl\";\nimport common_frag from \"./common_frag.glsl\";\n\nimport color_share from \"./color_share.glsl\";\nimport normal_share from \"./normal_share.glsl\";\nimport uv_share from \"./uv_share.glsl\";\nimport worldpos_share from \"./worldpos_share.glsl\";\nimport shadow_share from \"./shadow_share.glsl\";\nimport fog_share from \"./fog_share.glsl\";\n\nimport begin_normal_vert from \"./begin_normal_vert.glsl\";\nimport begin_position_vert from \"./begin_position_vert.glsl\";\n\nimport position_vert from \"./position_vert.glsl\";\nimport color_vert from \"./color_vert.glsl\";\nimport normal_vert from \"./normal_vert.glsl\";\nimport skinning_vert from \"./skinning_vert.glsl\";\nimport blendShape_input from \"./blendShape_input.glsl\";\nimport blendShape_vert from \"./blendShape_vert.glsl\";\nimport uv_vert from \"./uv_vert.glsl\";\nimport worldpos_vert from \"./worldpos_vert.glsl\";\nimport shadow_vert from \"./shadow_vert.glsl\";\nimport fog_vert from \"./fog_vert.glsl\";\n\nimport direct_light_frag from \"./direct_light_frag.glsl\";\nimport point_light_frag from \"./point_light_frag.glsl\";\nimport spot_light_frag from \"./spot_light_frag.glsl\";\nimport mobile_material_frag from \"./mobile_material_frag.glsl\";\nimport fog_frag from \"./fog_frag.glsl\";\n\nimport begin_mobile_frag from \"./begin_mobile_frag.glsl\";\nimport begin_viewdir_frag from \"./begin_viewdir_frag.glsl\";\n\nimport mobile_blinnphong_frag from \"./mobile_blinnphong_frag.glsl\";\n\nimport noise_common from \"./noise_common.glsl\";\nimport noise_cellular_2D from \"./noise_cellular_2D.glsl\";\nimport noise_cellular_2x2 from \"./noise_cellular_2x2.glsl\";\nimport noise_cellular_2x2x2 from \"./noise_cellular_2x2x2.glsl\";\nimport noise_cellular_3D from \"./noise_cellular_3D.glsl\";\nimport noise_cellular from \"./noise_cellular.glsl\";\nimport noise_perlin_2D from \"./noise_perlin_2D.glsl\";\nimport noise_perlin_3D from \"./noise_perlin_3D.glsl\";\nimport noise_perlin_4D from \"./noise_perlin_4D.glsl\";\nimport noise_perlin from \"./noise_perlin.glsl\";\nimport noise_psrd_2D from \"./noise_psrd_2D.glsl\";\nimport noise_simplex_2D from \"./noise_simplex_2D.glsl\";\nimport noise_simplex_3D_grad from \"./noise_simplex_3D_grad.glsl\";\nimport noise_simplex_3D from \"./noise_simplex_3D.glsl\";\nimport noise_simplex_4D from \"./noise_simplex_4D.glsl\";\nimport noise_simplex from \"./noise_simplex.glsl\";\n\nimport gamma_frag from \"./gamma_frag.glsl\";\n\nimport PBRShaderLib from \"./pbr\";\n\nimport normal_get from \"./normal_get.glsl\";\n\nexport const ShaderLib = {\n  common,\n  common_vert,\n  common_frag,\n\n  color_share,\n  normal_share,\n  uv_share,\n  worldpos_share,\n  shadow_share,\n  fog_share,\n\n  begin_normal_vert,\n  begin_position_vert,\n\n  position_vert,\n  color_vert,\n  normal_vert,\n  skinning_vert,\n  blendShape_input,\n  blendShape_vert,\n  uv_vert,\n  worldpos_vert,\n  shadow_vert,\n  fog_vert,\n\n  direct_light_frag,\n  point_light_frag,\n  spot_light_frag,\n  mobile_material_frag,\n  fog_frag,\n\n  begin_mobile_frag,\n  begin_viewdir_frag,\n\n  mobile_blinnphong_frag,\n\n  noise_common,\n  noise_cellular_2D,\n  noise_cellular_2x2,\n  noise_cellular_2x2x2,\n  noise_cellular_3D,\n  noise_cellular,\n  noise_perlin_2D,\n  noise_perlin_3D,\n  noise_perlin_4D,\n  noise_perlin,\n  noise_psrd_2D,\n  noise_simplex_2D,\n  noise_simplex_3D_grad,\n  noise_simplex_3D,\n  noise_simplex_4D,\n  noise_simplex,\n\n  gamma_frag,\n\n  ...PBRShaderLib,\n  normal_get\n};\n","import { ShaderLib } from \"./ShaderLib\";\nimport { Logger } from \"../base/Logger\";\n\nclass ShaderFactory {\n  static parseCustomMacros(macros: string[]) {\n    return (\n      macros.map((m) => `#define ${m}\\n`).join(\"\")\n    );\n  }\n\n  static parseIncludes(src: string) {\n    const regex = /^[ \\t]*#include +<([\\w\\d.]+)>/gm;\n\n    function replace(match, slice) {\n      var replace = ShaderLib[slice];\n\n      if (replace === undefined) {\n        Logger.error(`Shader slice \"${match.trim()}\" not founded.`);\n        return \"\";\n      }\n\n      return ShaderFactory.parseIncludes(replace);\n    }\n\n    return src.replace(regex, replace);\n  }\n\n  /**\n   * GLSL extension.\n   * @param {string[]} extensions - such as [\"GL_EXT_shader_texture_lod\"]\n   * */\n  static parseExtension(extensions: string[]) {\n    return (\n      extensions.map((e) => `#extension ${e} : enable\\n`).join(\"\")\n    );\n  }\n\n  /**\n   * Convert lower GLSL version to GLSL 300 es.\n   * @param shader - code\n   * @param isFrag - Whether it is a fragment shader.\n   * */\n  static convertTo300(shader: string, isFrag?: boolean) {\n    /** replace attribute and in */\n    shader = shader.replace(/\\battribute\\b/g, \"in\");\n    shader = shader.replace(/\\bvarying\\b/g, isFrag ? \"in\" : \"out\");\n\n    /** replace api */\n    shader = shader.replace(/\\btexture(2D|Cube)\\b/g, \"texture\");\n    shader = shader.replace(/\\btexture(2D|Cube)LodEXT\\b/g, \"textureLod\");\n    if (isFrag) {\n      const isMRT = /\\bgl_FragData\\[.+?\\]/g.test(shader);\n      if (isMRT) {\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"gl_FragData[0]\");\n        const result = shader.match(/\\bgl_FragData\\[.+?\\]/g);\n        shader = this._replaceMRTShader(shader, result);\n      } else {\n        shader = shader.replace(/void\\s+?main\\s*\\(/g, `out vec4 glFragColor;\\nvoid main(`);\n        shader = shader.replace(/\\bgl_FragColor\\b/g, \"glFragColor\");\n      }\n    }\n\n    return shader;\n  }\n\n  private static _replaceMRTShader(shader: string, result: string[]): string {\n    let declaration = \"\";\n    const mrtIndexSet = new Set();\n\n    for (let i = 0; i < result.length; i++) {\n      const res = result[i].match(/\\bgl_FragData\\[(.+?)\\]/);\n      mrtIndexSet.add(res[1]);\n    }\n\n    mrtIndexSet.forEach((index) => {\n      declaration += `layout(location=${index}) out vec4 fragOutColor${index};\\n`;\n    });\n    declaration += `void main(`;\n\n    shader = shader.replace(/\\bgl_FragData\\[(.+?)\\]/g, \"fragOutColor$1\");\n\n    shader = shader.replace(/void\\s+?main\\s*\\(/g, declaration);\n    return shader;\n  }\n}\n\nexport { ShaderFactory };\n","/**\n * Shader macro。\n */\nexport class ShaderMacro {\n  /** name */\n  readonly name: string;\n\n  /** @internal */\n  _index: number;\n  /** @internal */\n  _value: number;\n\n  /**\n   * @internal\n   */\n  constructor(name: string, index: number, value: number) {\n    this.name = name;\n    this._index = index;\n    this._value = value;\n  }\n}\n","import { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderPropertyValueType } from \"./ShaderData\";\n\n/**\n * Shader uniform。\n * @internal\n */\nexport class ShaderUniform {\n  name: string;\n  propertyId: number;\n  location: WebGLUniformLocation;\n  applyFunc: (shaderUniform: ShaderUniform, value: ShaderPropertyValueType) => void;\n  cacheValue: number | Vector2 | Vector3 | Vector4;\n  textureIndex: GLenum | GLenum[];\n  textureDefault: Texture | Texture[];\n\n  private _rhi: IHardwareRenderer;\n  private _gl: WebGLRenderingContext;\n\n  constructor(engine: Engine) {\n    const rhi = engine._hardwareRenderer;\n    this._rhi = rhi;\n    this._gl = rhi.gl;\n  }\n\n  upload1f(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1f(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform1fv(shaderUniform.location, value);\n  }\n\n  upload2f(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        this._gl.uniform2f(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2f(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform2fv(shaderUniform.location, value);\n  }\n\n  upload3f(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        this._gl.uniform3f(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3f(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n\n  upload3fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform3fv(shaderUniform.location, value);\n  }\n\n  upload4f(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        this._gl.uniform4f(\n          shaderUniform.location,\n          (<Color>value).r,\n          (<Color>value).g,\n          (<Color>value).b,\n          (<Color>value).a\n        );\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4f(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4fv(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniform4fv(shaderUniform.location, value);\n  }\n\n  upload1i(shaderUniform: ShaderUniform, value: number): void {\n    if (this.cacheValue !== value) {\n      this._gl.uniform1i(shaderUniform.location, value);\n      this.cacheValue = value;\n    }\n  }\n\n  upload1iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform1iv(shaderUniform.location, value);\n  }\n\n  upload2i(shaderUniform: ShaderUniform, value: Vector2 | Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector2>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g) {\n        this._gl.uniform2i(shaderUniform.location, (<Color>value).r, (<Color>value).g);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n      }\n    } else {\n      if (cacheValue.x !== (<Vector2>value).x || cacheValue.y !== (<Vector2>value).y) {\n        this._gl.uniform2i(shaderUniform.location, (<Vector2>value).x, (<Vector2>value).y);\n        cacheValue.x = (<Vector2>value).x;\n        cacheValue.y = (<Vector2>value).y;\n      }\n    }\n  }\n\n  upload2iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform2iv(shaderUniform.location, value);\n  }\n\n  upload3i(shaderUniform: ShaderUniform, value: Vector3 | Vector4 | Color): void {\n    const cacheValue = <Vector3>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (cacheValue.x !== (<Color>value).r || cacheValue.y !== (<Color>value).g || cacheValue.z !== (<Color>value).b) {\n        this._gl.uniform3i(shaderUniform.location, (<Color>value).r, (<Color>value).g, (<Color>value).b);\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector3>value).x ||\n        cacheValue.y !== (<Vector3>value).y ||\n        cacheValue.z !== (<Vector3>value).z\n      ) {\n        this._gl.uniform3i(shaderUniform.location, (<Vector3>value).x, (<Vector3>value).y, (<Vector3>value).z);\n        cacheValue.x = (<Vector3>value).x;\n        cacheValue.y = (<Vector3>value).y;\n        cacheValue.z = (<Vector3>value).z;\n      }\n    }\n  }\n  upload3iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform3iv(shaderUniform.location, value);\n  }\n  upload4i(shaderUniform: ShaderUniform, value: Vector4 | Color): void {\n    const cacheValue = <Vector4>this.cacheValue;\n    if ((<Color>value).r !== undefined) {\n      if (\n        cacheValue.x !== (<Color>value).r ||\n        cacheValue.y !== (<Color>value).g ||\n        cacheValue.z !== (<Color>value).b ||\n        cacheValue.w !== (<Color>value).a\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Color>value).r,\n          (<Color>value).g,\n          (<Color>value).b,\n          (<Color>value).a\n        );\n        cacheValue.x = (<Color>value).r;\n        cacheValue.y = (<Color>value).g;\n        cacheValue.z = (<Color>value).b;\n        cacheValue.w = (<Color>value).a;\n      }\n    } else {\n      if (\n        cacheValue.x !== (<Vector4>value).x ||\n        cacheValue.y !== (<Vector4>value).y ||\n        cacheValue.z !== (<Vector4>value).z ||\n        cacheValue.w !== (<Vector4>value).w\n      ) {\n        this._gl.uniform4i(\n          shaderUniform.location,\n          (<Vector4>value).x,\n          (<Vector4>value).y,\n          (<Vector4>value).z,\n          (<Vector4>value).w\n        );\n        cacheValue.x = (<Vector4>value).x;\n        cacheValue.y = (<Vector4>value).y;\n        cacheValue.z = (<Vector4>value).z;\n        cacheValue.w = (<Vector4>value).w;\n      }\n    }\n  }\n\n  upload4iv(shaderUniform: ShaderUniform, value: Int32Array): void {\n    this._gl.uniform4iv(shaderUniform.location, value);\n  }\n\n  uploadMat4(shaderUniform: ShaderUniform, value: Matrix): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value.elements);\n  }\n\n  uploadMat4v(shaderUniform: ShaderUniform, value: Float32Array): void {\n    this._gl.uniformMatrix4fv(shaderUniform.location, false, value);\n  }\n\n  uploadTexture(shaderUniform: ShaderUniform, value: Texture): void {\n    const rhi = this._rhi;\n    rhi.activeTexture(shaderUniform.textureIndex as GLenum);\n    rhi.bindTexture(value._platformTexture);\n  }\n\n  uploadTextureArray(shaderUniform: ShaderUniform, value: Texture[]): void {\n    const rhi = this._rhi;\n    const textureIndices = shaderUniform.textureIndex as GLenum[];\n    for (let i = 0; i < value.length; i++) {\n      const texture = value[i];\n      rhi.activeTexture(textureIndices[i]);\n      rhi.bindTexture(texture._platformTexture);\n    }\n  }\n}\n","import { ShaderUniform } from \"./ShaderUniform\";\n\n/**\n * Shader uniform block.\n * @internal\n */\nexport class ShaderUniformBlock {\n  readonly constUniforms: ShaderUniform[] = [];\n  readonly textureUniforms: ShaderUniform[] = [];\n}\n","import { Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { Texture } from \"../texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderData } from \"./ShaderData\";\nimport { ShaderUniform } from \"./ShaderUniform\";\nimport { ShaderUniformBlock } from \"./ShaderUniformBlock\";\n\n/**\n * Shader program, corresponding to the GPU shader program.\n * @internal\n */\nexport class ShaderProgram {\n  private static _counter: number = 0;\n\n  private static _addLineNum(str: string) {\n    const lines = str.split(\"\\n\");\n    const limitLength = (lines.length + 1).toString().length + 6;\n    let prefix;\n    return lines\n      .map((line, index) => {\n        prefix = `0:${index + 1}`;\n        if (prefix.length >= limitLength) return prefix.substring(0, limitLength) + line;\n\n        for (let i = 0; i < limitLength - prefix.length; i++) prefix += \" \";\n\n        return prefix + line;\n      })\n      .join(\"\\n\");\n  }\n\n  id: number;\n\n  readonly sceneUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly cameraUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly rendererUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly materialUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n  readonly otherUniformBlock: ShaderUniformBlock = new ShaderUniformBlock();\n\n  /** @internal */\n  _uploadRenderCount: number = -1;\n  /** @internal */\n  _uploadCamera: Camera;\n  /** @internal */\n  _uploadRenderer: Renderer;\n  /** @internal */\n  _uploadMaterial: Material;\n\n  attributeLocation: Record<string, GLint> = Object.create(null);\n\n  // @todo: move to RHI.\n  private _isValid: boolean;\n  private _engine: Engine;\n  private _gl: WebGLRenderingContext;\n  private _vertexShader: WebGLShader;\n  private _fragmentShader: WebGLShader;\n  private _glProgram: WebGLProgram;\n  private _activeTextureUint: number = 0;\n\n  /**\n   * Whether this shader program is valid.\n   */\n  get isValid(): boolean {\n    return this._isValid;\n  }\n\n  constructor(engine: Engine, vertexSource: string, fragmentSource: string) {\n    this._engine = engine;\n    this._gl = engine._hardwareRenderer.gl;\n    this._glProgram = this._createProgram(vertexSource, fragmentSource);\n\n    if (this._glProgram) {\n      this._isValid = true;\n      this._recordLocation();\n    } else {\n      this._isValid = false;\n    }\n\n    this.id = ShaderProgram._counter++;\n  }\n\n  /**\n   * Upload all shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadAll(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    this.uploadUniforms(uniformBlock, shaderData);\n    this.uploadTextures(uniformBlock, shaderData);\n  }\n\n  /**\n   * Upload constant shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadUniforms(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const properties = shaderData._properties;\n    const constUniforms = uniformBlock.constUniforms;\n\n    for (let i = 0, n = constUniforms.length; i < n; i++) {\n      const uniform = constUniforms[i];\n      const data = properties[uniform.propertyId];\n      data != null && uniform.applyFunc(uniform, data);\n    }\n  }\n\n  /**\n   * Upload texture shader data in shader uniform block.\n   * @param uniformBlock - shader Uniform block\n   * @param shaderData - shader data\n   */\n  uploadTextures(uniformBlock: ShaderUniformBlock, shaderData: ShaderData): void {\n    const properties = shaderData._properties;\n    const textureUniforms = uniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        const texture = properties[uniform.propertyId];\n        if (texture) {\n          uniform.applyFunc(uniform, texture);\n        } else {\n          uniform.applyFunc(uniform, uniform.textureDefault);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upload ungroup texture shader data in shader uniform block.\n   */\n  uploadUngroupTextures(): void {\n    const textureUniforms = this.otherUniformBlock.textureUniforms;\n    // textureUniforms property maybe null if ShaderUniformBlock not contain any texture.\n    if (textureUniforms) {\n      for (let i = 0, n = textureUniforms.length; i < n; i++) {\n        const uniform = textureUniforms[i];\n        uniform.applyFunc(uniform, uniform.textureDefault);\n      }\n    }\n  }\n\n  /**\n   * Grouping other data.\n   */\n  groupingOtherUniformBlock() {\n    const { constUniforms, textureUniforms } = this.otherUniformBlock;\n    constUniforms.length > 0 && this._groupingSubOtherUniforms(constUniforms, false);\n    textureUniforms.length > 0 && this._groupingSubOtherUniforms(textureUniforms, true);\n  }\n\n  /**\n   * Bind this shader program.\n   * @returns Whether the shader program is switched.\n   */\n  bind(): boolean {\n    const rhi: IHardwareRenderer = this._engine._hardwareRenderer;\n    if (rhi._currentBind !== this) {\n      this._gl.useProgram(this._glProgram);\n      rhi._currentBind = this;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Destroy this shader program.\n   */\n  destroy(): void {\n    const gl = this._gl;\n    this._vertexShader && gl.deleteShader(this._vertexShader);\n    this._fragmentShader && gl.deleteShader(this._fragmentShader);\n    this._glProgram && gl.deleteProgram(this._glProgram);\n  }\n\n  private _groupingSubOtherUniforms(uniforms: ShaderUniform[], isTexture: boolean): void {\n    for (let i = uniforms.length - 1; i >= 0; i--) {\n      const uniform = uniforms[i];\n      const group = Shader._getShaderPropertyGroup(uniform.name);\n      if (group !== undefined) {\n        uniforms.splice(uniforms.indexOf(uniform), 1);\n        this._groupingUniform(uniform, group, isTexture);\n      }\n    }\n  }\n\n  private _groupingUniform(uniform: ShaderUniform, group: ShaderDataGroup, isTexture: boolean): void {\n    switch (group) {\n      case ShaderDataGroup.Scene:\n        if (isTexture) {\n          this.sceneUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.sceneUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Camera:\n        if (isTexture) {\n          this.cameraUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.cameraUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Renderer:\n        if (isTexture) {\n          this.rendererUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.rendererUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      case ShaderDataGroup.Material:\n        if (isTexture) {\n          this.materialUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.materialUniformBlock.constUniforms.push(uniform);\n        }\n        break;\n      default:\n        if (isTexture) {\n          this.otherUniformBlock.textureUniforms.push(uniform);\n        } else {\n          this.otherUniformBlock.constUniforms.push(uniform);\n        }\n    }\n  }\n\n  /**\n   * init and link program with shader.\n   */\n  private _createProgram(vertexSource: string, fragmentSource: string): WebGLProgram | null {\n    const gl = this._gl;\n\n    // create and compile shader\n    const vertexShader = this._createShader(gl.VERTEX_SHADER, vertexSource);\n    if (!vertexShader) {\n      return null;\n    }\n\n    const fragmentShader = this._createShader(gl.FRAGMENT_SHADER, fragmentSource);\n    if (!fragmentShader) {\n      return null;\n    }\n\n    // link program and shader\n    const program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    gl.validateProgram(program);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while linking program.\");\n      gl.deleteShader(vertexShader);\n      gl.deleteShader(fragmentShader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      Logger.error(\"Could not link WebGL program. \\n\" + gl.getProgramInfoLog(program));\n      gl.deleteProgram(program);\n      return null;\n    }\n\n    this._vertexShader = vertexShader;\n    this._fragmentShader = fragmentShader;\n    return program;\n  }\n\n  private _createShader(shaderType: number, shaderSource: string): WebGLShader | null {\n    const gl = this._gl;\n    const shader = gl.createShader(shaderType);\n\n    if (!shader) {\n      Logger.error(\"Context lost while create shader.\");\n      return null;\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n\n    if (gl.isContextLost()) {\n      Logger.error(\"Context lost while compiling shader.\");\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    if (Logger.isEnabled && !gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      Logger.error(\n        `Could not compile WebGL shader.\\n${gl.getShaderInfoLog(shader)}`,\n        ShaderProgram._addLineNum(shaderSource)\n      );\n      gl.deleteShader(shader);\n      return null;\n    }\n\n    return shader;\n  }\n\n  /**\n   * record the location of uniform/attribute.\n   */\n  private _recordLocation() {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos = this._getUniformInfos();\n    const attributeInfos = this._getAttributeInfos();\n\n    uniformInfos.forEach(({ name, size, type }) => {\n      const shaderUniform = new ShaderUniform(this._engine);\n      let isArray = false;\n      let isTexture = false;\n\n      if (name.indexOf(\"[0]\") > 0) {\n        name = name.substr(0, name.length - 3);\n        isArray = true;\n      }\n\n      const group = Shader._getShaderPropertyGroup(name);\n      const location = gl.getUniformLocation(program, name);\n      shaderUniform.name = name;\n      shaderUniform.propertyId = Shader.getPropertyByName(name)._uniqueId;\n      shaderUniform.location = location;\n\n      switch (type) {\n        case gl.FLOAT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1f;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.FLOAT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2f;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC3:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload3fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload3f;\n            shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4fv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4f;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0, 0);\n          }\n          break;\n        case gl.BOOL:\n        case gl.INT:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload1iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload1i;\n            shaderUniform.cacheValue = 0;\n          }\n          break;\n        case gl.BOOL_VEC2:\n        case gl.INT_VEC2:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload2iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload2i;\n            shaderUniform.cacheValue = new Vector2(0, 0);\n          }\n          break;\n        case gl.BOOL_VEC3:\n        case gl.INT_VEC3:\n          if (isArray) {\n          } else {\n          }\n          shaderUniform.applyFunc = isArray ? shaderUniform.upload3iv : shaderUniform.upload3i;\n          shaderUniform.cacheValue = new Vector3(0, 0, 0);\n          break;\n        case gl.BOOL_VEC4:\n        case gl.INT_VEC4:\n          if (isArray) {\n            shaderUniform.applyFunc = shaderUniform.upload4iv;\n          } else {\n            shaderUniform.applyFunc = shaderUniform.upload4i;\n            shaderUniform.cacheValue = new Vector4(0, 0, 0);\n          }\n          break;\n        case gl.FLOAT_MAT4:\n          shaderUniform.applyFunc = isArray ? shaderUniform.uploadMat4v : shaderUniform.uploadMat4;\n          break;\n        case gl.SAMPLER_2D:\n        case gl.SAMPLER_CUBE:\n          const defaultTexture = type === gl.SAMPLER_2D ? this._engine._whiteTexture2D : this._engine._whiteTextureCube;\n\n          isTexture = true;\n          if (isArray) {\n            const defaultTextures = new Array<Texture>(size);\n            const textureIndices = new Int32Array(size);\n            const glTextureIndices = new Array<number>(size);\n\n            for (let i = 0; i < size; i++) {\n              defaultTextures[i] = defaultTexture;\n              textureIndices[i] = this._activeTextureUint;\n              glTextureIndices[i] = gl.TEXTURE0 + this._activeTextureUint++;\n            }\n            shaderUniform.textureDefault = defaultTextures;\n            shaderUniform.textureIndex = glTextureIndices;\n            shaderUniform.applyFunc = shaderUniform.uploadTextureArray;\n            this.bind();\n            gl.uniform1iv(location, textureIndices);\n            shaderUniform.uploadTextureArray(shaderUniform, defaultTextures);\n          } else {\n            const textureIndex = gl.TEXTURE0 + this._activeTextureUint;\n\n            shaderUniform.textureDefault = defaultTexture;\n            shaderUniform.textureIndex = textureIndex;\n            shaderUniform.applyFunc = shaderUniform.uploadTexture;\n            this.bind();\n            gl.uniform1i(location, this._activeTextureUint++);\n            shaderUniform.uploadTexture(shaderUniform, defaultTexture);\n          }\n          break;\n      }\n      this._groupingUniform(shaderUniform, group, isTexture);\n    });\n\n    attributeInfos.forEach(({ name }) => {\n      this.attributeLocation[name] = gl.getAttribLocation(program, name);\n    });\n  }\n\n  private _getUniformInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const uniformInfos: WebGLActiveInfo[] = [];\n\n    const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n    for (let i = 0; i < uniformCount; ++i) {\n      const info = gl.getActiveUniform(program, i);\n      uniformInfos[i] = info;\n    }\n\n    return uniformInfos;\n  }\n\n  private _getAttributeInfos(): WebGLActiveInfo[] {\n    const gl = this._gl;\n    const program = this._glProgram;\n    const attributeInfos: WebGLActiveInfo[] = [];\n\n    const attributeCount = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n    for (let i = 0; i < attributeCount; ++i) {\n      const info = gl.getActiveAttrib(program, i);\n      attributeInfos[i] = info;\n    }\n\n    return attributeInfos;\n  }\n}\n","import { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\n\n/**\n * Shader property.\n */\nexport class ShaderProperty {\n  private static _propertyNameCounter: number = 0;\n\n  /** @internal */\n  _uniqueId: number;\n  /** @internal */\n  _group: ShaderDataGroup;\n\n  /** Shader property name. */\n  readonly name: string;\n\n  /**\n   * @internal\n   */\n  constructor(name: string) {\n    this.name = name;\n    this._uniqueId = ShaderProperty._propertyNameCounter++;\n  }\n}\n","import { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ShaderFactory } from \"../shaderlib/ShaderFactory\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\n/**\n * Shader containing vertex and fragment source.\n */\nexport class Shader {\n  /** @internal */\n  static readonly _compileMacros: ShaderMacroCollection = new ShaderMacroCollection();\n\n  private static _shaderCounter: number = 0;\n  private static _shaderMap: Record<string, Shader> = Object.create(null);\n  private static _propertyNameMap: Record<string, ShaderProperty> = Object.create(null);\n  private static _macroMaskMap: string[][] = [];\n  private static _macroCounter: number = 0;\n  private static _macroMap: Record<string, ShaderMacro> = Object.create(null);\n  private static _shaderExtension = [\"GL_EXT_shader_texture_lod\", \"GL_OES_standard_derivatives\", \"GL_EXT_draw_buffers\"];\n\n  /**\n   * Create a shader.\n   * @param name - Name of the shader\n   * @param vertexSource - Vertex source code\n   * @param fragmentSource - Fragment source code\n   */\n  static create(name: string, vertexSource: string, fragmentSource: string): Shader {\n    const shaderMap = Shader._shaderMap;\n    if (shaderMap[name]) {\n      throw `Shader named \"${name}\" already exists.`;\n    }\n    return (shaderMap[name] = new Shader(name, vertexSource, fragmentSource));\n  }\n\n  /**\n   * Find a shader by name.\n   * @param name - Name of the shader\n   */\n  static find(name: string): Shader {\n    return Shader._shaderMap[name];\n  }\n\n  /**\n   * Get shader macro by name.\n   * @param name - Name of the shader macro\n   * @returns Shader macro\n   */\n  static getMacroByName(name: string): ShaderMacro {\n    let macro = Shader._macroMap[name];\n    if (!macro) {\n      const maskMap = Shader._macroMaskMap;\n      const counter = Shader._macroCounter;\n      const index = Math.floor(counter / 32);\n      const bit = counter % 32;\n      macro = new ShaderMacro(name, index, 1 << bit);\n      Shader._macroMap[name] = macro;\n      if (index == maskMap.length) {\n        maskMap.length++;\n        maskMap[index] = new Array<string>(32);\n      }\n      maskMap[index][bit] = name;\n      Shader._macroCounter++;\n    }\n    return macro;\n  }\n\n  /**\n   * Get shader property by name.\n   * @param name - Name of the shader property\n   * @returns Shader property\n   */\n  static getPropertyByName(name: string): ShaderProperty {\n    const propertyNameMap = Shader._propertyNameMap;\n    if (propertyNameMap[name] != null) {\n      return propertyNameMap[name];\n    } else {\n      const property = new ShaderProperty(name);\n      propertyNameMap[name] = property;\n      return property;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getShaderPropertyGroup(propertyName: string): ShaderDataGroup | null {\n    const shaderProperty = Shader._propertyNameMap[propertyName];\n    return shaderProperty?._group;\n  }\n\n  private static _getNamesByMacros(macros: ShaderMacroCollection, out: string[]): void {\n    const maskMap = Shader._macroMaskMap;\n    const mask = macros._mask;\n    out.length = 0;\n    for (let i = 0, n = macros._length; i < n; i++) {\n      const subMaskMap = maskMap[i];\n      const subMask = mask[i];\n      const n = subMask < 0 ? 32 : Math.floor(Math.log2(subMask)) + 1; // if is negative must contain 1 << 31.\n      for (let j = 0; j < n; j++) {\n        if (subMask & (1 << j)) {\n          out.push(subMaskMap[j]);\n        }\n      }\n    }\n  }\n\n  /** The name of shader. */\n  readonly name: string;\n\n  /** @internal */\n  _shaderId: number = 0;\n\n  private _vertexSource: string;\n  private _fragmentSource: string;\n\n  private constructor(name: string, vertexSource: string, fragmentSource: string) {\n    this._shaderId = Shader._shaderCounter++;\n    this.name = name;\n    this._vertexSource = vertexSource;\n    this._fragmentSource = fragmentSource;\n  }\n\n  /**\n   * Compile shader variant by macro name list.\n   *\n   * @remarks\n   * Usually a shader contains some macros,any combination of macros is called shader variant.\n   *\n   * @param engine - Engine to which the shader variant belongs\n   * @param macros - Macro name list\n   * @returns Is the compiled shader variant valid\n   */\n  compileVariant(engine: Engine, macros: string[]): boolean {\n    const compileMacros = Shader._compileMacros;\n    compileMacros.clear();\n    for (let i = 0, n = macros.length; i < n; i++) {\n      compileMacros.enable(Shader.getMacroByName(macros[i]));\n    }\n    return this._getShaderProgram(engine, compileMacros).isValid;\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgram(engine: Engine, macroCollection: ShaderMacroCollection): ShaderProgram {\n    const shaderProgramPool = engine._getShaderProgramPool(this);\n    let shaderProgram = shaderProgramPool.get(macroCollection);\n    if (shaderProgram) {\n      return shaderProgram;\n    }\n\n    const isWebGL2: boolean = engine._hardwareRenderer.isWebGL2;\n    const macroNameList = [];\n    Shader._getNamesByMacros(macroCollection, macroNameList);\n    const macroNameStr = ShaderFactory.parseCustomMacros(macroNameList);\n    const versionStr = isWebGL2 ? \"#version 300 es\" : \"#version 100\";\n    let precisionStr = `\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\n      precision highp float;\n      precision highp int;\n      #define O3_VERTEX_PRECISION highp\n      #define O3_FRAGMENT_PRECISION highp\n    #else\n      precision mediump float;\n      precision mediump int;\n      #define O3_VERTEX_PRECISION mediump\n      #define O3_FRAGMENT_PRECISION mediump\n    #endif\n    `;\n\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.shaderTextureLod)) {\n      precisionStr += \"#define HAS_TEX_LOD\\n\";\n    }\n    if (engine._hardwareRenderer.canIUse(GLCapabilityType.standardDerivatives)) {\n      precisionStr += \"#define HAS_DERIVATIVES\\n\";\n    }\n\n    let vertexSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${precisionStr}\n        ${macroNameStr}\n        ` + this._vertexSource\n    );\n\n    let fragmentSource = ShaderFactory.parseIncludes(\n      ` ${versionStr}\n        ${isWebGL2 ? \"\" : ShaderFactory.parseExtension(Shader._shaderExtension)}\n        ${precisionStr}\n        ${macroNameStr}\n      ` + this._fragmentSource\n    );\n\n    if (isWebGL2) {\n      vertexSource = ShaderFactory.convertTo300(vertexSource);\n      fragmentSource = ShaderFactory.convertTo300(fragmentSource, true);\n    }\n\n    shaderProgram = new ShaderProgram(engine, vertexSource, fragmentSource);\n\n    shaderProgramPool.cache(shaderProgram);\n    return shaderProgram;\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { Color, Matrix, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { IRefObject } from \"../asset/IRefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Texture } from \"../texture/Texture\";\nimport { ShaderDataGroup } from \"./enums/ShaderDataGroup\";\nimport { Shader } from \"./Shader\";\nimport { ShaderMacro } from \"./ShaderMacro\";\nimport { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProperty } from \"./ShaderProperty\";\n\nexport type ShaderPropertyValueType =\n  | number\n  | Vector2\n  | Vector3\n  | Vector4\n  | Color\n  | Matrix\n  | Texture\n  | Texture[]\n  | Int32Array\n  | Float32Array;\n\n/**\n * Shader data collection,Correspondence includes shader properties data and macros data.\n */\nexport class ShaderData implements IRefObject, IClone {\n  /** @internal */\n  _group: ShaderDataGroup;\n  /** @internal */\n  _properties: Record<number, ShaderPropertyValueType> = Object.create(null);\n  /** @internal */\n  _macroCollection: ShaderMacroCollection = new ShaderMacroCollection();\n\n  private _variableMacros: Record<string, string> = Object.create(null);\n  private _refCount: number = 0;\n\n  /**\n   * @internal\n   */\n  constructor(group: ShaderDataGroup) {\n    this._group = group;\n  }\n\n  /**\n   * Get float by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float\n   */\n  getFloat(propertyName: string): number;\n\n  /**\n   * Get float by shader property.\n   * @param property - Shader property\n   * @returns Float\n   */\n  getFloat(property: ShaderProperty): number;\n\n  getFloat(property: string | ShaderProperty): number {\n    return this._getData(property);\n  }\n\n  /**\n   * Set float by shader property name.\n   * @remarks Corresponding float shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float\n   */\n  setFloat(propertyName: string, value: number): void;\n\n  /**\n   * Set float by shader property.\n   * @remarks Corresponding float shader property type.\n   * @param property - Shader property\n   * @param value - Float\n   */\n  setFloat(property: ShaderProperty, value: number): void;\n\n  setFloat(property: string | ShaderProperty, value: number): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get int by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int\n   */\n  getInt(propertyName: string): number;\n\n  /**\n   * Get int by shader property.\n   * @param property - Shader property\n   * @returns Int\n   */\n  getInt(property: ShaderProperty): number;\n\n  getInt(property: string | ShaderProperty): number {\n    return this._getData(property);\n  }\n\n  /**\n   * Set int by shader property name.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int\n   */\n  setInt(propertyName: string, value: number): void;\n\n  /**\n   * Set int by shader property.\n   * @remarks Correspondence includes int and bool shader property type.\n   * @param property - Shader property\n   * @param value - Int\n   */\n  setInt(property: ShaderProperty, value: number): void;\n\n  setInt(property: string | ShaderProperty, value: number): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get float array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Float array\n   */\n  getFloatArray(propertyName: string): Float32Array;\n\n  /**\n   * Get float array by shader property.\n   * @param property - Shader property\n   * @returns Float array\n   */\n  getFloatArray(property: ShaderProperty): Float32Array;\n\n  getFloatArray(property: string | ShaderProperty): Float32Array {\n    return this._getData(property);\n  }\n\n  /**\n   * Set float array by shader property name.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Float array\n   */\n  setFloatArray(propertyName: string, value: Float32Array): void;\n\n  /**\n   * Set float array by shader property.\n   * @remarks Correspondence includes float array、vec2 array、vec3 array、vec4 array and matrix array shader property type.\n   * @param property - Shader property\n   * @param value - Float array\n   */\n  setFloatArray(property: ShaderProperty, value: Float32Array): void;\n\n  setFloatArray(property: string | ShaderProperty, value: Float32Array): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get int array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Int Array\n   */\n  getIntArray(propertyName: string): Int32Array;\n\n  /**\n   * Get int array by shader property.\n   * @param property - Shader property\n   * @returns Int Array\n   */\n  getIntArray(property: ShaderProperty): Int32Array;\n\n  getIntArray(property: string | ShaderProperty): Int32Array {\n    return this._getData(property);\n  }\n\n  /**\n   * Set int array by shader property name.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Int Array\n   */\n  setIntArray(propertyName: string, value: Int32Array): void;\n\n  /**\n   * Set int array by shader property.\n   * @remarks Correspondence includes bool array、int array、bvec2 array、bvec3 array、bvec4 array、ivec2 array、ivec3 array and ivec4 array shader property type.\n   * @param property - Shader property\n   * @param value - Int Array\n   */\n  setIntArray(property: ShaderProperty, value: Int32Array): void;\n\n  setIntArray(property: string | ShaderProperty, value: Int32Array): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get two-dimensional from shader property name.\n   * @param propertyName - Shader property name\n   * @returns Two-dimensional vector\n   */\n  getVector2(propertyName: string): Vector2;\n\n  /**\n   * Get two-dimensional from shader property.\n   * @param property - Shader property\n   * @returns Two-dimensional vector\n   */\n  getVector2(property: ShaderProperty): Vector2;\n\n  getVector2(property: string | ShaderProperty): Vector2 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set two-dimensional vector from shader property name.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property name\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: string, value: Vector2): void;\n\n  /**\n   * Set two-dimensional vector from shader property.\n   * @remarks Correspondence includes vec2、ivec2 and bvec2 shader property type.\n   * @param property - Shader property\n   * @param value - Two-dimensional vector\n   */\n  setVector2(property: ShaderProperty, value: Vector2): void;\n\n  setVector2(property: string | ShaderProperty, value: Vector2): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get vector3 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Three-dimensional vector\n   */\n  getVector3(propertyName: string): Vector3;\n\n  /**\n   * Get vector3 by shader property.\n   * @param property - Shader property\n   * @returns Three-dimensional vector\n   */\n  getVector3(property: ShaderProperty): Vector3;\n\n  getVector3(property: string | ShaderProperty): Vector3 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set three dimensional vector by shader property name.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property name\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: string, value: Vector3): void;\n\n  /**\n   * Set three dimensional vector by shader property.\n   * @remarks Correspondence includes vec3、ivec3 and bvec3 shader property type.\n   * @param property - Shader property\n   * @param value - Three-dimensional vector\n   */\n  setVector3(property: ShaderProperty, value: Vector3): void;\n\n  setVector3(property: string | ShaderProperty, value: Vector3): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get vector4 by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Four-dimensional vector\n   */\n  getVector4(propertyName: string): Vector4;\n\n  /**\n   * Get vector4 by shader property.\n   * @param property - Shader property\n   * @returns Four-dimensional vector\n   */\n  getVector4(property: ShaderProperty): Vector4;\n\n  getVector4(property: string | ShaderProperty): Vector4 {\n    return this._getData(property);\n  }\n\n  /**\n   * Set four-dimensional vector by shader property name.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property name\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: string, value: Vector4): void;\n\n  /**\n   * Set four-dimensional vector by shader property.\n   * @remarks Correspondence includes vec4、ivec4 and bvec4 shader property type.\n   * @param property - Shader property\n   * @param value - Four-dimensional vector\n   */\n  setVector4(property: ShaderProperty, value: Vector4): void;\n\n  setVector4(property: string | ShaderProperty, value: Vector4): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get matrix by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Matrix\n   */\n  getMatrix(propertyName: string): Matrix;\n\n  /**\n   * Get matrix by shader property.\n   * @param property - Shader property\n   * @returns Matrix\n   */\n  getMatrix(property: ShaderProperty): Matrix;\n\n  getMatrix(property: string | ShaderProperty): Matrix {\n    return this._getData(property);\n  }\n\n  /**\n   * Set matrix by shader property name.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Matrix\n   */\n  setMatrix(propertyName: string, value: Matrix);\n\n  /**\n   * Set matrix by shader property.\n   * @remarks Correspondence includes matrix shader property type.\n   * @param property - Shader property\n   * @param value - Matrix\n   */\n  setMatrix(property: ShaderProperty, value: Matrix);\n\n  setMatrix(property: string | ShaderProperty, value: Matrix): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get color by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Color\n   */\n  getColor(propertyName: string): Color;\n\n  /**\n   * Get color by shader property.\n   * @param property - Shader property\n   * @returns Color\n   */\n  getColor(property: ShaderProperty): Color;\n\n  getColor(property: string | ShaderProperty): Color {\n    return this._getData(property);\n  }\n\n  /**\n   * Set color by shader property name.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param propertyName - Shader property name\n   * @param value - Color\n   */\n  setColor(propertyName: string, value: Color): void;\n\n  /**\n   * Set color by shader property.\n   * @remarks Correspondence includes vec4 shader property type.\n   * @param property - Shader property\n   * @param value - Color\n   */\n  setColor(property: ShaderProperty, value: Color): void;\n\n  setColor(property: string | ShaderProperty, value: Color): void {\n    this._setData(property, value);\n  }\n\n  /**\n   * Get texture by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture\n   */\n  getTexture(propertyName: string): Texture;\n\n  /**\n   * Get texture by shader property.\n   * @param property - Shader property\n   * @returns Texture\n   */\n  getTexture(property: ShaderProperty): Texture;\n\n  getTexture(property: string | ShaderProperty): Texture {\n    return this._getData(property);\n  }\n\n  /**\n   * Set texture by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture\n   */\n  setTexture(propertyName: string, value: Texture): void;\n\n  /**\n   * Set texture by shader property.\n   * @param property - Shader property\n   * @param value - Texture\n   */\n  setTexture(property: ShaderProperty, value: Texture): void;\n\n  setTexture(property: string | ShaderProperty, value: Texture): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this._getData<Texture>(property);\n      lastValue && lastValue._addRefCount(-1);\n      value && value._addRefCount(1);\n    }\n    this._setData(property, value);\n  }\n\n  /**\n   * Get texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @returns Texture array\n   */\n  getTextureArray(propertyName: string): Texture[];\n\n  /**\n   * Get texture array by shader property.\n   * @param property - Shader property\n   * @returns Texture array\n   */\n  getTextureArray(property: ShaderProperty): Texture[];\n\n  getTextureArray(property: string | ShaderProperty): Texture[] {\n    return this._getData(property);\n  }\n\n  /**\n   * Set texture array by shader property name.\n   * @param propertyName - Shader property name\n   * @param value - Texture array\n   */\n  setTextureArray(propertyName: string, value: Texture[]): void;\n\n  /**\n   * Set texture array by shader property.\n   * @param property - Shader property\n   * @param value - Texture array\n   */\n  setTextureArray(property: ShaderProperty, value: Texture[]): void;\n\n  setTextureArray(property: string | ShaderProperty, value: Texture[]): void {\n    if (this._getRefCount() > 0) {\n      const lastValue = this._getData<Texture[]>(property);\n      if (lastValue) {\n        for (let i = 0, n = lastValue.length; i < n; i++) {\n          lastValue[i]._addRefCount(-1);\n        }\n      }\n      if (value) {\n        for (let i = 0, n = value.length; i < n; i++) {\n          value[i]._addRefCount(1);\n        }\n      }\n    }\n    this._setData(property, value);\n  }\n\n  /**\n   * Enable macro.\n   * @param macroName - Macro name\n   */\n  enableMacro(macroName: string): void;\n\n  /**\n   * Enable macro.\n   * @param macro - Shader macro\n   */\n  enableMacro(macro: ShaderMacro): void;\n\n  /**\n   * Enable macro.\n   * @remarks Name and value will combine one macro, it's equal the macro of \"name value\".\n   * @param name - Macro name\n   * @param value - Macro value\n   */\n  enableMacro(name: string, value: string): void;\n\n  enableMacro(macro: string | ShaderMacro, value: string = null): void {\n    if (value) {\n      this._enableVariableMacro(<string>macro, value);\n    } else {\n      if (typeof macro === \"string\") {\n        macro = Shader.getMacroByName(macro);\n      }\n      this._macroCollection.enable(macro);\n    }\n  }\n\n  /**\n   * Disable macro\n   * @param macroName - Macro name\n   */\n  disableMacro(macroName: string): void;\n\n  /**\n   * Disable macro\n   * @param macro - Shader macro\n   */\n  disableMacro(macro: ShaderMacro): void;\n\n  disableMacro(macro: string | ShaderMacro): void {\n    if (typeof macro === \"string\") {\n      // @todo: should optimization variable macros disable performance\n      const variableValue = this._variableMacros[macro];\n      if (variableValue) {\n        this._disableVariableMacro(macro, variableValue);\n      } else {\n        macro = Shader.getMacroByName(macro);\n        this._macroCollection.disable(macro);\n      }\n    } else {\n      this._macroCollection.disable(macro);\n    }\n  }\n\n  clone(): ShaderData {\n    const shaderData = new ShaderData(this._group);\n    this.cloneTo(shaderData);\n    return shaderData;\n  }\n\n  cloneTo(target: ShaderData): void {\n    CloneManager.deepCloneObject(this._macroCollection, target._macroCollection);\n    Object.assign(target._variableMacros, this._variableMacros);\n\n    const properties = this._properties;\n    const targetProperties = target._properties;\n    const keys = Object.keys(properties);\n    for (let i = 0, n = keys.length; i < n; i++) {\n      const k = keys[i];\n      const property: ShaderPropertyValueType = properties[k];\n      if (property != null) {\n        if (typeof property === \"number\") {\n          targetProperties[k] = property;\n        } else if (property instanceof Texture) {\n          targetProperties[k] = property;\n        } else if (property instanceof Array || property instanceof Float32Array || property instanceof Int32Array) {\n          targetProperties[k] = property.slice();\n        } else {\n          const targetProperty = targetProperties[k];\n          if (targetProperty) {\n            property.cloneTo(targetProperty);\n          } else {\n            targetProperties[k] = property.clone();\n          }\n        }\n      } else {\n        targetProperties[k] = property;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getData<T extends ShaderPropertyValueType>(property: string | ShaderProperty): T {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n    return this._properties[property._uniqueId] as T;\n  }\n\n  /**\n   * @internal\n   */\n  _setData<T extends ShaderPropertyValueType>(property: string | ShaderProperty, value: T): void {\n    if (typeof property === \"string\") {\n      property = Shader.getPropertyByName(property);\n    }\n\n    if (property._group !== this._group) {\n      if (property._group === undefined) {\n        property._group = this._group;\n      } else {\n        throw `Shader property ${property.name} has been used as ${ShaderDataGroup[property._group]} property.`;\n      }\n    }\n\n    this._properties[property._uniqueId] = value;\n  }\n\n  /**\n   * @internal\n   */\n  _getRefCount(): number {\n    return this._refCount;\n  }\n\n  /**\n   * @internal\n   */\n  _addRefCount(value: number): void {\n    this._refCount += value;\n    const properties = this._properties;\n    for (const k in properties) {\n      const property = properties[k];\n      // @todo: Separate array to speed performance.\n      if (property && property instanceof Texture) {\n        property._addRefCount(value);\n      }\n    }\n  }\n\n  private _enableVariableMacro(name: string, value: string): void {\n    const variableMacro = this._variableMacros;\n    const variableValue = variableMacro[name];\n    if (variableValue !== value) {\n      variableValue && this._disableVariableMacro(name, variableValue);\n\n      const macro = Shader.getMacroByName(`${name} ${value}`);\n      this._macroCollection.enable(macro);\n      variableMacro[name] = value;\n    }\n  }\n\n  private _disableVariableMacro(name: string, value: string): void {\n    const oldMacro = Shader.getMacroByName(`${name} ${value}`);\n    this._macroCollection.disable(oldMacro);\n    delete this._variableMacros[name];\n  }\n}\n","/**\n * Blend factor.\n * @remarks defines which function is used for blending pixel arithmetic\n */\nexport enum BlendFactor {\n  /** (0, 0, 0, 0)*/\n  Zero,\n  /** (1, 1, 1, 1)*/\n  One,\n  /** (Rs, Gs, Bs, As) */\n  SourceColor,\n  /** (1 - Rs, 1 - Gs, 1 - Bs, 1 - As)*/\n  OneMinusSourceColor,\n  /** (Rd, Gd, Bd, Ad)*/\n  DestinationColor,\n  /** (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad)*/\n  OneMinusDestinationColor,\n  /** (As, As, As, As)*/\n  SourceAlpha,\n  /** (1 - As, 1 - As, 1 - As, 1 - As)*/\n  OneMinusSourceAlpha,\n  /** (Ad, Ad, Ad, Ad)*/\n  DestinationAlpha,\n  /** (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad)*/\n  OneMinusDestinationAlpha,\n  /** (min(As, 1 - Ad), min(As, 1 - Ad), min(As, 1 - Ad), 10)*/\n  SourceAlphaSaturate,\n  /** (Rc, Gc, Bc, Ac)*/\n  BlendColor,\n  /** (1 - Rc, 1 - Gc, 1 - Bc, 1 - Ac)*/\n  OneMinusBlendColor\n}\n","/**\n * Blend operation function.\n * @remarks defines how a new pixel is combined with a pixel.\n */\nexport enum BlendOperation {\n  /** src + dst. */\n  Add,\n  /** src - dst. */\n  Subtract,\n  /** dst - src. */\n  ReverseSubtract,\n  /** Minimum of source and destination. */\n  Min,\n  /** Maximum of source and destination. */\n  Max\n}\n","/**\n * Set which color channels can be rendered to frame buffer.\n * @remarks enumeration can be combined using bit operations.\n */\nexport enum ColorWriteMask {\n  /** Do not write to any channel. */\n  None = 0,\n  /** Write to the red channel. */\n  Red = 0x1,\n  /** Write to the green channel. */\n  Green = 0x2,\n  /** Write to the blue channel. */\n  Blue = 0x4,\n  /** Write to the alpha channel. */\n  Alpha = 0x8,\n  /** Write to all channel. */\n  All = 0xf\n}\n","import { BlendOperation } from \"../enums/BlendOperation\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\n\n/**\n * The blend state of the render target.\n */\nexport class RenderTargetBlendState {\n  /** Whether to enable blend. */\n  enabled: boolean = false;\n  /** color (RGB) blend operation. */\n  colorBlendOperation: BlendOperation = BlendOperation.Add;\n  /** alpha (A) blend operation. */\n  alphaBlendOperation: BlendOperation = BlendOperation.Add;\n  /** color blend factor (RGB) for source. */\n  sourceColorBlendFactor: BlendFactor = BlendFactor.One;\n  /** alpha blend factor (A) for source. */\n  sourceAlphaBlendFactor: BlendFactor = BlendFactor.One;\n  /** color blend factor (RGB) for destination. */\n  destinationColorBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** alpha blend factor (A) for destination. */\n  destinationAlphaBlendFactor: BlendFactor = BlendFactor.Zero;\n  /** color mask. */\n  colorWriteMask: ColorWriteMask = ColorWriteMask.All;\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { GLCapabilityType } from \"../../base/Constant\";\nimport { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { BlendFactor } from \"../enums/BlendFactor\";\nimport { BlendOperation } from \"../enums/BlendOperation\";\nimport { ColorWriteMask } from \"../enums/ColorWriteMask\";\nimport { RenderState } from \"./RenderState\";\nimport { RenderTargetBlendState } from \"./RenderTargetBlendState\";\n\n/**\n * Blend state.\n */\nexport class BlendState {\n  private static _getGLBlendFactor(rhi: IHardwareRenderer, blendFactor: BlendFactor): number {\n    const gl = rhi.gl;\n\n    switch (blendFactor) {\n      case BlendFactor.Zero:\n        return gl.ZERO;\n      case BlendFactor.One:\n        return gl.ONE;\n      case BlendFactor.SourceColor:\n        return gl.SRC_COLOR;\n      case BlendFactor.OneMinusSourceColor:\n        return gl.ONE_MINUS_SRC_COLOR;\n      case BlendFactor.DestinationColor:\n        return gl.DST_COLOR;\n      case BlendFactor.OneMinusDestinationColor:\n        return gl.ONE_MINUS_DST_COLOR;\n      case BlendFactor.SourceAlpha:\n        return gl.SRC_ALPHA;\n      case BlendFactor.OneMinusSourceAlpha:\n        return gl.ONE_MINUS_SRC_ALPHA;\n      case BlendFactor.DestinationAlpha:\n        return gl.DST_ALPHA;\n      case BlendFactor.OneMinusDestinationAlpha:\n        return gl.ONE_MINUS_DST_ALPHA;\n      case BlendFactor.SourceAlphaSaturate:\n        return gl.SRC_ALPHA_SATURATE;\n      case BlendFactor.BlendColor:\n        return gl.CONSTANT_COLOR;\n      case BlendFactor.OneMinusBlendColor:\n        return gl.ONE_MINUS_CONSTANT_COLOR;\n    }\n  }\n\n  private static _getGLBlendOperation(rhi: IHardwareRenderer, blendOperation: BlendOperation): number {\n    const gl = rhi.gl;\n\n    switch (blendOperation) {\n      case BlendOperation.Add:\n        return gl.FUNC_ADD;\n      case BlendOperation.Subtract:\n        return gl.FUNC_SUBTRACT;\n      case BlendOperation.ReverseSubtract:\n        return gl.FUNC_REVERSE_SUBTRACT;\n      case BlendOperation.Min:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Min is not supported in this context\");\n        }\n        return gl.MIN; // in webgl1.0 is an extension\n      case BlendOperation.Max:\n        if (!rhi.canIUse(GLCapabilityType.blendMinMax)) {\n          throw new Error(\"BlendOperation.Max is not supported in this context\");\n        }\n        return gl.MAX; // in webgl1.0 is an extension\n    }\n  }\n\n  /** The blend state of the render target. */\n  readonly targetBlendState: RenderTargetBlendState = new RenderTargetBlendState();\n  /** Constant blend color. */\n  readonly blendColor: Color = new Color(0, 0, 0, 0);\n  /** Whether to use (Alpha-to-Coverage) technology. */\n  alphaToCoverage: boolean = false;\n\n  /**\n   * @internal\n   * Apply the current blend state by comparing with the last blend state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.blendState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: BlendState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const lastTargetBlendState = lastState.targetBlendState;\n\n    const {\n      enabled,\n      colorBlendOperation,\n      alphaBlendOperation,\n      sourceColorBlendFactor,\n      destinationColorBlendFactor,\n      sourceAlphaBlendFactor,\n      destinationAlphaBlendFactor,\n      colorWriteMask\n    } = this.targetBlendState;\n\n    if (enabled !== lastTargetBlendState.enabled) {\n      if (enabled) {\n        gl.enable(gl.BLEND);\n      } else {\n        gl.disable(gl.BLEND);\n      }\n      lastTargetBlendState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply blend factor.\n      if (\n        sourceColorBlendFactor !== lastTargetBlendState.sourceColorBlendFactor ||\n        destinationColorBlendFactor !== lastTargetBlendState.destinationColorBlendFactor ||\n        sourceAlphaBlendFactor !== lastTargetBlendState.sourceAlphaBlendFactor ||\n        destinationAlphaBlendFactor !== lastTargetBlendState.destinationAlphaBlendFactor\n      ) {\n        gl.blendFuncSeparate(\n          BlendState._getGLBlendFactor(rhi, sourceColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationColorBlendFactor),\n          BlendState._getGLBlendFactor(rhi, sourceAlphaBlendFactor),\n          BlendState._getGLBlendFactor(rhi, destinationAlphaBlendFactor)\n        );\n        lastTargetBlendState.sourceColorBlendFactor = sourceColorBlendFactor;\n        lastTargetBlendState.destinationColorBlendFactor = destinationColorBlendFactor;\n        lastTargetBlendState.sourceAlphaBlendFactor = sourceAlphaBlendFactor;\n        lastTargetBlendState.destinationAlphaBlendFactor = destinationAlphaBlendFactor;\n      }\n\n      // apply blend operation.\n      if (\n        colorBlendOperation !== lastTargetBlendState.colorBlendOperation ||\n        alphaBlendOperation !== lastTargetBlendState.alphaBlendOperation\n      ) {\n        gl.blendEquationSeparate(\n          BlendState._getGLBlendOperation(rhi, colorBlendOperation),\n          BlendState._getGLBlendOperation(rhi, alphaBlendOperation)\n        );\n        lastTargetBlendState.colorBlendOperation = colorBlendOperation;\n        lastTargetBlendState.alphaBlendOperation = alphaBlendOperation;\n      }\n\n      // apply blend color.\n      const blendColor = this.blendColor;\n      if (!Color.equals(lastState.blendColor, blendColor)) {\n        gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendColor.a);\n        blendColor.cloneTo(lastState.blendColor);\n      }\n    }\n\n    // apply color mask.\n    if (colorWriteMask !== lastTargetBlendState.colorWriteMask) {\n      gl.colorMask(\n        (colorWriteMask & ColorWriteMask.Red) !== 0,\n        (colorWriteMask & ColorWriteMask.Green) !== 0,\n        (colorWriteMask & ColorWriteMask.Blue) !== 0,\n        (colorWriteMask & ColorWriteMask.Alpha) !== 0\n      );\n      lastTargetBlendState.colorWriteMask = colorWriteMask;\n    }\n\n    // apply alpha to coverage.\n    const alphaToCoverage = this.alphaToCoverage;\n    if (alphaToCoverage !== lastState.alphaToCoverage) {\n      if (alphaToCoverage) {\n        gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      } else {\n        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n      }\n      lastState.alphaToCoverage = alphaToCoverage;\n    }\n  }\n}\n","/**\n * Depth/Stencil comparison function.\n * @remarks Specifies a function that compares incoming pixel depth/stencil to the current depth/stencil buffer value.\n */\nexport enum CompareFunction {\n  /** never pass. */\n  Never,\n  /** pass if the incoming value is less than the depth/stencil buffer value. */\n  Less,\n  /** pass if the incoming value equals the depth/stencil buffer value. */\n  Equal,\n  /** pass if the incoming value is less than or equal to the depth/stencil buffer value. */\n  LessEqual,\n  /** pass if the incoming value is greater than the depth/stencil buffer value. */\n  Greater,\n  /** pass if the incoming value is not equal to the depth/stencil buffer value. */\n  NotEqual,\n  /** pass if the incoming value is greater than or equal to the depth/stencil buffer value. */\n  GreaterEqual,\n  /** always pass. */\n  Always\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Depth state.\n */\nexport class DepthState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  /** Whether to enable the depth test. */\n  enabled: boolean = true;\n  /** Whether the depth value can be written.*/\n  writeEnabled: boolean = true;\n  /** Depth comparison function. */\n  compareFunction: CompareFunction = CompareFunction.Less;\n\n  /**\n   * @internal\n   * Apply the current depth state by comparing with the last depth state.\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.depthState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: DepthState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { enabled, compareFunction, writeEnabled } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.DEPTH_TEST);\n      } else {\n        gl.disable(gl.DEPTH_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply compare func.\n      if (compareFunction != lastState.compareFunction) {\n        gl.depthFunc(DepthState._getGLCompareFunction(rhi, compareFunction));\n        lastState.compareFunction = compareFunction;\n      }\n\n      // apply write enabled.\n      if (writeEnabled != lastState.writeEnabled) {\n        gl.depthMask(writeEnabled);\n        lastState.writeEnabled = writeEnabled;\n      }\n    }\n  }\n}\n","/**\n * Culling mode.\n * @remarks specifies whether or not front- and/or back-facing polygons can be culled.\n */\nexport enum CullMode {\n  /** Disable culling. */\n  Off,\n  /** cut the front-face of the polygons. */\n  Front,\n  /** cut the back-face of the polygons. */\n  Back\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CullMode } from \"../enums/CullMode\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Raster state.\n */\nexport class RasterState {\n  /** Specifies whether or not front- and/or back-facing polygons can be culled. */\n  cullMode: CullMode = CullMode.Back;\n  /** The multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. */\n  depthBias: number = 0;\n  /** The scale factor for the variable depth offset for each polygon. */\n  slopeScaledDepthBias: number = 0;\n\n  /** @internal */\n  _cullFaceEnable: boolean = true;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.rasterState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: RasterState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const { cullMode, depthBias, slopeScaledDepthBias } = this;\n\n    const cullFaceEnable = cullMode !== CullMode.Off;\n    if (cullFaceEnable !== lastState._cullFaceEnable) {\n      if (cullFaceEnable) {\n        gl.enable(gl.CULL_FACE);\n      } else {\n        gl.disable(gl.CULL_FACE);\n      }\n      lastState._cullFaceEnable = cullFaceEnable;\n    }\n\n    // apply front face.\n    if (cullFaceEnable) {\n      if (cullMode !== lastState.cullMode) {\n        if (cullMode == CullMode.Back) {\n          gl.cullFace(gl.BACK);\n        } else {\n          gl.cullFace(gl.FRONT);\n        }\n        lastState.cullMode = cullMode;\n      }\n    }\n\n    // apply polygonOffset.\n    if (depthBias !== lastState.depthBias || slopeScaledDepthBias !== lastState.slopeScaledDepthBias) {\n      if (depthBias !== 0 || slopeScaledDepthBias !== 0) {\n        gl.enable(gl.POLYGON_OFFSET_FILL);\n        gl.polygonOffset(slopeScaledDepthBias, depthBias);\n      } else {\n        gl.disable(gl.POLYGON_OFFSET_FILL);\n      }\n      lastState.depthBias = depthBias;\n      lastState.slopeScaledDepthBias = slopeScaledDepthBias;\n    }\n  }\n}\n","/**\n * Stencil operation mode.\n * @remarks sets the front and/or back-facing stencil test actions.\n */\nexport enum StencilOperation {\n  /** Keeps the current value. */\n  Keep,\n  /** Sets the stencil buffer value to 0. */\n  Zero,\n  /** Sets the stencil buffer value to the reference value. */\n  Replace,\n  /** Increments the current stencil buffer value. Clamps to the maximum representable unsigned value. */\n  IncrementSaturate,\n  /** Decrements the current stencil buffer value. Clamps to 0. */\n  DecrementSaturate,\n  /** Inverts the current stencil buffer value bitwise. */\n  Invert,\n  /** Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value. */\n  IncrementWrap,\n  /** Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of 0. */\n  DecrementWrap\n}\n","import { IHardwareRenderer } from \"../../renderingHardwareInterface/IHardwareRenderer\";\nimport { CompareFunction } from \"../enums/CompareFunction\";\nimport { StencilOperation } from \"../enums/StencilOperation\";\nimport { RenderState } from \"./RenderState\";\n\n/**\n * Stencil state.\n */\nexport class StencilState {\n  private static _getGLCompareFunction(rhi: IHardwareRenderer, compareFunction: CompareFunction): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case CompareFunction.Never:\n        return gl.NEVER;\n      case CompareFunction.Less:\n        return gl.LESS;\n      case CompareFunction.Equal:\n        return gl.EQUAL;\n      case CompareFunction.LessEqual:\n        return gl.LEQUAL;\n      case CompareFunction.Greater:\n        return gl.GREATER;\n      case CompareFunction.NotEqual:\n        return gl.NOTEQUAL;\n      case CompareFunction.GreaterEqual:\n        return gl.GEQUAL;\n      case CompareFunction.Always:\n        return gl.ALWAYS;\n    }\n  }\n\n  private static _getGLStencilOperation(rhi: IHardwareRenderer, compareFunction: StencilOperation): number {\n    const gl = rhi.gl;\n\n    switch (compareFunction) {\n      case StencilOperation.Keep:\n        return gl.KEEP;\n      case StencilOperation.Zero:\n        return gl.ZERO;\n      case StencilOperation.Replace:\n        return gl.REPLACE;\n      case StencilOperation.IncrementSaturate:\n        return gl.INCR;\n      case StencilOperation.DecrementSaturate:\n        return gl.DECR;\n      case StencilOperation.Invert:\n        return gl.INVERT;\n      case StencilOperation.IncrementWrap:\n        return gl.INCR_WRAP;\n      case StencilOperation.DecrementWrap:\n        return gl.DECR_WRAP;\n    }\n  }\n\n  /** Whether to enable stencil test. */\n  enabled: boolean = false;\n  /** Write the reference value of the stencil buffer. */\n  referenceValue: number = 0;\n  /** Specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. */\n  mask: number = 0xff;\n  /** Specifying a bit mask to enable or disable writing of individual bits in the stencil planes. */\n  writeMask: number = 0xff;\n  /** The comparison function of the reference value of the front face of the geometry and the current buffer storage value. */\n  compareFunctionFront: CompareFunction = CompareFunction.Always;\n  /** The comparison function of the reference value of the back of the geometry and the current buffer storage value. */\n  compareFunctionBack: CompareFunction = CompareFunction.Always;\n  /** specifying the function to use for front face when both the stencil test and the depth test pass. */\n  passOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when both the stencil test and the depth test pass. */\n  passOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test fails. */\n  failOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test fails. */\n  failOperationBack: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for front face when the stencil test passes, but the depth test fails. */\n  zFailOperationFront: StencilOperation = StencilOperation.Keep;\n  /** specifying the function to use for back face when the stencil test passes, but the depth test fails. */\n  zFailOperationBack: StencilOperation = StencilOperation.Keep;\n\n  /**\n   * @internal\n   */\n  _apply(hardwareRenderer: IHardwareRenderer, lastRenderState: RenderState): void {\n    this._platformApply(hardwareRenderer, lastRenderState.stencilState);\n  }\n\n  private _platformApply(rhi: IHardwareRenderer, lastState: StencilState): void {\n    const gl = <WebGLRenderingContext>rhi.gl;\n    const {\n      enabled,\n      referenceValue,\n      mask,\n      compareFunctionFront,\n      compareFunctionBack,\n      failOperationFront,\n      zFailOperationFront,\n      passOperationFront,\n      failOperationBack,\n      zFailOperationBack,\n      passOperationBack,\n      writeMask\n    } = this;\n\n    if (enabled != lastState.enabled) {\n      if (enabled) {\n        gl.enable(gl.STENCIL_TEST);\n      } else {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      lastState.enabled = enabled;\n    }\n\n    if (enabled) {\n      // apply stencil func.\n      const referenceOrMaskChange = referenceValue !== lastState.referenceValue || mask !== lastState.mask;\n      if (referenceOrMaskChange || compareFunctionFront !== lastState.compareFunctionFront) {\n        gl.stencilFuncSeparate(\n          gl.FRONT,\n          StencilState._getGLCompareFunction(rhi, compareFunctionFront),\n          referenceValue,\n          mask\n        );\n        lastState.compareFunctionFront = compareFunctionFront;\n      }\n\n      if (referenceOrMaskChange || compareFunctionBack !== lastState.compareFunctionBack) {\n        gl.stencilFuncSeparate(gl.BACK, StencilState._getGLCompareFunction(rhi, compareFunctionBack), referenceValue, mask);\n        lastState.compareFunctionBack = this.compareFunctionBack;\n      }\n      if (referenceOrMaskChange) {\n        lastState.referenceValue = this.referenceValue;\n        lastState.mask = this.mask;\n      }\n\n      // apply stencil operation.\n      if (\n        failOperationFront !== lastState.failOperationFront ||\n        zFailOperationFront !== lastState.zFailOperationFront ||\n        passOperationFront !== lastState.passOperationFront\n      ) {\n        gl.stencilOpSeparate(\n          gl.FRONT,\n          StencilState._getGLStencilOperation(rhi, failOperationFront),\n          StencilState._getGLStencilOperation(rhi, zFailOperationFront),\n          StencilState._getGLStencilOperation(rhi, passOperationFront)\n        );\n        lastState.failOperationFront = failOperationFront;\n        lastState.zFailOperationFront = zFailOperationFront;\n        lastState.passOperationFront = passOperationFront;\n      }\n\n      if (\n        failOperationBack !== lastState.failOperationBack ||\n        zFailOperationBack !== lastState.zFailOperationBack ||\n        passOperationBack !== lastState.passOperationBack\n      ) {\n        gl.stencilOpSeparate(\n          gl.BACK,\n          StencilState._getGLStencilOperation(rhi, failOperationBack),\n          StencilState._getGLStencilOperation(rhi, zFailOperationBack),\n          StencilState._getGLStencilOperation(rhi, passOperationBack)\n        );\n        lastState.failOperationBack = failOperationBack;\n        lastState.zFailOperationBack = zFailOperationBack;\n        lastState.passOperationBack = passOperationBack;\n      }\n\n      // apply write mask.\n      if (writeMask !== lastState.writeMask) {\n        gl.stencilMask(writeMask);\n        lastState.writeMask = writeMask;\n      }\n    }\n  }\n}\n","import { Engine } from \"../../Engine\";\nimport { BlendState } from \"./BlendState\";\nimport { DepthState } from \"./DepthState\";\nimport { RasterState } from \"./RasterState\";\nimport { StencilState } from \"./StencilState\";\n\n/**\n * Render state.\n */\nexport class RenderState {\n  /** Blend state. */\n  readonly blendState: BlendState = new BlendState();\n  /** Depth state. */\n  readonly depthState: DepthState = new DepthState();\n  /** Stencil state. */\n  readonly stencilState: StencilState = new StencilState();\n  /** Raster state. */\n  readonly rasterState: RasterState = new RasterState();\n\n  /** @internal */\n  _apply(engine: Engine): void {\n    const hardwareRenderer = engine._hardwareRenderer;\n    const lastRenderState = engine._lastRenderState;\n    this.blendState._apply(hardwareRenderer, lastRenderState);\n    this.depthState._apply(hardwareRenderer, lastRenderState);\n    this.stencilState._apply(hardwareRenderer, lastRenderState);\n    this.rasterState._apply(hardwareRenderer, lastRenderState);\n  }\n}\n","import { IClone } from \"@oasis-engine/design\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { CloneManager } from \"../clone/CloneManager\";\nimport { Engine } from \"../Engine\";\nimport { RenderElement } from \"../RenderPipeline/RenderElement\";\nimport { ShaderDataGroup } from \"../shader/enums/ShaderDataGroup\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderState } from \"../shader/state/RenderState\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\n\n/**\n * Material.\n */\nexport class Material extends RefObject implements IClone {\n  /** Name. */\n  name: string;\n  /** Shader used by the material. */\n  shader: Shader;\n  /** Render queue type. */\n  renderQueueType: RenderQueueType = RenderQueueType.Opaque;\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Material);\n  /** Render state. */\n  readonly renderState: RenderState = new RenderState(); // todo: later will as a part of shaderData when shader effect frame is OK, that is more powerful and flexible.\n\n  /**\n   * Create a material instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine);\n    this.shader = shader;\n  }\n\n  /**\n   * Clone and return the instance.\n   */\n  clone(): Material {\n    const dest = new Material(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: Material): void {\n    target.shader = this.shader;\n    target.renderQueueType = this.renderQueueType;\n    this.shaderData.cloneTo(target.shaderData);\n    CloneManager.deepCloneObject(this.renderState, target.renderState);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    this.shaderData._addRefCount(value);\n  }\n\n  /**\n   * @internal\n   * @todo:temporary solution\n   */\n  _preRender(renderElement: RenderElement) {}\n\n  /**\n   * @override\n   */\n  protected _onDestroy(): void {}\n}\n","/**\n * Class pool utils.\n */\nexport class ClassPool<T> {\n  private _elementPoolIndex: number = 0;\n  private _elementPool: T[] = [];\n  private _type: new () => T;\n\n  constructor(type: new () => T) {\n    this._type = type;\n  }\n\n  /**\n   * Get element from pool.\n   */\n  getFromPool(): T {\n    const { _elementPoolIndex: index, _elementPool: pool } = this;\n    this._elementPoolIndex++;\n    if (pool.length === index) {\n      const element = new this._type();\n      pool.push(element);\n      return element;\n    } else {\n      return pool[index];\n    }\n  }\n\n  /**\n   * Reset pool.\n   */\n  resetPool(): void {\n    this._elementPoolIndex = 0;\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\n\n/**\n * Rendering context.\n */\nexport class RenderContext {\n  /** @internal */\n  _camera: Camera;\n  /** @internal */\n  _viewProjectMatrix: Matrix = new Matrix();\n\n  /**\n   * @internal\n   */\n  _setContext(camera: Camera): void {\n    this._camera = camera;\n    Matrix.multiply(camera.projectionMatrix, camera.viewMatrix, this._viewProjectMatrix);\n  }\n}\n","import { Mesh } from \"../graphic/Mesh\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\n\n/**\n * Render element.\n */\nexport class RenderElement {\n  /** Render component. */\n  component: Renderer;\n  /** Mesh. */\n  mesh: Mesh;\n  /** Sub mesh. */\n  subMesh: SubMesh;\n  /** Material. */\n  material: Material;\n\n  setValue(component: Renderer, mesh: Mesh, subMesh: SubMesh, material: Material): void {\n    this.component = component;\n    this.mesh = mesh;\n    this.subMesh = subMesh;\n    this.material = material;\n  }\n}\n","import { Color, Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Material } from \"../material/Material\";\nimport { Renderer } from \"../Renderer\";\n\nexport class SpriteElement {\n  component: Renderer;\n  positions: Vector3[];\n  uv: Vector2[];\n  triangles: number[];\n  color: Color;\n  material: Material;\n  camera: Camera;\n\n  setValue(\n    component: Renderer,\n    positions: Vector3[],\n    uv: Vector2[],\n    triangles: number[],\n    color: Color,\n    material: Material,\n    camera: Camera\n  ): void {\n    this.component = component;\n    this.positions = positions;\n    this.uv = uv;\n    this.triangles = triangles;\n    this.color = color;\n    this.material = material;\n    this.camera = camera;\n  }\n}\n","import { Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Material } from \"../material/Material\";\n\nexport class SpriteMaskElement {\n  component: Component;\n  positions: Vector3[];\n  uv: Vector2[];\n  triangles: number[];\n  material: Material;\n  isAdd: boolean = true;\n  camera: Camera;\n\n  setValue(component: Component, positions: Vector3[], uv: Vector2[], triangles: number[], material: Material): void {\n    this.component = component;\n    this.positions = positions;\n    this.uv = uv;\n    this.triangles = triangles;\n    this.material = material;\n  }\n}\n","/**\n * Sprite mask interaction.\n */\nexport enum SpriteMaskInteraction {\n  /** The sprite will not interact with the masking system. */\n  None,\n  /** The sprite will be visible only in areas where a mask is present. */\n  VisibleInsideMask,\n  /** The sprite will be visible only in areas where no mask is present. */\n  VisibleOutsideMask\n}\n","import { BoundingBox, Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"./Camera\";\nimport { deepClone, ignoreClone, shallowClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { Entity } from \"./Entity\";\nimport { Material } from \"./material/Material\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { Shader } from \"./shader\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\n/**\n * Renderable component.\n */\nexport abstract class Renderer extends Component {\n  private static _localMatrixProperty = Shader.getPropertyByName(\"u_localMat\");\n  private static _worldMatrixProperty = Shader.getPropertyByName(\"u_modelMat\");\n  private static _mvMatrixProperty = Shader.getPropertyByName(\"u_MVMat\");\n  private static _mvpMatrixProperty = Shader.getPropertyByName(\"u_MVPMat\");\n  private static _mvInvMatrixProperty = Shader.getPropertyByName(\"u_MVInvMat\");\n  private static _normalMatrixProperty = Shader.getPropertyByName(\"u_normalMat\");\n\n  /** ShaderData related to renderer. */\n  @deepClone\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Renderer);\n  /** Whether it is clipped by the frustum, needs to be turned on camera.enableFrustumCulling. */\n  @ignoreClone\n  isCulled: boolean = false;\n\n  /** @internal */\n  @ignoreClone\n  _distanceForSort: number;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _rendererIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n\n  /** @internal temp solution. */\n  @ignoreClone\n  _renderSortId: number = 0;\n\n  @ignoreClone\n  protected _overrideUpdate: boolean = false;\n  @shallowClone\n  protected _materials: Material[] = [];\n\n  @ignoreClone\n  private _transformChangeFlag: UpdateFlag;\n  @deepClone\n  private _bounds: BoundingBox = new BoundingBox(new Vector3(), new Vector3());\n  @ignoreClone\n  private _mvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvpMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _mvInvMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _normalMatrix: Matrix = new Matrix();\n  @ignoreClone\n  private _materialsInstanced: boolean[] = [];\n\n  /**\n   * Material count.\n   */\n  get materialCount(): number {\n    return this._materials.length;\n  }\n\n  set materialCount(value: number) {\n    const materials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    materials.length !== value && (materials.length = value);\n    materialsInstanced.length > value && (materialsInstanced.length = value);\n  }\n\n  /**\n   * The bounding volume of the renderer.\n   */\n  get bounds(): BoundingBox {\n    const changeFlag = this._transformChangeFlag;\n    if (changeFlag.flag) {\n      this._updateBounds(this._bounds);\n      changeFlag.flag = false;\n    }\n    return this._bounds;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    const prototype = Renderer.prototype;\n    this._overrideUpdate = this.update !== prototype.update;\n    this._transformChangeFlag = this.entity.transform.registerWorldChangeFlag();\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * Get the first instance material.\n   * @returns The first instance material\n   */\n  getInstanceMaterial(): Material | null;\n\n  /**\n   * Get the first instance material by index.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @param index - Material index\n   * @returns Instance material\n   */\n  getInstanceMaterial(index: number): Material | null;\n\n  getInstanceMaterial(index: number = 0): Material | null {\n    const materials = this._materials;\n    if (materials.length > index) {\n      const material = materials[index];\n      if (material) {\n        if (this._materialsInstanced[index]) {\n          return material;\n        } else {\n          return this._createInstanceMaterial(material, index);\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the first material.\n   * @returns The first material\n   */\n  getMaterial(): Material | null;\n\n  /**\n   * Get the first material by index.\n   * @param index - Material index\n   * @returns Material\n   */\n  getMaterial(index: number): Material | null;\n\n  getMaterial(index: number = 0): Material | null {\n    return this._materials[index] || null;\n  }\n\n  /**\n   * Set the first material.\n   * @param material - The first material\n   */\n  setMaterial(material: Material): void;\n\n  /**\n   * Set material by index.\n   * @param index - Material index\n   * @param material - The material\n   */\n  setMaterial(index: number, material: Material): void;\n\n  setMaterial(indexOrMaterial: number | Material, material: Material = null): void {\n    let index;\n    if (typeof indexOrMaterial === \"number\") {\n      index = indexOrMaterial;\n    } else {\n      index = 0;\n      material = indexOrMaterial;\n    }\n\n    const materials = this._materials;\n    if (index >= materials.length) {\n      materials.length = index + 1;\n    }\n\n    const materialsInstance = this._materialsInstanced;\n    const internalMaterial = materials[index];\n    if (internalMaterial !== material) {\n      materials[index] = material;\n      index < materialsInstance.length && (materialsInstance[index] = false);\n      internalMaterial && internalMaterial._addRefCount(-1);\n      material && material._addRefCount(1);\n    }\n  }\n\n  /**\n   * Get all instance materials.\n   * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.\n   * @returns All instance materials\n   */\n  getInstanceMaterials(): Readonly<Material[]> {\n    const materials = this._materials;\n    const materialsInstance = this._materialsInstanced;\n    for (let i = 0, n = materials.length; i < n; i++) {\n      if (!materialsInstance[i]) {\n        this._createInstanceMaterial(this._materials[i], i);\n      }\n    }\n    return materials;\n  }\n\n  /**\n   * Get all materials.\n   * @returns All materials\n   */\n  getMaterials(): Readonly<Material[]> {\n    return this._materials;\n  }\n\n  /**\n   * Set all materials.\n   * @param materials - All materials\n   */\n  setMaterials(materials: Material[]): void {\n    const count = materials.length;\n    const internalMaterials = this._materials;\n    const materialsInstanced = this._materialsInstanced;\n\n    for (let i = count, n = internalMaterials.length; i < n; i++) {\n      const internalMaterial = internalMaterials[i];\n      internalMaterial && internalMaterial._addRefCount(-1);\n    }\n\n    internalMaterials.length !== count && (internalMaterials.length = count);\n    materialsInstanced.length !== 0 && (materialsInstanced.length = 0);\n\n    for (let i = 0; i < count; i++) {\n      const internalMaterial = internalMaterials[i];\n      const material = materials[i];\n      if (internalMaterial !== material) {\n        internalMaterials[i] = material;\n        internalMaterial && internalMaterial._addRefCount(-1);\n        material && material._addRefCount(1);\n      }\n    }\n  }\n\n  update(deltaTime: number): void {}\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext): void {\n    const shaderData = this.shaderData;\n    const worldMatrix = this.entity.transform.worldMatrix;\n    const mvMatrix = this._mvMatrix;\n    const mvpMatrix = this._mvpMatrix;\n    const mvInvMatrix = this._mvInvMatrix;\n    const normalMatrix = this._normalMatrix;\n\n    Matrix.multiply(context._camera.viewMatrix, worldMatrix, mvMatrix);\n    Matrix.multiply(context._viewProjectMatrix, worldMatrix, mvpMatrix);\n    Matrix.invert(mvMatrix, mvInvMatrix);\n    Matrix.invert(worldMatrix, normalMatrix);\n    normalMatrix.transpose();\n\n    shaderData.setMatrix(Renderer._localMatrixProperty, this.entity.transform.localMatrix);\n    shaderData.setMatrix(Renderer._worldMatrixProperty, worldMatrix);\n    shaderData.setMatrix(Renderer._mvMatrixProperty, mvMatrix);\n    shaderData.setMatrix(Renderer._mvpMatrixProperty, mvpMatrix);\n    shaderData.setMatrix(Renderer._mvInvMatrixProperty, mvInvMatrix);\n    shaderData.setMatrix(Renderer._normalMatrixProperty, normalMatrix);\n  }\n\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.addOnUpdateRenderers(this);\n    }\n    componentsManager.addRenderer(this);\n  }\n\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    if (this._overrideUpdate) {\n      componentsManager.removeOnUpdateRenderers(this);\n    }\n    componentsManager.removeRenderer(this);\n  }\n\n  /**\n   * @internal\n   */\n  abstract _render(camera: Camera): void;\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    const flag = this._transformChangeFlag;\n    if (flag) {\n      flag.destroy();\n      this._transformChangeFlag = null;\n    }\n\n    this.shaderData._addRefCount(-1);\n\n    for (let i = 0, n = this._materials.length; i < n; i++) {\n      this._materials[i]._addRefCount(-1);\n    }\n  }\n\n  protected _updateBounds(worldBounds: BoundingBox): void {}\n\n  private _createInstanceMaterial(material: Material, index: number): Material {\n    const insMaterial: Material = material.clone();\n    insMaterial.name = insMaterial.name + \"(Instance)\";\n    material._addRefCount(-1);\n    insMaterial._addRefCount(1);\n    this._materialsInstanced[index] = true;\n    this._materials[index] = insMaterial;\n    return insMaterial;\n  }\n}\n","/**\n * Sprite mask layer.\n */\nexport enum SpriteMaskLayer {\n  /** Mask layer 0. */\n  Layer0 = 0x1,\n  /** Mask layer 1. */\n  Layer1 = 0x2,\n  /** Mask layer 2. */\n  Layer2 = 0x4,\n  /** Mask layer 3. */\n  Layer3 = 0x8,\n  /** Mask layer 4. */\n  Layer4 = 0x10,\n  /** Mask layer 5. */\n  Layer5 = 0x20,\n  /** Mask layer 6. */\n  Layer6 = 0x40,\n  /** Mask layer 7. */\n  Layer7 = 0x80,\n  /** Mask layer 8. */\n  Layer8 = 0x100,\n  /** Mask layer 9. */\n  Layer9 = 0x200,\n  /** Mask layer 10. */\n  Layer10 = 0x400,\n  /** Mask layer 11. */\n  Layer11 = 0x800,\n  /** Mask layer 12. */\n  Layer12 = 0x1000,\n  /** Mask layer 13. */\n  Layer13 = 0x2000,\n  /** Mask layer 14. */\n  Layer14 = 0x4000,\n  /** Mask layer 15. */\n  Layer15 = 0x8000,\n  /** Mask layer 16. */\n  Layer16 = 0x10000,\n  /** Mask layer 17. */\n  Layer17 = 0x20000,\n  /** Mask layer 18. */\n  Layer18 = 0x40000,\n  /** Mask layer 19. */\n  Layer19 = 0x80000,\n  /** Mask layer 20. */\n  Layer20 = 0x100000,\n  /** Mask layer 21. */\n  Layer21 = 0x200000,\n  /** Mask layer 22. */\n  Layer22 = 0x400000,\n  /** Mask layer 23. */\n  Layer23 = 0x800000,\n  /** Mask layer 24. */\n  Layer24 = 0x1000000,\n  /** Mask layer 25. */\n  Layer25 = 0x2000000,\n  /** Mask layer 26. */\n  Layer26 = 0x4000000,\n  /** Mask layer 27. */\n  Layer27 = 0x8000000,\n  /** Mask layer 28. */\n  Layer28 = 0x10000000,\n  /** Mask layer 29. */\n  Layer29 = 0x20000000,\n  /** Mask layer 30. */\n  Layer30 = 0x40000000,\n  /** Mask layer 31. */\n  Layer31 = 0x80000000,\n  /** All mask layers. */\n  Everything = 0xffffffff\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../../Camera\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer } from \"../../Renderer\";\nimport { SpriteMaskElement } from \"../../RenderPipeline/SpriteMaskElement\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { UpdateFlag } from \"../../UpdateFlag\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * A component for masking Sprites.\n */\nexport class SpriteMask extends Renderer {\n  /** @internal */\n  static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskTexture\");\n  /** @internal */\n  static _alphaCutoffProperty: ShaderProperty = Shader.getPropertyByName(\"u_maskAlphaCutoff\");\n\n  private static _tempVec3: Vector3 = new Vector3();\n\n  /** @internal */\n  _maskElement: SpriteMaskElement;\n\n  @deepClone\n  private _positions: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n  @ignoreClone\n  private _isSpriteDirty: boolean = true;\n  @ignoreClone\n  private _worldMatrixDirtyFlag: UpdateFlag;\n  @assignmentClone\n  private _sprite: Sprite = null;\n  @assignmentClone\n  private _alphaCutoff: number = 0.5;\n\n  /** The mask layers the sprite mask influence to. */\n  @assignmentClone\n  influenceLayers: number = SpriteMaskLayer.Everything;\n\n  /**\n   * The Sprite used to define the mask.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite) {\n    if (this._sprite !== value) {\n      this._sprite = value;\n      this._isSpriteDirty = true;\n    }\n  }\n\n  /**\n   * The minimum alpha value used by the mask to select the area of influence defined over the mask's sprite. Value between 0 and 1.\n   */\n  get alphaCutoff(): number {\n    return this._alphaCutoff;\n  }\n\n  set alphaCutoff(value: number) {\n    if (this._alphaCutoff !== value) {\n      this._alphaCutoff = value;\n      this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, value);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._worldMatrixDirtyFlag = entity.transform.registerWorldChangeFlag();\n    this.setMaterial(this._engine._spriteMaskDefaultMaterial);\n    this.shaderData.setFloat(SpriteMask._alphaCutoffProperty, this._alphaCutoff);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy(): void {\n    this._worldMatrixDirtyFlag.destroy();\n    super._onDestroy();\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _render(camera: Camera): void {\n    const sprite = this.sprite;\n    if (!sprite) {\n      return null;\n    }\n    const texture = sprite.texture;\n    if (!texture) {\n      return null;\n    }\n\n    const positions = this._positions;\n    const transform = this.entity.transform;\n\n    // Update sprite data.\n    const localDirty = sprite._updateMeshData();\n\n    if (this._worldMatrixDirtyFlag.flag || localDirty || this._isSpriteDirty) {\n      const localPositions = sprite._positions;\n      const localVertexPos = SpriteMask._tempVec3;\n      const worldMatrix = transform.worldMatrix;\n\n      for (let i = 0, n = positions.length; i < n; i++) {\n        const curVertexPos = localPositions[i];\n        localVertexPos.setValue(curVertexPos.x, curVertexPos.y, 0);\n        Vector3.transformToVec3(localVertexPos, worldMatrix, positions[i]);\n      }\n\n      this._isSpriteDirty = false;\n      this._worldMatrixDirtyFlag.flag = false;\n    }\n\n    this.shaderData.setTexture(SpriteMask._textureProperty, texture);\n    const spriteMaskElementPool = this._engine._spriteMaskElementPool;\n    const maskElement = spriteMaskElementPool.getFromPool();\n    maskElement.setValue(this, positions, sprite._uv, sprite._triangles, this.getMaterial());\n    maskElement.camera = camera;\n\n    camera._renderPipeline._allSpriteMasks.add(this);\n    this._maskElement = maskElement;\n  }\n}\n","/**\n * Vertex element format.\n */\nexport enum VertexElementFormat {\n  /** 32-bit float */\n  Float,\n  /** Two-dimensional 32-bit float */\n  Vector2,\n  /** Three-dimensional 32-bit float */\n  Vector3,\n  /** Four-dimensional 32-bit float */\n  Vector4,\n  /** Four-dimensional 8-bit integer,range is [-128,127] */\n  Byte4,\n  /** Four-dimensional 8-bit Unsigned integer, range is [0,255] */\n  UByte4,\n  /** Four-dimensional 8-bit Normalized integer, range is [-1,1] */\n  NormalizedByte4,\n  /** Four-dimensional 8-bit Normalized unsigned integer, range is [0,1] */\n  NormalizedUByte4,\n  /** Two-dimensional 16-bit integer, range is[-32768, 32767] */\n  Short2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort2,\n  /** Two-dimensional 16-bit Unsigned integer, range is [-1, 1] */\n  NormalizedShort2,\n  /** Two-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort2,\n  /** Four-dimensional 16-bit integer, range is [-32768, 32767] */\n  Short4,\n  /** Four-dimensional 16-bit Unsigned integer, range is [0, 65535] */\n  UShort4,\n  /** Four-dimensional 16-bit Normalized integer, range is[-1, 1] */\n  NormalizedShort4,\n  /** Four-dimensional 16-bit Normalized unsigned integer, range is [0, 1] */\n  NormalizedUShort4\n}\n","/**\n * Buffer usage.\n */\nexport enum BufferUsage {\n  /** The buffer content are intended to be specified once, and used many times */\n  Static,\n  /** The buffer contents are intended to be respecified repeatedly, and used many times */\n  Dynamic,\n  /** The buffer contents are intended to be specified once, and used at most a few times */\n  Stream\n}\n","/**\n * Index format.\n */\nexport enum IndexFormat {\n  /** 8 bit */\n  UInt8,\n  /** 16 bit */\n  UInt16,\n  /** 32 bit */\n  UInt32\n}\n","import { BufferUsage } from \"./enums/BufferUsage\";\nimport { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { DataType } from \"../base/Constant\";\nimport { IndexFormat } from \"./enums/IndexFormat\";\n\nexport interface ElementInfo {\n  size: number;\n  type: DataType;\n  normalized: boolean;\n}\n\nexport class BufferUtil {\n  /**\n   * @internal\n   */\n  static _getGLBufferUsage(gl: WebGLRenderingContext, bufferUsage: BufferUsage): number {\n    switch (bufferUsage) {\n      case BufferUsage.Static:\n        return gl.STATIC_DRAW;\n      case BufferUsage.Dynamic:\n        return gl.DYNAMIC_DRAW;\n      case BufferUsage.Stream:\n        return gl.STREAM_DRAW;\n    }\n  }\n\n  static _getGLIndexType(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return DataType.UNSIGNED_BYTE;\n      case IndexFormat.UInt16:\n        return DataType.UNSIGNED_SHORT;\n      case IndexFormat.UInt32:\n        return DataType.UNSIGNED_INT;\n    }\n  }\n\n  static _getGLIndexByteCount(indexFormat: IndexFormat): DataType {\n    switch (indexFormat) {\n      case IndexFormat.UInt8:\n        return 1;\n      case IndexFormat.UInt16:\n        return 2;\n      case IndexFormat.UInt32:\n        return 4;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _getElementInfo(format: VertexElementFormat): ElementInfo {\n    let size: number;\n    let type: DataType;\n    let normalized: boolean = false;\n\n    switch (format) {\n      case VertexElementFormat.Float:\n        size = 1;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector2:\n        size = 2;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector3:\n        size = 3;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Vector4:\n        size = 4;\n        type = DataType.FLOAT;\n        break;\n      case VertexElementFormat.Byte4:\n        size = 4;\n        type = DataType.BYTE;\n        break;\n      case VertexElementFormat.UByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        break;\n      case VertexElementFormat.NormalizedByte4:\n        size = 4;\n        type = DataType.BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUByte4:\n        size = 4;\n        type = DataType.UNSIGNED_BYTE;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short2:\n        size = 2;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort2:\n        size = 2;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort2:\n        size = 2;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.Short4:\n        size = 4;\n        type = DataType.SHORT;\n        break;\n      case VertexElementFormat.UShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        break;\n      case VertexElementFormat.NormalizedShort4:\n        size = 4;\n        type = DataType.SHORT;\n        normalized = true;\n        break;\n      case VertexElementFormat.NormalizedUShort4:\n        size = 4;\n        type = DataType.UNSIGNED_SHORT;\n        normalized = true;\n        break;\n      default:\n        break;\n    }\n    return { size, type, normalized };\n  }\n}\n","import { VertexElementFormat } from \"./enums/VertexElementFormat\";\nimport { ElementInfo, BufferUtil } from \"./BufferUtil\";\n\n/**\n * Vertex element.\n */\nexport class VertexElement {\n  _glElementInfo: ElementInfo;\n\n  private _semantic: string;\n  private _offset: number;\n  private _format: VertexElementFormat;\n  private _bindingIndex: number;\n  private _instanceStepRate: number;\n\n  /**\n   * Vertex semantic.\n   */\n  get semantic(): string {\n    return this._semantic;\n  }\n\n  /**\n   * Vertex data byte offset.\n   */\n  get offset(): number {\n    return this._offset;\n  }\n\n  /**\n   * Vertex data format.\n   */\n  get format(): VertexElementFormat {\n    return this._format;\n  }\n\n  /**\n   * Vertex buffer binding index.\n   */\n  get bindingIndex(): number {\n    return this._bindingIndex;\n  }\n\n  /**\n   * Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  get instanceStepRate(): number {\n    return this._instanceStepRate;\n  }\n\n  /**\n   * Create vertex element.\n   * @param semantic - Input vertex semantic\n   * @param offset - Vertex data byte offset\n   * @param format - Vertex data format\n   * @param bindingIndex - Vertex buffer binding index\n   * @param instanceStepRate - Instance cadence, the number of instances drawn for each vertex in the buffer, non-instance elements must be 0.\n   */\n  constructor(\n    semantic: string,\n    offset: number,\n    format: VertexElementFormat,\n    bindingIndex: number,\n    instanceStepRate: number = 0\n  ) {\n    this._semantic = semantic;\n    this._offset = offset;\n    this._format = format;\n    this._bindingIndex = bindingIndex;\n    this._glElementInfo = BufferUtil._getElementInfo(this.format);\n    this._instanceStepRate = Math.floor(instanceStepRate);\n  }\n}\n","/**\n * Buffer binding flag.\n */\nexport enum BufferBindFlag {\n  /** Vertex buffer binding flag */\n  VertexBuffer,\n  /** Index buffer binding flag */\n  IndexBuffer\n}\n","/**\n * Define update strategy when call bufferData/bufferSubData func.\n */\nexport enum SetDataOptions {\n  /** Can overwrite part of used buffer data and ensure correct rendering */\n  None,\n  /** Discard old buffer and create a new buffer, and won't affect the previous rendering */\n  Discard\n  ///** Need to ensure that the buffer data will not be overwritten, and won't interrupting rendering if setData immediately */\n  //NoOverwrite\n}\n","import { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { IHardwareRenderer } from \"../renderingHardwareInterface/IHardwareRenderer\";\nimport { BufferUtil } from \"./BufferUtil\";\nimport { BufferBindFlag } from \"./enums/BufferBindFlag\";\nimport { BufferUsage } from \"./enums/BufferUsage\";\nimport { SetDataOptions } from \"./enums/SetDataOptions\";\n\n/**\n * Buffer.\n */\nexport class Buffer extends RefObject {\n  _glBindTarget: number;\n  _glBufferUsage: number;\n  _nativeBuffer: WebGLBuffer;\n\n  private _hardwareRenderer: IHardwareRenderer;\n  private _type: BufferBindFlag;\n  private _byteLength: number;\n  private _bufferUsage: BufferUsage;\n\n  /**\n   * Buffer binding flag.\n   */\n  get type(): BufferBindFlag {\n    return this._type;\n  }\n\n  /**\n   * Byte length.\n   */\n  get byteLength(): number {\n    return this._byteLength;\n  }\n\n  /**\n   * Buffer usage.\n   */\n  get bufferUsage(): BufferUsage {\n    return this._bufferUsage;\n  }\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param byteLength - Byte length\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, byteLength: number, bufferUsage?: BufferUsage);\n\n  /**\n   * Create Buffer.\n   * @param engine - Engine\n   * @param type - Buffer binding flag\n   * @param data - Byte\n   * @param bufferUsage - Buffer usage\n   */\n  constructor(engine: Engine, type: BufferBindFlag, data: ArrayBuffer | ArrayBufferView, bufferUsage?: BufferUsage);\n\n  constructor(\n    engine: Engine,\n    type: BufferBindFlag,\n    byteLengthOrData: number | ArrayBuffer | ArrayBufferView,\n    bufferUsage: BufferUsage = BufferUsage.Static\n  ) {\n    super(engine);\n    this._engine = engine;\n    this._type = type;\n    this._bufferUsage = bufferUsage;\n\n    const hardwareRenderer = engine._hardwareRenderer;\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = hardwareRenderer.gl;\n    const glBufferUsage = BufferUtil._getGLBufferUsage(gl, bufferUsage);\n    const glBindTarget = type === BufferBindFlag.VertexBuffer ? gl.ARRAY_BUFFER : gl.ELEMENT_ARRAY_BUFFER;\n\n    this._nativeBuffer = gl.createBuffer();\n    this._hardwareRenderer = hardwareRenderer;\n    this._glBufferUsage = glBufferUsage;\n    this._glBindTarget = glBindTarget;\n\n    this.bind();\n    if (typeof byteLengthOrData === \"number\") {\n      this._byteLength = byteLengthOrData;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    } else {\n      this._byteLength = byteLengthOrData.byteLength;\n      gl.bufferData(glBindTarget, byteLengthOrData, glBufferUsage);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Bind buffer.\n   */\n  bind(): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bindBuffer(this._glBindTarget, this._nativeBuffer);\n  }\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   */\n  setData(data: ArrayBuffer | ArrayBufferView): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - buffer byte offset\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   */\n  setData(data: ArrayBuffer | ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength?: number): void;\n\n  /**\n   * Set buffer data.\n   * @param data - Input buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Buffer byte offset\n   * @param dataLength - Data length\n   * @param options - Update strategy: None/Discard/NoOverwrite\n   */\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number,\n    dataOffset: number,\n    dataLength: number,\n    options: SetDataOptions\n  ): void;\n\n  setData(\n    data: ArrayBuffer | ArrayBufferView,\n    bufferByteOffset: number = 0,\n    dataOffset: number = 0,\n    dataLength?: number,\n    options: SetDataOptions = SetDataOptions.None\n  ): void {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n    const glBindTarget: number = this._glBindTarget;\n    this.bind();\n\n    if (options === SetDataOptions.Discard) {\n      gl.bufferData(glBindTarget, this._byteLength, this._glBufferUsage);\n    }\n\n    // TypeArray is BYTES_PER_ELEMENT, unTypeArray is 1\n    const byteSize = (<Uint8Array>data).BYTES_PER_ELEMENT || 1;\n    const dataByteLength = dataLength ? byteSize * dataLength : data.byteLength;\n\n    if (dataOffset !== 0 || dataByteLength < data.byteLength) {\n      const isArrayBufferView = (<ArrayBufferView>data).byteOffset !== undefined;\n      if (isWebGL2 && isArrayBufferView) {\n        gl.bufferSubData(glBindTarget, bufferByteOffset, <ArrayBufferView>data, dataOffset, dataByteLength / byteSize);\n      } else {\n        const subData = new Uint8Array(\n          isArrayBufferView ? (<ArrayBufferView>data).buffer : <ArrayBuffer>data,\n          dataOffset * byteSize,\n          dataByteLength\n        );\n        gl.bufferSubData(glBindTarget, bufferByteOffset, subData);\n      }\n    } else {\n      gl.bufferSubData(glBindTarget, bufferByteOffset, data);\n    }\n    gl.bindBuffer(glBindTarget, null);\n  }\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   */\n  getData(data: ArrayBufferView): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number): void;\n\n  /**\n   * Get buffer data.\n   * @param data - Output buffer data\n   * @param bufferByteOffset - Buffer byte offset\n   * @param dataOffset - Output data offset\n   * @param dataLength - Output data length\n   */\n  getData(data: ArrayBufferView, bufferByteOffset: number, dataOffset: number, dataLength: number): void;\n\n  getData(data: ArrayBufferView, bufferByteOffset: number = 0, dataOffset: number = 0, dataLength?: number): void {\n    const isWebGL2: boolean = this._hardwareRenderer.isWebGL2;\n\n    if (isWebGL2) {\n      const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n      this.bind();\n      gl.getBufferSubData(this._glBindTarget, bufferByteOffset, data, dataOffset, dataLength);\n    } else {\n      throw \"Buffer is write-only on WebGL1.0 platforms.\";\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy() {\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.deleteBuffer(this._nativeBuffer);\n    this._nativeBuffer = null;\n    this._hardwareRenderer = null;\n  }\n\n  /**\n   * @deprecated\n   */\n  resize(dataLength: number) {\n    this.bind();\n    const gl: WebGLRenderingContext & WebGL2RenderingContext = this._hardwareRenderer.gl;\n    gl.bufferData(this._glBindTarget, dataLength, this._glBufferUsage);\n    this._byteLength = dataLength;\n  }\n}\n","/**\n * Mesh topology.\n */\nexport enum MeshTopology {\n  /** Draws a single dot */\n  Points = 0,\n  /** Draws a line between a pair of vertices */\n  Lines = 1,\n  /** Draws a straight line to the next vertex, and connects the last vertex back to the first */\n  LineLoop = 2,\n  /** Draws a straight line to the next vertex. */\n  LineStrip = 3,\n  /** Draws a triangle for a group of three vertices */\n  Triangles = 4,\n  /** Draws a triangle strip */\n  TriangleStrip = 5,\n  /** Draws a triangle fan */\n  TriangleFan = 6\n}\n","import { IndexFormat } from \"./enums/IndexFormat\";\nimport { Buffer } from \"./Buffer\";\n\n/**\n * Index buffer binding.\n */\nexport class IndexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _format: IndexFormat;\n\n  /**\n   * Index buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Index buffer format.\n   */\n  get format(): IndexFormat {\n    return this._format;\n  }\n\n  /**\n   * Create index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  constructor(buffer: Buffer, format: IndexFormat) {\n    this._buffer = buffer;\n    this._format = format;\n  }\n}\n","import { MeshTopology } from \"./enums/MeshTopology\";\n\n/**\n * Sub-mesh, mainly contains drawing information.\n */\nexport class SubMesh {\n  /** Start drawing offset. */\n  start: number;\n  /** Drawing count. */\n  count: number;\n  /** Drawing topology. */\n  topology: MeshTopology;\n\n  /**\n   * Create a sub-mesh.\n   * @param start - Start drawing offset\n   * @param count - Drawing count\n   * @param topology - Drawing topology\n   */\n  constructor(start: number = 0, count: number = 0, topology: MeshTopology = MeshTopology.Triangles) {\n    this.start = start;\n    this.count = count;\n    this.topology = topology;\n  }\n}\n","import { IPlatformPrimitive } from \"@oasis-engine/design/types/renderingHardwareInterface/IPlatformPrimitive\";\nimport { BoundingBox } from \"@oasis-engine/math\";\nimport { RefObject } from \"../asset/RefObject\";\nimport { Engine } from \"../Engine\";\nimport { BufferUtil } from \"../graphic/BufferUtil\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { IndexBufferBinding } from \"../graphic/IndexBufferBinding\";\nimport { SubMesh } from \"../graphic/SubMesh\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { ShaderProgram } from \"../shader/ShaderProgram\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\n\n/**\n * Mesh.\n */\nexport abstract class Mesh extends RefObject {\n  /** Name. */\n  name: string;\n  /** The bounding volume of the mesh. */\n  readonly bounds: BoundingBox = new BoundingBox();\n\n  _vertexElementMap: Record<string, VertexElement> = {};\n  _glIndexType: number;\n  _glIndexByteCount: number;\n  _platformPrimitive: IPlatformPrimitive;\n\n  /** @internal */\n  _instanceCount: number = 0;\n  /** @internal */\n  _vertexBufferBindings: VertexBufferBinding[] = [];\n  /** @internal */\n  _indexBufferBinding: IndexBufferBinding = null;\n  /** @internal */\n  _vertexElements: VertexElement[] = [];\n\n  private _subMeshes: SubMesh[] = [];\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * First sub-mesh. Rendered using the first material.\n   */\n  get subMesh(): SubMesh | null {\n    return this._subMeshes[0] || null;\n  }\n\n  /**\n   * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.\n   */\n  get subMeshes(): Readonly<SubMesh[]> {\n    return this._subMeshes;\n  }\n\n  /**\n   * Create mesh.\n   * @param engine - Engine\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n    this._platformPrimitive = this._engine._hardwareRenderer.createPlatformPrimitive(this);\n  }\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param subMesh - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @returns Sub-mesh\n   */\n  addSubMesh(subMesh: SubMesh): SubMesh;\n\n  /**\n   * Add sub-mesh, each sub-mesh can correspond to an independent material.\n   * @param start - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer\n   * @param count - Drawing count, if the index buffer is set, it means the count in the index buffer, if not set, it means the count in the vertex buffer\n   * @param topology - Drawing topology, default is MeshTopology.Triangles\n   * @returns Sub-mesh\n   */\n  addSubMesh(start: number, count: number, topology?: MeshTopology): SubMesh;\n\n  addSubMesh(\n    startOrSubMesh: number | SubMesh,\n    count?: number,\n    topology: MeshTopology = MeshTopology.Triangles\n  ): SubMesh {\n    if (typeof startOrSubMesh === \"number\") {\n      startOrSubMesh = new SubMesh(startOrSubMesh, count, topology);\n    }\n    this._subMeshes.push(startOrSubMesh);\n    return startOrSubMesh;\n  }\n\n  /**\n   * Remove sub-mesh.\n   * @param subMesh - Sub-mesh needs to be removed\n   */\n  removeSubMesh(subMesh: SubMesh): void {\n    const subMeshes = this._subMeshes;\n    const index = subMeshes.indexOf(subMesh);\n    if (index !== -1) {\n      subMeshes.splice(index, 1);\n    }\n  }\n\n  /**\n   * Clear all sub-mesh.\n   */\n  clearSubMesh(): void {\n    this._subMeshes.length = 0;\n  }\n\n  /**\n   * Register update flag, update flag will be true if the vertex element changes.\n   * @returns Update flag\n   */\n  registerUpdateFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  /**\n   * @internal\n   */\n  _draw(shaderProgram: ShaderProgram, subMesh: SubMesh): void {\n    this._platformPrimitive.draw(shaderProgram, subMesh);\n  }\n\n  /**\n   * @override\n   */\n  _addRefCount(value: number): void {\n    super._addRefCount(value);\n    const vertexBufferBindings = this._vertexBufferBindings;\n    for (let i = 0, n = vertexBufferBindings.length; i < n; i++) {\n      vertexBufferBindings[i]._buffer._addRefCount(value);\n    }\n  }\n\n  /**\n   * @override\n   * Destroy.\n   */\n  _onDestroy(): void {\n    this._vertexBufferBindings = null;\n    this._indexBufferBinding = null;\n    this._vertexElements = null;\n    this._vertexElementMap = null;\n    this._platformPrimitive.destroy();\n  }\n\n  protected _setVertexElements(elements: VertexElement[]): void {\n    this._clearVertexElements();\n    for (let i = 0, n = elements.length; i < n; i++) {\n      this._addVertexElement(elements[i]);\n    }\n  }\n\n  protected _setVertexBufferBinding(index: number, binding: VertexBufferBinding): void {\n    if (this._getRefCount() > 0) {\n      const lastBinding = this._vertexBufferBindings[index];\n      lastBinding && lastBinding._buffer._addRefCount(-1);\n      binding._buffer._addRefCount(1);\n    }\n    this._vertexBufferBindings[index] = binding;\n  }\n\n  protected _setIndexBufferBinding(binding: IndexBufferBinding | null): void {\n    if (binding) {\n      this._indexBufferBinding = binding;\n      this._glIndexType = BufferUtil._getGLIndexType(binding.format);\n      this._glIndexByteCount = BufferUtil._getGLIndexByteCount(binding.format);\n    } else {\n      this._indexBufferBinding = null;\n      this._glIndexType = undefined;\n    }\n  }\n\n  private _clearVertexElements(): void {\n    this._vertexElements.length = 0;\n    const vertexElementMap = this._vertexElementMap;\n    for (const k in vertexElementMap) {\n      delete vertexElementMap[k];\n    }\n  }\n\n  private _addVertexElement(element: VertexElement): void {\n    const { semantic } = element;\n    this._vertexElementMap[semantic] = element;\n    this._vertexElements.push(element);\n    this._updateFlagManager.distribute();\n  }\n}\n","import { Buffer } from \"./Buffer\";\n\n/**\n * Vertex buffer binding.\n */\nexport class VertexBufferBinding {\n  /** @internal */\n  _buffer: Buffer;\n  /** @internal */\n  _stride: number;\n\n  /**\n   * Vertex buffer.\n   */\n  get buffer(): Buffer {\n    return this._buffer;\n  }\n\n  /**\n   * Vertex buffer stride.\n   */\n  get stride(): number {\n    return this._stride;\n  }\n\n  /**\n   * Create vertex buffer.\n   * @param buffer - Vertex buffer\n   * @param stride - Vertex buffer stride\n   */\n  constructor(buffer: Buffer, stride: number) {\n    this._buffer = buffer;\n    this._stride = stride;\n  }\n}\n","/**\n * The filter mode of the texture.\n */\nexport enum TextureFilterMode {\n  /** Point filtering. */\n  Point = 0,\n  /** Bilinear filtering. */\n  Bilinear = 1,\n  /** Trilinear filtering. */\n  Trilinear = 2\n}\n","/**\n * Texture format enumeration.\n */\nexport enum TextureFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R channel,5 bits in G channel,5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R channel,6 bits in G channel,5 bits in B channel. */\n  R5G6B5,\n  /** Transparent format,8 bits. */\n  Alpha8,\n  /** Luminance/alpha in RGB channel, alpha in A channel. */\n  LuminanceAlpha,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32,\n  /** RGB compressed format。*/\n  DXT1,\n  /** RGBA compressed format。*/\n  DXT5,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC1_RGB,\n  /** RGB compressed format,4 bits per pixel。*/\n  ETC2_RGB,\n  /** RGBA compressed format,5 bits per pixel,4 bit in RGB, 1 bit in A. */\n  ETC2_RGBA5,\n  /** RGB compressed format,8 bits per pixel. */\n  ETC2_RGBA8,\n  /** RGB compressed format,2 bits per pixel. */\n  PVRTC_RGB2,\n  /** RGBA compressed format,2 bits per pixel. */\n  PVRTC_RGBA2,\n  /** RGB compressed format,4 bits per pixel. */\n  PVRTC_RGB4,\n  /** RGBA compressed format,4 bits per pixel. */\n  PVRTC_RGBA4,\n  /** RGB(A) compressed format,128 bits per 4x4 pixel block. */\n  ASTC_4x4,\n  /** RGB(A) compressed format,128 bits per 5x5 pixel block. */\n  ASTC_5x5,\n  /** RGB(A) compressed format,128 bits per 6x6 pixel block. */\n  ASTC_6x6,\n  /** RGB(A) compressed format,128 bits per 8x8 pixel block. */\n  ASTC_8x8,\n  /** RGB(A) compressed format,128 bits per 10x10 pixel block. */\n  ASTC_10x10,\n  /** RGB(A) compressed format,128 bits per 12x12 pixel block. */\n  ASTC_12x12\n}\n","/**\n * Wrapping mode of the texture.\n */\nexport enum TextureWrapMode {\n  /** Clamping mode. use the color of edge pixels beyond the texture boundary. */\n  Clamp = 0,\n  /** Repeating mode. tiling will be repeated if it exceeds the texture boundary. */\n  Repeat = 1,\n  /** Mirror repeat mode. tiling will be mirrored and repeated if it exceeds the texture boundary. */\n  Mirror = 2\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTexture2D } from \"../renderingHardwareInterface\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Two-dimensional texture.\n */\nexport class Texture2D extends Texture {\n  private _format: TextureFormat;\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * Create Texture2D.\n   * @param engine - Define the engine to use to render this texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default  `TextureFormat.R8G8B8A8`\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: TextureFormat = TextureFormat.R8G8B8A8,\n    mipmap: boolean = true\n  ) {\n    super(engine);\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTexture2D(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Repeat;\n  }\n\n  /**\n   * Setting pixels data through color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks If it is the WebGL1.0 platform and the texture format is compressed, the first upload must be filled with textures.\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Data width. if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height. if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setPixelBuffer(colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through TexImageSource, designated area and texture mipmapping level.\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    (this._platformTexture as IPlatformTexture2D).setImageSource(imageSource, mipLevel, flipY, premultiplyAlpha, x, y);\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified area.\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(x: number, y: number, width: number, height: number, out: ArrayBufferView): void {\n    (this._platformTexture as IPlatformTexture2D).getPixelBuffer(x, y, width, height, out);\n  }\n}\n","/**\n * The rendering buffer color format enumeration.\n */\nexport enum RenderBufferColorFormat {\n  /** RGB format,8 bits per channel. */\n  R8G8B8,\n  /** RGBA format,8 bits per channel. */\n  R8G8B8A8,\n  /** RGBA format,4 bits per channel. */\n  R4G4B4A4,\n  /** RGBA format,5 bits in R channel, 5 bits in G channel, 5 bits in B channel, 1 bit in A channel. */\n  R5G5B5A1,\n  /** RGB format,5 bits in R channel, 6 bits in G channel, 5 bits in B channel. */\n  R5G6B5,\n  /** transparent format, 8 bits. */\n  Alpha8,\n  /** RGBA format,16 bits per channel. */\n  R16G16B16A16,\n  /** RGBA format,32 bits per channel. */\n  R32G32B32A32\n}\n","/**\n * Render buffer depth format enumeration.\n */\nexport enum RenderBufferDepthFormat {\n  /** Render to depth buffer,engine will automatically select the supported precision. */\n  Depth = 0,\n  /** Render to depth stencil buffer, engine will automatically select the supported precision. */\n  DepthStencil = 1,\n  /** Render to stencil buffer. */\n  Stencil = 2,\n\n  /** Force 16-bit depth buffer. */\n  Depth16 = 3,\n  /** Force 24-bit depth buffer. */\n  Depth24 = 4,\n  /** Force 32-bit depth buffer. */\n  Depth32 = 5,\n  /** Force 16-bit depth + 8-bit stencil buffer. */\n  Depth24Stencil8 = 6,\n  /** Force 32-bit depth + 8-bit stencil buffer. */\n  Depth32Stencil8 = 7\n}\n","/**\n * Define the face of the cube texture.\n */\nexport enum TextureCubeFace {\n  /** Positive X face for a cube-mapped texture. */\n  PositiveX = 0,\n  /** Negative X face for a cube-mapped texture. */\n  NegativeX = 1,\n  /** Positive Y face for a cube-mapped texture. */\n  PositiveY = 2,\n  /** Negative Y face for a cube-mapped texture. */\n  NegativeY = 3,\n  /** Positive Z face for a cube-mapped texture. */\n  PositiveZ = 4,\n  /** Negative Z face for a cube-mapped texture. */\n  NegativeZ = 5\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformTextureCubeMap } from \"../renderingHardwareInterface\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureFormat } from \"./enums/TextureFormat\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * Cube texture.\n */\nexport class TextureCubeMap extends Texture {\n  private _format: TextureFormat;\n\n  /**\n   * Texture format.\n   */\n  get format(): TextureFormat {\n    return this._format;\n  }\n\n  /**\n   * Create TextureCube.\n   * @param engine - Define the engine to use to render this texture\n   * @param size - Texture size. texture width must be equal to height in cube texture\n   * @param format - Texture format,default TextureFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   */\n  constructor(engine: Engine, size: number, format: TextureFormat = TextureFormat.R8G8B8A8, mipmap: boolean = true) {\n    super(engine);\n\n    this._mipmap = mipmap;\n    this._width = size;\n    this._height = size;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformTextureCubeMap(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Setting pixels data through cube face,color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.\n   * @remarks When compressed texture is in WebGL1, the texture must be filled first before writing the sub-region\n   * @param face - Cube face\n   * @param colorBuffer - Color buffer data\n   * @param mipLevel - Texture mipmapping level\n   * @param x - X coordinate of area start\n   * @param y -  Y coordinate of area start\n   * @param width - Data width.if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)\n   * @param height - Data height.if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)\n   */\n  setPixelBuffer(\n    face: TextureCubeFace,\n    colorBuffer: ArrayBufferView,\n    mipLevel: number = 0,\n    x?: number,\n    y?: number,\n    width?: number,\n    height?: number\n  ): void {\n    (this._platformTexture as IPlatformTextureCubeMap).setPixelBuffer(face, colorBuffer, mipLevel, x, y, width, height);\n  }\n\n  /**\n   * Setting pixels data through cube face, TexImageSource, designated area and texture mipmapping level.\n   * @param face - Cube face\n   * @param imageSource - The source of texture\n   * @param mipLevel - Texture mipmapping level\n   * @param flipY - Whether to flip the Y axis\n   * @param premultiplyAlpha - Whether to premultiply the transparent channel\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   */\n  setImageSource(\n    face: TextureCubeFace,\n    imageSource: TexImageSource,\n    mipLevel: number = 0,\n    flipY: boolean = false,\n    premultiplyAlpha: boolean = false,\n    x?: number,\n    y?: number\n  ): void {\n    (this._platformTexture as IPlatformTextureCubeMap).setImageSource(\n      face,\n      imageSource,\n      mipLevel,\n      flipY,\n      premultiplyAlpha,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  getPixelBuffer(\n    face: TextureCubeFace,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    (this._platformTexture as IPlatformTextureCubeMap).getPixelBuffer(face, x, y, width, height, out);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The texture is used for the output of depth information in off-screen rendering.\n */\nexport class RenderDepthTexture extends Texture {\n  private _autoMipmap: boolean = false;\n  private _format: RenderBufferDepthFormat;\n  private _isCube: boolean = false;\n\n  /**\n   * Texture format.\n   */\n  get format(): RenderBufferDepthFormat {\n    return this._format;\n  }\n\n  /**\n   * Whether to render to a cube texture.\n   */\n  get isCube(): boolean {\n    return this._isCube;\n  }\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * Create RenderDepthTexture.\n   * @param engine - Define the engine to use to render this depth texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param mipmap - Whether to use multi-level texture\n   * @param isCube - Whether it's cube texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferDepthFormat = RenderBufferDepthFormat.Depth,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n\n    this._isCube = isCube;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformRenderDepthTexture(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n}\n","import { EngineObject } from \"../base\";\nimport { Engine } from \"../Engine\";\nimport { IPlatformRenderTarget } from \"../renderingHardwareInterface\";\nimport { RenderBufferDepthFormat } from \"./enums/RenderBufferDepthFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { RenderColorTexture } from \"./RenderColorTexture\";\nimport { RenderDepthTexture } from \"./RenderDepthTexture\";\n\n/**\n * The render target used for off-screen rendering.\n */\nexport class RenderTarget extends EngineObject {\n  /** @internal */\n  _platformRenderTarget: IPlatformRenderTarget;\n  /** @internal */\n  _colorTextures: RenderColorTexture[];\n  /** @internal */\n  _depth: RenderDepthTexture | RenderBufferDepthFormat | null;\n  /** @internal */\n  _antiAliasing: number;\n\n  private _width: number;\n  private _height: number;\n  private _depthTexture: RenderDepthTexture | null;\n\n  /**\n   * Render target width.\n   */\n  get width(): number {\n    return this._width;\n  }\n\n  /**\n   * Render target height.\n   */\n  get height(): number {\n    return this._height;\n  }\n\n  /**\n   * Render color texture count.\n   */\n  get colorTextureCount(): number {\n    return this._colorTextures.length;\n  }\n\n  /**\n   * Depth texture.\n   */\n  get depthTexture(): RenderDepthTexture | null {\n    return this._depthTexture;\n  }\n\n  /**\n   * Anti-aliasing level.\n   * @remarks If the anti-aliasing level set is greater than the maximum level supported by the hardware, the maximum level of the hardware will be used.\n   */\n  get antiAliasing(): number {\n    return this._antiAliasing;\n  }\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth, engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture,\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target through color texture and depth format.\n   * @remarks If the color texture is not transmitted, only the depth texture is generated.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTexture - Render color texture\n   * @param depthTexture - Render depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTexture: RenderColorTexture | null,\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth format.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthFormat - Depth format. default RenderBufferDepthFormat.Depth,engine will automatically select the supported precision\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthFormat?: RenderBufferDepthFormat | null,\n    antiAliasing?: number\n  );\n\n  /**\n   * Create a render target with color texture array and depth texture.\n   * @param engine - Define the engine to use for this off-screen rendering\n   * @param width - Render target width\n   * @param height - Render target height\n   * @param colorTextures - Render color texture array\n   * @param depthTexture - Depth texture\n   * @param antiAliasing - Anti-aliasing level, default is 1\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    colorTextures: RenderColorTexture[],\n    depthTexture: RenderDepthTexture,\n    antiAliasing?: number\n  );\n\n  /**\n   * @internal\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    renderTexture: RenderColorTexture | Array<RenderColorTexture> | null,\n    depth: RenderDepthTexture | RenderBufferDepthFormat | null = RenderBufferDepthFormat.Depth,\n    antiAliasing: number = 1\n  ) {\n    super(engine);\n\n    this._width = width;\n    this._height = height;\n    this._antiAliasing = antiAliasing;\n    this._depth = depth;\n\n    if (renderTexture) {\n      this._colorTextures = renderTexture instanceof Array ? renderTexture.slice() : [renderTexture];\n    } else {\n      this._colorTextures = [];\n    }\n\n    if (depth instanceof RenderDepthTexture) {\n      this._depthTexture = depth;\n    }\n\n    this._platformRenderTarget = engine._hardwareRenderer.createPlatformRenderTarget(this);\n  }\n\n  /**\n   *\n   * Get the render color texture by index.\n   * @param index\n   */\n  getColorTexture(index: number = 0): RenderColorTexture | null {\n    return this._colorTextures[index];\n  }\n\n  /**\n   * Generate the mipmap of each attachment texture of the renderTarget according to the configuration.\n   */\n  generateMipmaps(): void {\n    const colorTextureCount = this.colorTextureCount;\n\n    if (this._depthTexture?.autoGenerateMipmaps) {\n      this._depthTexture.generateMipmaps();\n    }\n\n    for (let i = 0; i < colorTextureCount; i++) {\n      const colorTexture = this._colorTextures[i];\n      if (colorTexture.autoGenerateMipmaps) {\n        colorTexture.generateMipmaps();\n      }\n    }\n  }\n\n  /**\n   * Destroy render target.\n   */\n  destroy() {\n    this._platformRenderTarget.destroy();\n    this._colorTextures.length = 0;\n    this._depthTexture = null;\n    this._depth = null;\n  }\n\n  /**\n   * @internal\n   */\n  _setRenderTargetFace(faceIndex: TextureCubeFace): void {\n    this._platformRenderTarget.setRenderTargetFace(faceIndex);\n  }\n\n  /**\n   * @internal\n   */\n  _blitRenderTarget(): void {\n    this._platformRenderTarget.blitRenderTarget();\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { IPlatformRenderColorTexture } from \"../renderingHardwareInterface\";\nimport { RenderBufferColorFormat } from \"./enums/RenderBufferColorFormat\";\nimport { TextureCubeFace } from \"./enums/TextureCubeFace\";\nimport { TextureFilterMode } from \"./enums/TextureFilterMode\";\nimport { TextureWrapMode } from \"./enums/TextureWrapMode\";\nimport { Texture } from \"./Texture\";\n\n/**\n * The texture is used for the output of color information in off-screen rendering.\n */\nexport class RenderColorTexture extends Texture {\n  private _autoMipmap: boolean = false;\n  private _format: RenderBufferColorFormat;\n  private _isCube: boolean = false;\n\n  /**\n   * Texture format.\n   */\n  get format(): RenderBufferColorFormat {\n    return this._format;\n  }\n\n  /**\n   * Whether to render to a cube texture.\n   */\n  get isCube(): boolean {\n    return this._isCube;\n  }\n\n  /**\n   * Whether to automatically generate multi-level textures.\n   */\n  get autoGenerateMipmaps(): boolean {\n    return this._autoMipmap;\n  }\n\n  set autoGenerateMipmaps(value: boolean) {\n    this._autoMipmap = value;\n  }\n\n  /**\n   * Create RenderColorTexture.\n   * @param engine - Define the engine to use to render this color texture\n   * @param width - Texture width\n   * @param height - Texture height\n   * @param format - Texture format. default RenderBufferColorFormat.R8G8B8A8\n   * @param mipmap - Whether to use multi-level texture\n   * @param isCube - Whether it's cube texture\n   */\n  constructor(\n    engine: Engine,\n    width: number,\n    height: number,\n    format: RenderBufferColorFormat = RenderBufferColorFormat.R8G8B8A8,\n    mipmap: boolean = false,\n    isCube: boolean = false\n  ) {\n    super(engine);\n\n    this._isCube = isCube;\n    this._mipmap = mipmap;\n    this._width = width;\n    this._height = height;\n    this._format = format;\n    this._mipmapCount = this._getMipmapCount();\n\n    this._platformTexture = engine._hardwareRenderer.createPlatformRenderColorTexture(this);\n\n    this.filterMode = TextureFilterMode.Bilinear;\n    this.wrapModeU = this.wrapModeV = TextureWrapMode.Clamp;\n  }\n\n  /**\n   * Get the pixel color buffer according to the specified cube face and area.\n   * @param face - You can choose which cube face to read if it's cube texture\n   * @param x - X coordinate of area start\n   * @param y - Y coordinate of area start\n   * @param width - Area width\n   * @param height - Area height\n   * @param out - Color buffer\n   */\n  public getPixelBuffer(\n    face: TextureCubeFace | null,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    out: ArrayBufferView\n  ): void {\n    (this._platformTexture as IPlatformRenderColorTexture).getPixelBuffer(face, x, y, width, height, out);\n  }\n}\n","import { Color, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { Engine } from \"../Engine\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { VertexBufferBinding } from \"../graphic/VertexBufferBinding\";\nimport { IndexBufferBinding } from \"../graphic\";\nimport { BlendShape } from \"./BlendShape\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { TextureFilterMode, TextureFormat } from \"../texture\";\n\n/**\n * Mesh containing common vertex elements of the model.\n */\nexport class ModelMesh extends Mesh {\n  /** @internal */\n  _hasBlendShape: boolean = false;\n  /** @internal */\n  _useBlendShapeNormal: boolean = false;\n  /** @internal */\n  _useBlendShapeTangent: boolean = false;\n  /** @internal */\n  _blendShapeTexture: Texture2D;\n\n  private _vertexCount: number = 0;\n  private _accessible: boolean = true;\n  private _verticesFloat32: Float32Array | null = null;\n  private _verticesUint8: Uint8Array | null = null;\n  private _indices: Uint8Array | Uint16Array | Uint32Array | null = null;\n  private _indicesFormat: IndexFormat = null;\n  private _vertexSlotChanged: boolean = true;\n  private _vertexChangeFlag: number = 0;\n  private _indicesChangeFlag: boolean = false;\n  private _elementCount: number = 0;\n  private _vertexElementsCache: VertexElement[] = [];\n\n  private _positions: Vector3[] = [];\n  private _normals: Vector3[] | null = null;\n  private _colors: Color[] | null = null;\n  private _tangents: Vector4[] | null = null;\n  private _uv: Vector2[] | null = null;\n  private _uv1: Vector2[] | null = null;\n  private _uv2: Vector2[] | null = null;\n  private _uv3: Vector2[] | null = null;\n  private _uv4: Vector2[] | null = null;\n  private _uv5: Vector2[] | null = null;\n  private _uv6: Vector2[] | null = null;\n  private _uv7: Vector2[] | null = null;\n  private _boneWeights: Vector4[] | null = null;\n  private _boneIndices: Vector4[] | null = null;\n  private _blendShapes: BlendShape[] = [];\n  private _blendShapeUpdateFlags: UpdateFlag[] = [];\n\n  /**\n   * Whether to access data of the mesh.\n   */\n  get accessible(): boolean {\n    return this._accessible;\n  }\n\n  /**\n   * Vertex count of current mesh.\n   */\n  get vertexCount(): number {\n    return this._vertexCount;\n  }\n\n  /**\n   * BlendShape count of this ModelMesh.\n   */\n  get blendShapes(): Readonly<BlendShape[]> {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._blendShapes;\n  }\n\n  /**\n   * Create a model mesh.\n   * @param engine - Engine to which the mesh belongs\n   * @param name - Mesh name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name;\n  }\n\n  /**\n   * Set positions for the mesh.\n   * @param positions - The positions for the mesh.\n   */\n  setPositions(positions: Vector3[]): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    const count = positions.length;\n    this._positions = positions;\n    this._vertexChangeFlag |= ValueChanged.Position;\n\n    if (this._vertexCount !== count) {\n      this._vertexCount = count;\n    }\n  }\n\n  /**\n   * Get positions for the mesh.\n   * @remarks Please call the setPositions() method after modification to ensure that the modification takes effect.\n   */\n  getPositions(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    return this._positions;\n  }\n\n  /**\n   * Set per-vertex normals for the mesh.\n   * @param normals - The normals for the mesh.\n   */\n  setNormals(normals: Vector3[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (normals.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._normals !== !!normals;\n    this._vertexChangeFlag |= ValueChanged.Normal;\n    this._normals = normals;\n  }\n\n  /**\n   * Get normals for the mesh.\n   * @remarks Please call the setNormals() method after modification to ensure that the modification takes effect.\n   */\n  getNormals(): Vector3[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._normals;\n  }\n\n  /**\n   * Set per-vertex colors for the mesh.\n   * @param colors - The colors for the mesh.\n   */\n  setColors(colors: Color[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (colors.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._colors !== !!colors;\n    this._vertexChangeFlag |= ValueChanged.Color;\n    this._colors = colors;\n  }\n\n  /**\n   * Get colors for the mesh.\n   * @remarks Please call the setColors() method after modification to ensure that the modification takes effect.\n   */\n  getColors(): Color[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._colors;\n  }\n\n  /**\n   * Set per-vertex bone weights for the mesh.\n   * @param boneWeights - The bone weights for the mesh.\n   */\n  setBoneWeights(boneWeights: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneWeights.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = boneWeights != null;\n    this._vertexChangeFlag |= ValueChanged.BoneWeight;\n    this._boneWeights = boneWeights;\n  }\n\n  /**\n   * Get weights for the mesh.\n   * @remarks Please call the setWeights() method after modification to ensure that the modification takes effect.\n   */\n  getBoneWeights(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneWeights;\n  }\n\n  /**\n   * Set per-vertex bone indices for the mesh.\n   * @param boneIndices - The bone indices for the mesh.\n   */\n  setBoneIndices(boneIndices: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (boneIndices.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._boneIndices !== !!boneIndices;\n    this._vertexChangeFlag |= ValueChanged.BoneIndex;\n    this._boneIndices = boneIndices;\n  }\n\n  /**\n   * Get joints for the mesh.\n   * @remarks Please call the setBoneIndices() method after modification to ensure that the modification takes effect.\n   */\n  getBoneIndices(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._boneIndices;\n  }\n\n  /**\n   * Set per-vertex tangents for the mesh.\n   * @param tangents - The tangents for the mesh.\n   */\n  setTangents(tangents: Vector4[] | null): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (tangents.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    this._vertexSlotChanged = !!this._tangents !== !!tangents;\n    this._vertexChangeFlag |= ValueChanged.Tangent;\n    this._tangents = tangents;\n  }\n\n  /**\n   * Get tangents for the mesh.\n   * @remarks Please call the setTangents() method after modification to ensure that the modification takes effect.\n   */\n  getTangents(): Vector4[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._tangents;\n  }\n\n  /**\n   * Set per-vertex uv for the mesh.\n   * @param uv - The uv for the mesh.\n   */\n  setUVs(uv: Vector2[] | null): void;\n  /**\n   * Set per-vertex uv for the mesh by channelIndex.\n   * @param uv - The uv for the mesh.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   */\n  setUVs(uv: Vector2[] | null, channelIndex: number): void;\n  setUVs(uv: Vector2[] | null, channelIndex?: number): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (uv.length !== this._vertexCount) {\n      throw \"The array provided needs to be the same size as vertex count.\";\n    }\n\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        this._vertexSlotChanged = !!this._uv !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV;\n        this._uv = uv;\n        break;\n      case 1:\n        this._vertexSlotChanged = !!this._uv1 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV1;\n        this._uv1 = uv;\n        break;\n      case 2:\n        this._vertexSlotChanged = !!this._uv2 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV2;\n        this._uv2 = uv;\n        break;\n      case 3:\n        this._vertexSlotChanged = !!this._uv3 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV3;\n        this._uv3 = uv;\n        break;\n      case 4:\n        this._vertexSlotChanged = !!this._uv4 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV4;\n        this._uv4 = uv;\n        break;\n      case 5:\n        this._vertexSlotChanged = !!this._uv5 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV5;\n        this._uv5 = uv;\n        break;\n      case 6:\n        this._vertexSlotChanged = !!this._uv6 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV6;\n        this._uv6 = uv;\n        break;\n      case 7:\n        this._vertexSlotChanged = !!this._uv7 !== !!uv;\n        this._vertexChangeFlag |= ValueChanged.UV7;\n        this._uv7 = uv;\n        break;\n      default:\n        throw \"The index of channel needs to be in range [0 - 7].\";\n    }\n  }\n\n  /**\n   * Get uv for the mesh.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(): Vector2[] | null;\n  /**\n   * Get uv for the mesh by channelIndex.\n   * @param channelIndex - The index of uv channels, in [0 ~ 7] range.\n   * @remarks Please call the setUV() method after modification to ensure that the modification takes effect.\n   */\n  getUVs(channelIndex: number): Vector2[] | null;\n  getUVs(channelIndex?: number): Vector2[] | null {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    channelIndex = channelIndex ?? 0;\n    switch (channelIndex) {\n      case 0:\n        return this._uv;\n      case 1:\n        return this._uv1;\n      case 2:\n        return this._uv2;\n      case 3:\n        return this._uv3;\n      case 4:\n        return this._uv4;\n      case 5:\n        return this._uv5;\n      case 6:\n        return this._uv6;\n      case 7:\n        return this._uv7;\n    }\n    throw \"The index of channel needs to be in range [0 - 7].\";\n  }\n\n  /**\n   * Set indices for the mesh.\n   * @param indices - The indices for the mesh.\n   */\n  setIndices(indices: Uint8Array | Uint16Array | Uint32Array): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    if (this._indices !== indices) {\n      this._indices = indices;\n      if (indices instanceof Uint8Array) {\n        this._indicesFormat = IndexFormat.UInt8;\n      } else if (indices instanceof Uint16Array) {\n        this._indicesFormat = IndexFormat.UInt16;\n      } else if (indices instanceof Uint32Array) {\n        this._indicesFormat = IndexFormat.UInt32;\n      }\n    }\n\n    this._indicesChangeFlag = true;\n  }\n\n  /**\n   * Get indices for the mesh.\n   */\n  getIndices(): Uint8Array | Uint16Array | Uint32Array {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    return this._indices;\n  }\n\n  /**\n   * Add a BlendShape for this ModelMesh.\n   * @param blendShape - The BlendShape\n   */\n  addBlendShape(blendShape: BlendShape): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    this._vertexChangeFlag |= ValueChanged.BlendShape;\n    this._useBlendShapeNormal = this._useBlendShapeNormal || blendShape._useBlendShapeNormal;\n    this._useBlendShapeTangent = this._useBlendShapeTangent || blendShape._useBlendShapeTangent;\n    this._blendShapes.push(blendShape);\n    this._blendShapeUpdateFlags.push(blendShape._registerChangeFlag());\n    this._hasBlendShape = true;\n  }\n\n  /**\n   * Clear all BlendShapes.\n   */\n  clearBlendShapes(): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n    this._vertexChangeFlag |= ValueChanged.BlendShape;\n    this._useBlendShapeNormal = false;\n    this._useBlendShapeTangent = false;\n    this._blendShapes.length = 0;\n    const blendShapeUpdateFlags = this._blendShapeUpdateFlags;\n    for (let i = 0, n = blendShapeUpdateFlags.length; i < n; i++) {\n      blendShapeUpdateFlags[i].destroy();\n    }\n    blendShapeUpdateFlags.length = 0;\n    this._hasBlendShape = false;\n  }\n\n  /**\n   * Upload Mesh Data to the graphics API.\n   * @param noLongerAccessible - Whether to access data later. If true, you'll never access data anymore (free memory cache)\n   */\n  uploadData(noLongerAccessible: boolean): void {\n    if (!this._accessible) {\n      throw \"Not allowed to access data while accessible is false.\";\n    }\n\n    const { _indices } = this;\n\n    // Vertex element change.\n    if (this._vertexSlotChanged) {\n      const vertexElements = this._updateVertexElements();\n      this._setVertexElements(vertexElements);\n      this._vertexChangeFlag = ValueChanged.All;\n      this._vertexSlotChanged = false;\n    }\n\n    // Vertex value change.\n    const vertexBufferBindings = this._vertexBufferBindings;\n    const elementCount = this._elementCount;\n    const vertexBuffer = vertexBufferBindings[0]?._buffer;\n    const vertexFloatCount = elementCount * this._vertexCount;\n    if (!vertexBuffer || this._verticesFloat32.length !== vertexFloatCount) {\n      vertexBuffer?.destroy();\n      const vertices = new Float32Array(vertexFloatCount);\n      this._verticesFloat32 = vertices;\n      this._verticesUint8 = new Uint8Array(vertices.buffer);\n\n      this._vertexChangeFlag = ValueChanged.All;\n      this._updateVertices(vertices);\n\n      const newVertexBuffer = new Buffer(\n        this._engine,\n        BufferBindFlag.VertexBuffer,\n        vertices,\n        noLongerAccessible ? BufferUsage.Static : BufferUsage.Dynamic\n      );\n\n      this._setVertexBufferBinding(0, new VertexBufferBinding(newVertexBuffer, elementCount * 4));\n    } else if (this._vertexChangeFlag & ValueChanged.All) {\n      const vertices = this._verticesFloat32;\n      this._updateVertices(vertices);\n      vertexBuffer.setData(vertices);\n    }\n\n    const indexBuffer = this._indexBufferBinding?._buffer;\n    if (_indices) {\n      if (!indexBuffer || _indices.byteLength != indexBuffer.byteLength) {\n        indexBuffer?.destroy();\n        const newIndexBuffer = new Buffer(this._engine, BufferBindFlag.IndexBuffer, _indices);\n        this._setIndexBufferBinding(new IndexBufferBinding(newIndexBuffer, this._indicesFormat));\n      } else if (this._indicesChangeFlag) {\n        this._indicesChangeFlag = false;\n        indexBuffer.setData(_indices);\n        if (this._indexBufferBinding._format !== this._indicesFormat) {\n          this._setIndexBufferBinding(new IndexBufferBinding(indexBuffer, this._indicesFormat));\n        }\n      }\n    } else if (indexBuffer) {\n      indexBuffer.destroy();\n      this._setIndexBufferBinding(null);\n    }\n\n    if (noLongerAccessible) {\n      this._accessible = false;\n      this._releaseCache();\n    }\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDestroy(): void {\n    super._onDestroy();\n    this._accessible && this._releaseCache();\n  }\n\n  private _updateVertexElements(): VertexElement[] {\n    const vertexElements = this._vertexElementsCache;\n    vertexElements.length = 1;\n    vertexElements[0] = POSITION_VERTEX_ELEMENT;\n\n    let offset = 12;\n    let elementCount = 3;\n    if (this._normals) {\n      vertexElements.push(new VertexElement(\"NORMAL\", offset, VertexElementFormat.Vector3, 0));\n      offset += 12;\n      elementCount += 3;\n    }\n    if (this._colors) {\n      vertexElements.push(new VertexElement(\"COLOR_0\", offset, VertexElementFormat.Vector4, 0));\n      offset += 16;\n      elementCount += 4;\n    }\n    if (this._boneWeights) {\n      vertexElements.push(new VertexElement(\"WEIGHTS_0\", offset, VertexElementFormat.Vector4, 0));\n      offset += 16;\n      elementCount += 4;\n    }\n    if (this._boneIndices) {\n      vertexElements.push(new VertexElement(\"JOINTS_0\", offset, VertexElementFormat.UByte4, 0));\n      offset += 4;\n      elementCount += 1;\n    }\n    if (this._tangents) {\n      vertexElements.push(new VertexElement(\"TANGENT\", offset, VertexElementFormat.Vector4, 0));\n      offset += 16;\n      elementCount += 4;\n    }\n    if (this._uv) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_0\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv1) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_1\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv2) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_2\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv3) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_3\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv4) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_4\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv5) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_5\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv6) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_6\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n    if (this._uv7) {\n      vertexElements.push(new VertexElement(\"TEXCOORD_7\", offset, VertexElementFormat.Vector2, 0));\n      offset += 8;\n      elementCount += 2;\n    }\n\n    const blendShapeCount = Math.min(this._blendShapes.length, 4);\n    for (let i = 0, n = blendShapeCount; i < n; i++) {\n      vertexElements.push(new VertexElement(`POSITION_BS${i}`, offset, VertexElementFormat.Vector3, 0));\n      offset += 12;\n      elementCount += 3;\n      if (this._useBlendShapeNormal) {\n        vertexElements.push(new VertexElement(`NORMAL_BS${i}`, offset, VertexElementFormat.Vector3, 0));\n        offset += 12;\n        elementCount += 3;\n      }\n      if (this._useBlendShapeTangent) {\n        vertexElements.push(new VertexElement(`TANGENT_BS${i}`, offset, VertexElementFormat.Vector3, 0));\n        offset += 12;\n        elementCount += 3;\n      }\n    }\n\n    this._elementCount = elementCount;\n    return vertexElements;\n  }\n\n  private _updateVertices(vertices: Float32Array): void {\n    // prettier-ignore\n    const { _elementCount,_vertexCount, _positions, _normals, _colors, _vertexChangeFlag, _boneWeights, _boneIndices, _tangents, _uv, _uv1, _uv2, _uv3, _uv4, _uv5, _uv6, _uv7 } = this;\n\n    if (_vertexChangeFlag & ValueChanged.Position) {\n      for (let i = 0; i < _vertexCount; i++) {\n        const start = _elementCount * i;\n        const position = _positions[i];\n        vertices[start] = position.x;\n        vertices[start + 1] = position.y;\n        vertices[start + 2] = position.z;\n      }\n    }\n\n    let offset = 3;\n\n    if (_normals) {\n      if (_vertexChangeFlag & ValueChanged.Normal) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const normal = _normals[i];\n          if (normal) {\n            vertices[start] = normal.x;\n            vertices[start + 1] = normal.y;\n            vertices[start + 2] = normal.z;\n          }\n        }\n      }\n      offset += 3;\n    }\n\n    if (_colors) {\n      if (_vertexChangeFlag & ValueChanged.Color) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const color = _colors[i];\n          if (color) {\n            vertices[start] = color.r;\n            vertices[start + 1] = color.g;\n            vertices[start + 2] = color.b;\n            vertices[start + 3] = color.a;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneWeights) {\n      if (_vertexChangeFlag & ValueChanged.BoneWeight) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const weight = _boneWeights[i];\n          if (weight) {\n            vertices[start] = weight.x;\n            vertices[start + 1] = weight.y;\n            vertices[start + 2] = weight.z;\n            vertices[start + 3] = weight.w;\n          }\n        }\n      }\n      offset += 4;\n    }\n\n    if (_boneIndices) {\n      if (_vertexChangeFlag & ValueChanged.BoneIndex) {\n        const { _verticesUint8 } = this;\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const joint = _boneIndices[i];\n          if (joint) {\n            const internalStart = start * 4;\n            _verticesUint8[internalStart] = joint.x;\n            _verticesUint8[internalStart + 1] = joint.y;\n            _verticesUint8[internalStart + 2] = joint.z;\n            _verticesUint8[internalStart + 3] = joint.w;\n          }\n        }\n      }\n      offset += 1;\n    }\n\n    if (_tangents) {\n      if (_vertexChangeFlag & ValueChanged.Tangent) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const tangent = _tangents[i];\n          if (tangent) {\n            vertices[start] = tangent.x;\n            vertices[start + 1] = tangent.y;\n            vertices[start + 2] = tangent.z;\n          }\n        }\n      }\n      offset += 4;\n    }\n    if (_uv) {\n      if (_vertexChangeFlag & ValueChanged.UV) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv1) {\n      if (_vertexChangeFlag & ValueChanged.UV1) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv1[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv2) {\n      if (_vertexChangeFlag & ValueChanged.UV2) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv2[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv3) {\n      if (_vertexChangeFlag & ValueChanged.UV3) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv3[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv4) {\n      if (_vertexChangeFlag & ValueChanged.UV4) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv4[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv5) {\n      if (_vertexChangeFlag & ValueChanged.UV5) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv5[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv6) {\n      if (_vertexChangeFlag & ValueChanged.UV6) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv6[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n    if (_uv7) {\n      if (_vertexChangeFlag & ValueChanged.UV7) {\n        for (let i = 0; i < _vertexCount; i++) {\n          const start = _elementCount * i + offset;\n          const uv = _uv7[i];\n          if (uv) {\n            vertices[start] = uv.x;\n            vertices[start + 1] = uv.y;\n          }\n        }\n      }\n      offset += 2;\n    }\n\n    // BlendShape.\n    if (_vertexChangeFlag & ValueChanged.BlendShape) {\n      const blendShapes = this._blendShapes;\n      const blendShapeUpdateFlags = this._blendShapeUpdateFlags;\n      const blendShapeCount = Math.min(blendShapes.length, 4);\n\n      const rhi = this.engine._hardwareRenderer;\n      if (/*rhi.canUseFloatTextureBlendShape*/ false) {\n        let stride = 1;\n        this._useBlendShapeNormal && stride++;\n        this._useBlendShapeTangent && stride++;\n\n        const maxTextureSize = rhi.renderStates.getParameter(rhi.gl.MAX_TEXTURE_SIZE);\n        const pixelCount = this._vertexCount * stride;\n        const height = Math.ceil(pixelCount / maxTextureSize);\n        const width = height > 1 ? maxTextureSize : pixelCount;\n\n        this._blendShapeTexture = new Texture2D(this.engine, 0, 0, TextureFormat.R32G32B32A32, false);\n        this._blendShapeTexture.filterMode = TextureFilterMode.Point;\n      } else {\n        for (let i = 0; i < blendShapeCount; i++) {\n          const blendShapeUpdateFlag = blendShapeUpdateFlags[i];\n          if (blendShapeUpdateFlag.flag) {\n            const blendShape = blendShapes[i];\n            const { frames } = blendShape;\n            const frameCount = frames.length;\n            const endFrame = frames[frameCount - 1];\n            if (frameCount > 0 && endFrame.deltaPositions.length !== this._vertexCount) {\n              throw \"BlendShape frame deltaPositions length must same with mesh vertexCount.\";\n            }\n\n            const { deltaPositions } = endFrame;\n            for (let j = 0; j < _vertexCount; j++) {\n              const start = _elementCount * j + offset;\n              const deltaPosition = deltaPositions[j];\n              if (deltaPosition) {\n                vertices[start] = deltaPosition.x;\n                vertices[start + 1] = deltaPosition.y;\n                vertices[start + 2] = deltaPosition.z;\n              }\n            }\n            offset += 3;\n\n            if (this._useBlendShapeNormal) {\n              const { deltaNormals } = endFrame;\n              if (deltaNormals) {\n                for (let j = 0; j < _vertexCount; j++) {\n                  const start = _elementCount * j + offset;\n                  const deltaNormal = deltaNormals[j];\n                  if (deltaNormal) {\n                    vertices[start] = deltaNormal.x;\n                    vertices[start + 1] = deltaNormal.y;\n                    vertices[start + 2] = deltaNormal.z;\n                  }\n                }\n              }\n              offset += 3;\n            }\n\n            if (this._useBlendShapeTangent) {\n              const { deltaTangents } = endFrame;\n              if (deltaTangents) {\n                for (let j = 0; j < _vertexCount; j++) {\n                  const start = _elementCount * j + offset;\n                  const deltaTangent = deltaTangents[j];\n                  if (deltaTangent) {\n                    vertices[start] = deltaTangent.x;\n                    vertices[start + 1] = deltaTangent.y;\n                    vertices[start + 2] = deltaTangent.z;\n                  }\n                }\n              }\n              offset += 3;\n            }\n            blendShapeUpdateFlag.flag = false;\n          }\n        }\n      }\n    }\n\n    this._vertexChangeFlag = 0;\n  }\n\n  private _releaseCache(): void {\n    const blendShapeUpdateFlags = this._blendShapeUpdateFlags;\n    for (let i = 0, n = blendShapeUpdateFlags.length; i < n; i++) {\n      blendShapeUpdateFlags[i].destroy();\n    }\n\n    this._verticesUint8 = null;\n    this._indices = null;\n    this._verticesFloat32 = null;\n    this._positions.length = 0;\n    this._tangents = null;\n    this._normals = null;\n    this._colors = null;\n    this._uv = null;\n    this._uv1 = null;\n    this._uv2 = null;\n    this._uv3 = null;\n    this._uv4 = null;\n    this._uv5 = null;\n    this._uv6 = null;\n    this._uv7 = null;\n    this._blendShapes = null;\n    this._blendShapeUpdateFlags = null;\n  }\n}\n\nconst POSITION_VERTEX_ELEMENT = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n\nenum ValueChanged {\n  Position = 0x1,\n  Normal = 0x2,\n  Color = 0x4,\n  Tangent = 0x8,\n  BoneWeight = 0x10,\n  BoneIndex = 0x20,\n  UV = 0x40,\n  UV1 = 0x80,\n  UV2 = 0x100,\n  UV3 = 0x200,\n  UV4 = 0x400,\n  UV5 = 0x800,\n  UV6 = 0x1000,\n  UV7 = 0x2000,\n  BlendShape = 0x4000,\n  All = 0xffff\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { EngineObject } from \"../base/EngineObject\";\nimport { Entity } from \"../Entity\";\n\n/**\n * Mesh skin data, equal glTF skins define\n */\nexport class Skin extends EngineObject {\n  public inverseBindMatrices: Matrix[];\n  public joints: string[];\n  public skeleton: string;\n  /**\n   * Constructor of skin\n   * @param name - name\n   */\n  constructor(public name: string) {\n    super(null);\n    this.inverseBindMatrices = []; // inverse bind matrix array\n    this.joints = []; // joints name array, element type: string\n    this.skeleton = \"none\"; // root bone name\n  }\n}\n","import { BoundingBox } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { ICustomClone } from \"../clone/ComponentCloner\";\nimport { Entity } from \"../Entity\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { Mesh } from \"../graphic/Mesh\";\nimport { Renderer } from \"../Renderer\";\nimport { Shader } from \"../shader/Shader\";\nimport { UpdateFlag } from \"../UpdateFlag\";\n\n/**\n * MeshRenderer Component.\n */\nexport class MeshRenderer extends Renderer implements ICustomClone {\n  private static _uvMacro = Shader.getMacroByName(\"O3_HAS_UV\");\n  private static _normalMacro = Shader.getMacroByName(\"O3_HAS_NORMAL\");\n  private static _tangentMacro = Shader.getMacroByName(\"O3_HAS_TANGENT\");\n  private static _vertexColorMacro = Shader.getMacroByName(\"O3_HAS_VERTEXCOLOR\");\n\n  @ignoreClone\n  private _mesh: Mesh;\n  @ignoreClone\n  private _meshUpdateFlag: UpdateFlag;\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Mesh assigned to the renderer.\n   */\n  get mesh() {\n    return this._mesh;\n  }\n\n  set mesh(mesh: Mesh) {\n    const lastMesh = this._mesh;\n    if (lastMesh !== mesh) {\n      if (lastMesh) {\n        lastMesh._addRefCount(-1);\n        this._meshUpdateFlag.destroy();\n      }\n      if (mesh) {\n        mesh._addRefCount(1);\n        this._meshUpdateFlag = mesh.registerUpdateFlag();\n      }\n      this._mesh = mesh;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      if (this._meshUpdateFlag.flag) {\n        const shaderData = this.shaderData;\n        const vertexElements = mesh._vertexElements;\n\n        shaderData.disableMacro(MeshRenderer._uvMacro);\n        shaderData.disableMacro(MeshRenderer._normalMacro);\n        shaderData.disableMacro(MeshRenderer._tangentMacro);\n        shaderData.disableMacro(MeshRenderer._vertexColorMacro);\n\n        for (let i = 0, n = vertexElements.length; i < n; i++) {\n          const { semantic } = vertexElements[i];\n          switch (semantic) {\n            case \"TEXCOORD_0\":\n              shaderData.enableMacro(MeshRenderer._uvMacro);\n              break;\n            case \"NORMAL\":\n              shaderData.enableMacro(MeshRenderer._normalMacro);\n              break;\n            case \"TANGENT\":\n              shaderData.enableMacro(MeshRenderer._tangentMacro);\n              break;\n            case \"COLOR_0\":\n              shaderData.enableMacro(MeshRenderer._vertexColorMacro);\n              break;\n          }\n        }\n        this._meshUpdateFlag.flag = false;\n      }\n\n      const subMeshes = mesh.subMeshes;\n      const renderPipeline = camera._renderPipeline;\n      const renderElementPool = this._engine._renderElementPool;\n      for (let i = 0, n = subMeshes.length; i < n; i++) {\n        const material = this._materials[i];\n        if (material) {\n          const element = renderElementPool.getFromPool();\n          element.setValue(this, mesh, subMeshes[i], material);\n          renderPipeline.pushPrimitive(element);\n        }\n      }\n    } else {\n      Logger.error(\"mesh is null.\");\n    }\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDestroy() {\n    super._onDestroy();\n    const mesh = this._mesh;\n    if (mesh && !mesh.destroyed) {\n      mesh._addRefCount(-1);\n      this._mesh = null;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _cloneTo(target: MeshRenderer): void {\n    target.mesh = this._mesh;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const mesh = this._mesh;\n    if (mesh) {\n      const localBounds = mesh.bounds;\n      const worldMatrix = this._entity.transform.worldMatrix;\n      BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n    } else {\n      worldBounds.min.setValue(0, 0, 0);\n      worldBounds.max.setValue(0, 0, 0);\n    }\n  }\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Logger } from \"../base/Logger\";\nimport { ignoreClone } from \"../clone/CloneManager\";\nimport { Entity } from \"../Entity\";\nimport { RenderContext } from \"../RenderPipeline/RenderContext\";\nimport { Shader } from \"../shader\";\nimport { TextureFilterMode } from \"../texture/enums/TextureFilterMode\";\nimport { TextureFormat } from \"../texture/enums/TextureFormat\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { MeshRenderer } from \"./MeshRenderer\";\nimport { ModelMesh } from \"./ModelMesh\";\nimport { Skin } from \"./Skin\";\n\n/**\n * SkinnedMeshRenderer.\n */\nexport class SkinnedMeshRenderer extends MeshRenderer {\n  private static _blendShapeMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE\");\n  private static _blendShapeNormalMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_NORMAL\");\n  private static _blendShapeTangentMacro = Shader.getMacroByName(\"OASIS_BLENDSHAPE_TANGENT\");\n\n  private static _jointCountProperty = Shader.getPropertyByName(\"u_jointCount\");\n  private static _jointSamplerProperty = Shader.getPropertyByName(\"u_jointSampler\");\n  private static _jointMatrixProperty = Shader.getPropertyByName(\"u_jointMatrix\");\n  private static _blendShapeWeightsProperty = Shader.getPropertyByName(\"u_blendShapeWeights\");\n\n  private static _maxJoints: number = 0;\n\n  @ignoreClone\n  public matrixPalette: Float32Array;\n  @ignoreClone\n  public jointNodes: Entity[];\n  @ignoreClone\n  public jointTexture: Texture2D;\n\n  @ignoreClone\n  private _hasInitJoints: boolean = false;\n  @ignoreClone\n  private _mat: Matrix;\n  @ignoreClone\n  /** Whether to use joint texture. Automatically used when the device can't support the maximum number of bones. */\n  private _useJointTexture: boolean = false;\n  private _skin: Skin;\n  private _blendShapeWeights: Float32Array;\n\n  /**\n   * The weights of the BlendShapes.\n   * @remarks Array index is BlendShape index.\n   */\n  get blendShapeWeights(): Float32Array {\n    return this._blendShapeWeights;\n  }\n\n  set blendShapeWeights(value: Float32Array) {\n    this._blendShapeWeights = value;\n  }\n\n  /**\n   * Constructor of SkinnedMeshRenderer\n   * @param entity - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._mat = new Matrix();\n    this._skin = null;\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(context: RenderContext) {\n    super._updateShaderData(context);\n\n    const shaderData = this.shaderData;\n    if (!this._useJointTexture && this.matrixPalette) {\n      shaderData.setFloatArray(SkinnedMeshRenderer._jointMatrixProperty, this.matrixPalette);\n    }\n\n    const mesh = <ModelMesh>this.mesh;\n    if (mesh._hasBlendShape) {\n      shaderData.setFloatArray(SkinnedMeshRenderer._blendShapeWeightsProperty, this._blendShapeWeights);\n      shaderData.enableMacro(SkinnedMeshRenderer._blendShapeMacro);\n\n      if (mesh._useBlendShapeNormal) {\n        shaderData.enableMacro(SkinnedMeshRenderer._blendShapeNormalMacro);\n      } else {\n        shaderData.disableMacro(SkinnedMeshRenderer._blendShapeNormalMacro);\n      }\n      if (mesh._useBlendShapeTangent) {\n        shaderData.enableMacro(SkinnedMeshRenderer._blendShapeTangentMacro);\n      } else {\n        shaderData.disableMacro(SkinnedMeshRenderer._blendShapeTangentMacro);\n      }\n    } else {\n      shaderData.disableMacro(SkinnedMeshRenderer._blendShapeMacro);\n    }\n  }\n\n  /**\n   * Skin Object.\n   */\n  get skin() {\n    return this._skin;\n  }\n\n  set skin(skin) {\n    this._skin = skin;\n  }\n\n  _initJoints() {\n    if (!this._skin) return;\n    const skin = this._skin;\n\n    const joints = skin.joints;\n    const jointNodes = [];\n    for (let i = joints.length - 1; i >= 0; i--) {\n      jointNodes[i] = this.findByNodeName(this.entity, joints[i]);\n    } // end of for\n    this.matrixPalette = new Float32Array(jointNodes.length * 16);\n    this.jointNodes = jointNodes;\n\n    /** Whether to use a skeleton texture */\n    const rhi = this.entity.engine._hardwareRenderer;\n    if (!rhi) return;\n    const maxAttribUniformVec4 = rhi.renderStates.getParameter(rhi.gl.MAX_VERTEX_UNIFORM_VECTORS);\n    const maxJoints = Math.floor((maxAttribUniformVec4 - 20) / 4);\n    const shaderData = this.shaderData;\n    const jointCount = this.jointNodes?.length;\n    if (jointCount) {\n      shaderData.enableMacro(\"O3_HAS_SKIN\");\n      shaderData.setInt(SkinnedMeshRenderer._jointCountProperty, jointCount);\n      if (joints.length > maxJoints) {\n        if (rhi.canIUseMoreJoints) {\n          this._useJointTexture = true;\n        } else {\n          Logger.error(\n            `component's joints count(${joints}) greater than device's MAX_VERTEX_UNIFORM_VECTORS number ${maxAttribUniformVec4}, and don't support jointTexture in this device. suggest joint count less than ${maxJoints}.`,\n            this\n          );\n        }\n      } else {\n        const maxJoints = Math.max(SkinnedMeshRenderer._maxJoints, joints.length);\n        SkinnedMeshRenderer._maxJoints = maxJoints;\n        shaderData.disableMacro(\"O3_USE_JOINT_TEXTURE\");\n        shaderData.enableMacro(\"O3_JOINTS_NUM\", maxJoints.toString());\n      }\n    } else {\n      shaderData.disableMacro(\"O3_HAS_SKIN\");\n    }\n  }\n\n  private findByNodeName(entity: Entity, nodeName: string) {\n    if (!entity) return null;\n\n    const n = entity.findByName(nodeName);\n\n    if (n) return n;\n\n    return this.findByNodeName(entity.parent, nodeName);\n  }\n\n  /**\n   * @internal\n   */\n  update() {\n    if (!this._hasInitJoints) {\n      this._initJoints();\n      this._hasInitJoints = true;\n    }\n    if (this._skin) {\n      const joints = this.jointNodes;\n      const ibms = this._skin.inverseBindMatrices;\n      const matrixPalette = this.matrixPalette;\n      const worldToLocal = this.entity.getInvModelMatrix();\n\n      const mat = this._mat;\n      for (let i = joints.length - 1; i >= 0; i--) {\n        mat.identity();\n        if (joints[i]) {\n          Matrix.multiply(joints[i].transform.worldMatrix, ibms[i], mat);\n        } else {\n          ibms[i].cloneTo(mat);\n        }\n        Matrix.multiply(worldToLocal, mat, mat);\n        matrixPalette.set(mat.elements, i * 16);\n      }\n      if (this._useJointTexture) {\n        this.createJointTexture();\n      }\n    }\n  }\n\n  /**\n   * Generate joint texture.\n   * Format: (4 * RGBA) * jointCont\n   */\n  createJointTexture() {\n    if (!this.jointTexture) {\n      const engine = this.engine;\n      const rhi = engine._hardwareRenderer;\n      if (!rhi) return;\n      this.jointTexture = new Texture2D(engine, 4, this.jointNodes.length, TextureFormat.R32G32B32A32, false);\n      this.jointTexture.filterMode = TextureFilterMode.Point;\n      this.shaderData.enableMacro(\"O3_USE_JOINT_TEXTURE\");\n      this.shaderData.setTexture(SkinnedMeshRenderer._jointSamplerProperty, this.jointTexture);\n    }\n    this.jointTexture.setPixelBuffer(this.matrixPalette);\n  }\n}\n","import { Vector2, Vector3 } from \"@oasis-engine/math\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { Engine } from \"../Engine\";\nimport { ModelMesh } from \"./ModelMesh\";\n\n/**\n * Used to generate common primitive meshes.\n */\nexport class PrimitiveMesh {\n  /**\n   * Create a sphere mesh.\n   * @param engine - Engine\n   * @param radius - Sphere radius\n   * @param segments - Number of segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Sphere model mesh\n   */\n  static createSphere(\n    engine: Engine,\n    radius: number = 0.5,\n    segments: number = 18,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    segments = Math.max(2, Math.floor(segments));\n\n    const count = segments + 1;\n    const vertexCount = count * count;\n    const rectangleCount = segments * segments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const thetaRange = Math.PI;\n    const alphaRange = thetaRange * 2;\n    const countReciprocal = 1.0 / count;\n    const segmentsReciprocal = 1.0 / segments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % count;\n      const y = (i * countReciprocal) | 0;\n      const u = x * segmentsReciprocal;\n      const v = y * segmentsReciprocal;\n      const alphaDelta = u * alphaRange;\n      const thetaDelta = v * thetaRange;\n      const sinTheta = Math.sin(thetaDelta);\n\n      let posX = -radius * Math.cos(alphaDelta) * sinTheta;\n      let posY = radius * Math.cos(thetaDelta);\n      let posZ = radius * Math.sin(alphaDelta) * sinTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(posX, posY, posZ);\n      // Texcoord\n      uvs[i] = new Vector2(u, v);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % segments;\n      const y = (i * segmentsReciprocal) | 0;\n\n      const a = y * count + x;\n      const b = a + 1;\n      const c = a + count;\n      const d = c + 1;\n\n      indices[offset++] = b;\n      indices[offset++] = a;\n      indices[offset++] = d;\n      indices[offset++] = a;\n      indices[offset++] = c;\n      indices[offset++] = d;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-radius, -radius, -radius);\n    bounds.max.setValue(radius, radius, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cuboid mesh.\n   * @param engine - Engine\n   * @param width - Cuboid width\n   * @param height - Cuboid height\n   * @param depth - Cuboid depth\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cuboid model mesh\n   */\n  static createCuboid(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    depth: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n\n    const halfWidth: number = width / 2;\n    const halfHeight: number = height / 2;\n    const halfDepth: number = depth / 2;\n\n    const positions: Vector3[] = new Array(24);\n    const normals: Vector3[] = new Array(24);\n    const uvs: Vector2[] = new Array(24);\n\n    // Up\n    positions[0] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[1] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[2] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[3] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    normals[0] = new Vector3(0, 1, 0);\n    normals[1] = new Vector3(0, 1, 0);\n    normals[2] = new Vector3(0, 1, 0);\n    normals[3] = new Vector3(0, 1, 0);\n    uvs[0] = new Vector2(0, 0);\n    uvs[1] = new Vector2(1, 0);\n    uvs[2] = new Vector2(1, 1);\n    uvs[3] = new Vector2(0, 1);\n    // Down\n    positions[4] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    positions[5] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[6] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[7] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[4] = new Vector3(0, -1, 0);\n    normals[5] = new Vector3(0, -1, 0);\n    normals[6] = new Vector3(0, -1, 0);\n    normals[7] = new Vector3(0, -1, 0);\n    uvs[4] = new Vector2(0, 1);\n    uvs[5] = new Vector2(1, 1);\n    uvs[6] = new Vector2(1, 0);\n    uvs[7] = new Vector2(0, 0);\n    // Left\n    positions[8] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[9] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[10] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    positions[11] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[8] = new Vector3(-1, 0, 0);\n    normals[9] = new Vector3(-1, 0, 0);\n    normals[10] = new Vector3(-1, 0, 0);\n    normals[11] = new Vector3(-1, 0, 0);\n    uvs[8] = new Vector2(0, 0);\n    uvs[9] = new Vector2(1, 0);\n    uvs[10] = new Vector2(1, 1);\n    uvs[11] = new Vector2(0, 1);\n    // Right\n    positions[12] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[13] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[14] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[15] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    normals[12] = new Vector3(1, 0, 0);\n    normals[13] = new Vector3(1, 0, 0);\n    normals[14] = new Vector3(1, 0, 0);\n    normals[15] = new Vector3(1, 0, 0);\n    uvs[12] = new Vector2(1, 0);\n    uvs[13] = new Vector2(0, 0);\n    uvs[14] = new Vector2(0, 1);\n    uvs[15] = new Vector2(1, 1);\n    // Front\n    positions[16] = new Vector3(-halfWidth, halfHeight, halfDepth);\n    positions[17] = new Vector3(halfWidth, halfHeight, halfDepth);\n    positions[18] = new Vector3(halfWidth, -halfHeight, halfDepth);\n    positions[19] = new Vector3(-halfWidth, -halfHeight, halfDepth);\n    normals[16] = new Vector3(0, 0, 1);\n    normals[17] = new Vector3(0, 0, 1);\n    normals[18] = new Vector3(0, 0, 1);\n    normals[19] = new Vector3(0, 0, 1);\n    uvs[16] = new Vector2(0, 0);\n    uvs[17] = new Vector2(1, 0);\n    uvs[18] = new Vector2(1, 1);\n    uvs[19] = new Vector2(0, 1);\n    // Back\n    positions[20] = new Vector3(-halfWidth, halfHeight, -halfDepth);\n    positions[21] = new Vector3(halfWidth, halfHeight, -halfDepth);\n    positions[22] = new Vector3(halfWidth, -halfHeight, -halfDepth);\n    positions[23] = new Vector3(-halfWidth, -halfHeight, -halfDepth);\n    normals[20] = new Vector3(0, 0, -1);\n    normals[21] = new Vector3(0, 0, -1);\n    normals[22] = new Vector3(0, 0, -1);\n    normals[23] = new Vector3(0, 0, -1);\n    uvs[20] = new Vector2(1, 0);\n    uvs[21] = new Vector2(0, 0);\n    uvs[22] = new Vector2(0, 1);\n    uvs[23] = new Vector2(1, 1);\n\n    const indices = new Uint16Array(36);\n\n    // prettier-ignore\n    // Up\n    indices[0] = 0, indices[1] = 2, indices[2] = 1, indices[3] = 2, indices[4] = 0, indices[5] = 3,\n    // Down\n    indices[6] = 4, indices[7] = 6, indices[8] = 7, indices[9] = 6, indices[10] = 4, indices[11] = 5,\n    // Left\n    indices[12] = 8, indices[13] = 10, indices[14] = 9, indices[15] = 10, indices[16] = 8, indices[17] = 11,\n    // Right\n    indices[18] = 12, indices[19] = 14, indices[20] = 15, indices[21] = 14, indices[22] = 12, indices[23] = 13,\n    // Front\n    indices[24] = 16, indices[25] = 18, indices[26] = 17, indices[27] = 18, indices[28] = 16, indices[29] = 19,\n    // Back\n    indices[30] = 20, indices[31] = 22, indices[32] = 23, indices[33] = 22, indices[34] = 20, indices[35] = 21;\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-halfWidth, -halfHeight, -halfDepth);\n    bounds.max.setValue(halfWidth, halfHeight, halfDepth);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a plane mesh.\n   * @param engine - Engine\n   * @param width - Plane width\n   * @param height - Plane height\n   * @param horizontalSegments - Plane horizontal segments\n   * @param verticalSegments - Plane vertical segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Plane model mesh\n   */\n  static createPlane(\n    engine: Engine,\n    width: number = 1,\n    height: number = 1,\n    horizontalSegments: number = 1,\n    verticalSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    horizontalSegments = Math.max(1, Math.floor(horizontalSegments));\n    verticalSegments = Math.max(1, Math.floor(verticalSegments));\n\n    const horizontalCount = horizontalSegments + 1;\n    const verticalCount = verticalSegments + 1;\n    const halfWidth = width / 2;\n    const halfHeight = height / 2;\n    const gridWidth = width / horizontalSegments;\n    const gridHeight = height / verticalSegments;\n    const vertexCount = horizontalCount * verticalCount;\n    const rectangleCount = verticalSegments * horizontalSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n    const horizontalCountReciprocal = 1.0 / horizontalCount;\n    const horizontalSegmentsReciprocal = 1.0 / horizontalSegments;\n    const verticalSegmentsReciprocal = 1.0 / verticalSegments;\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    for (let i = 0; i < vertexCount; ++i) {\n      const x = i % horizontalCount;\n      const y = (i * horizontalCountReciprocal) | 0;\n\n      // Position\n      positions[i] = new Vector3(x * gridWidth - halfWidth, y * gridHeight - halfHeight, 0);\n      // Normal\n      normals[i] = new Vector3(0, 0, 1);\n      // Texcoord\n      uvs[i] = new Vector2(x * horizontalSegmentsReciprocal, 1 - y * verticalSegmentsReciprocal);\n    }\n\n    let offset = 0;\n    for (let i = 0; i < rectangleCount; ++i) {\n      const x = i % horizontalSegments;\n      const y = (i * horizontalSegmentsReciprocal) | 0;\n\n      const a = y * horizontalCount + x;\n      const b = a + 1;\n      const c = a + horizontalCount;\n      const d = c + 1;\n\n      indices[offset++] = b;\n      indices[offset++] = c;\n      indices[offset++] = a;\n      indices[offset++] = b;\n      indices[offset++] = d;\n      indices[offset++] = c;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-halfWidth, -halfHeight, 0);\n    bounds.max.setValue(halfWidth, halfHeight, 0);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cylinder mesh.\n   * @param engine - Engine\n   * @param radiusTop - The radius of top cap\n   * @param radiusBottom - The radius of bottom cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cylinder model mesh\n   */\n  static createCylinder(\n    engine: Engine,\n    radiusTop: number = 0.5,\n    radiusBottom: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const capTriangleCount = radialSegments * 2;\n    const totalVertexCount = torsoVertexCount + 2 + capTriangleCount;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + capTriangleCount * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const radiusDiff = radiusBottom - radiusTop;\n    const slope = radiusDiff / height;\n    const radiusSlope = radiusDiff / heightSegments;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const radius = radiusBottom - y * radiusSlope;\n\n      let posX = radius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = radius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Top position\n    positions[torsoVertexCount + 1] = new Vector3(0, halfHeight, 0);\n    // Top normal\n    normals[torsoVertexCount + 1] = new Vector3(0, 1, 0);\n    // Top texcoord\n    uvs[torsoVertexCount + 1] = new Vector2(0.5, 0.5);\n\n    // Add cap vertices\n    let offset = torsoVertexCount + 2;\n\n    const diameterTopReciprocal = 1.0 / (radiusTop * 2);\n    const diameterBottomReciprocal = 1.0 / (radiusBottom * 2);\n    const positionStride = radialCount * heightSegments;\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPosBottom = positions[i];\n      let curPosX = curPosBottom.x;\n      let curPosZ = curPosBottom.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n\n      const curPosTop = positions[i + positionStride];\n      curPosX = curPosTop.x;\n      curPosZ = curPosTop.z;\n\n      // Top position\n      positions[offset] = new Vector3(curPosX, halfHeight, curPosZ);\n      // Top normal\n      normals[offset] = new Vector3(0, 1, 0);\n      // Top texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterTopReciprocal + 0.5, curPosZ * diameterTopReciprocal + 0.5);\n    }\n\n    // Add cap indices\n    const topCapIndex = torsoVertexCount + 1;\n    const bottomIndiceIndex = torsoVertexCount + 2;\n    const topIndiceIndex = bottomIndiceIndex + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i * 2;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 2;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n\n      // Top\n      indices[indicesOffset++] = topCapIndex;\n      indices[indicesOffset++] = topIndiceIndex + firstStride;\n      indices[indicesOffset++] = topIndiceIndex + secondStride;\n    }\n\n    const { bounds } = mesh;\n    const radiusMax = Math.max(radiusTop, radiusBottom);\n    bounds.min.setValue(-radiusMax, -halfHeight, -radiusMax);\n    bounds.max.setValue(radiusMax, halfHeight, radiusMax);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a torus mesh.\n   * @param engine - Engine\n   * @param radius - Torus radius\n   * @param tubeRadius - Torus tube\n   * @param radialSegments - Torus radial segments\n   * @param tubularSegments - Torus tubular segments\n   * @param arc - Central angle\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Torus model mesh\n   */\n  static createTorus(\n    engine: Engine,\n    radius: number = 0.5,\n    tubeRadius: number = 0.1,\n    radialSegments: number = 30,\n    tubularSegments: number = 30,\n    arc: number = 360,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    tubularSegments = Math.floor(tubularSegments);\n\n    const vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    const rectangleCount = radialSegments * tubularSegments;\n    const indices = PrimitiveMesh._generateIndices(engine, vertexCount, rectangleCount * 6);\n\n    const positions: Vector3[] = new Array(vertexCount);\n    const normals: Vector3[] = new Array(vertexCount);\n    const uvs: Vector2[] = new Array(vertexCount);\n\n    arc = (arc / 180) * Math.PI;\n\n    let offset = 0;\n\n    for (let i = 0; i <= radialSegments; i++) {\n      for (let j = 0; j <= tubularSegments; j++) {\n        const u = (j / tubularSegments) * arc;\n        const v = (i / radialSegments) * Math.PI * 2;\n        const cosV = Math.cos(v);\n        const sinV = Math.sin(v);\n        const cosU = Math.cos(u);\n        const sinU = Math.sin(u);\n\n        const position = new Vector3(\n          (radius + tubeRadius * cosV) * cosU,\n          (radius + tubeRadius * cosV) * sinU,\n          tubeRadius * sinV\n        );\n        positions[offset] = position;\n\n        const centerX = radius * cosU;\n        const centerY = radius * sinU;\n        normals[offset] = new Vector3(position.x - centerX, position.y - centerY, position.z).normalize();\n\n        uvs[offset++] = new Vector2(j / tubularSegments, i / radialSegments);\n      }\n    }\n\n    offset = 0;\n    for (let i = 1; i <= radialSegments; i++) {\n      for (let j = 1; j <= tubularSegments; j++) {\n        const a = (tubularSegments + 1) * i + j - 1;\n        const b = (tubularSegments + 1) * (i - 1) + j - 1;\n        const c = (tubularSegments + 1) * (i - 1) + j;\n        const d = (tubularSegments + 1) * i + j;\n\n        indices[offset++] = a;\n        indices[offset++] = b;\n        indices[offset++] = d;\n\n        indices[offset++] = b;\n        indices[offset++] = c;\n        indices[offset++] = d;\n      }\n    }\n\n    const { bounds } = mesh;\n    const outerRadius = radius + tubeRadius;\n    bounds.min.setValue(-outerRadius, -outerRadius, -tubeRadius);\n    bounds.max.setValue(outerRadius, outerRadius, tubeRadius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  /**\n   * Create a cone mesh.\n   * @param engine - Engine\n   * @param radius - The radius of cap\n   * @param height - The height of torso\n   * @param radialSegments - Cylinder radial segments\n   * @param heightSegments - Cylinder height segments\n   * @param noLongerAccessible - No longer access the vertices of the mesh after creation\n   * @returns Cone model mesh\n   */\n  static createCone(\n    engine: Engine,\n    radius: number = 0.5,\n    height: number = 2,\n    radialSegments: number = 20,\n    heightSegments: number = 1,\n    noLongerAccessible: boolean = true\n  ): ModelMesh {\n    const mesh = new ModelMesh(engine);\n    radialSegments = Math.floor(radialSegments);\n    heightSegments = Math.floor(heightSegments);\n\n    const radialCount = radialSegments + 1;\n    const verticalCount = heightSegments + 1;\n    const halfHeight = height * 0.5;\n    const unitHeight = height / heightSegments;\n    const torsoVertexCount = radialCount * verticalCount;\n    const torsoRectangleCount = radialSegments * heightSegments;\n    const totalVertexCount = torsoVertexCount + 1 + radialSegments;\n    const indices = PrimitiveMesh._generateIndices(\n      engine,\n      totalVertexCount,\n      torsoRectangleCount * 6 + radialSegments * 3\n    );\n    const radialCountReciprocal = 1.0 / radialCount;\n    const radialSegmentsReciprocal = 1.0 / radialSegments;\n    const heightSegmentsReciprocal = 1.0 / heightSegments;\n\n    const positions: Vector3[] = new Array(totalVertexCount);\n    const normals: Vector3[] = new Array(totalVertexCount);\n    const uvs: Vector2[] = new Array(totalVertexCount);\n\n    let indicesOffset = 0;\n\n    // Create torso\n    const thetaStart = Math.PI;\n    const thetaRange = Math.PI * 2;\n    const slope = radius / height;\n\n    for (let i = 0; i < torsoVertexCount; ++i) {\n      const x = i % radialCount;\n      const y = (i * radialCountReciprocal) | 0;\n      const u = x * radialSegmentsReciprocal;\n      const v = y * heightSegmentsReciprocal;\n      const theta = thetaStart + u * thetaRange;\n      const sinTheta = Math.sin(theta);\n      const cosTheta = Math.cos(theta);\n      const curRadius = radius - y * radius;\n\n      let posX = curRadius * sinTheta;\n      let posY = y * unitHeight - halfHeight;\n      let posZ = curRadius * cosTheta;\n\n      // Position\n      positions[i] = new Vector3(posX, posY, posZ);\n      // Normal\n      normals[i] = new Vector3(sinTheta, slope, cosTheta);\n      // Texcoord\n      uvs[i] = new Vector2(u, 1 - v);\n    }\n\n    for (let i = 0; i < torsoRectangleCount; ++i) {\n      const x = i % radialSegments;\n      const y = (i * radialSegmentsReciprocal) | 0;\n\n      const a = y * radialCount + x;\n      const b = a + 1;\n      const c = a + radialCount;\n      const d = c + 1;\n\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = c;\n      indices[indicesOffset++] = a;\n      indices[indicesOffset++] = b;\n      indices[indicesOffset++] = d;\n      indices[indicesOffset++] = c;\n    }\n\n    // Bottom position\n    positions[torsoVertexCount] = new Vector3(0, -halfHeight, 0);\n    // Bottom normal\n    normals[torsoVertexCount] = new Vector3(0, -1, 0);\n    // Bottom texcoord\n    uvs[torsoVertexCount] = new Vector2(0.5, 0.5);\n\n    // Add bottom cap vertices\n    let offset = torsoVertexCount + 1;\n    const diameterBottomReciprocal = 1.0 / (radius * 2);\n    for (let i = 0; i < radialSegments; ++i) {\n      const curPos = positions[i];\n      let curPosX = curPos.x;\n      let curPosZ = curPos.z;\n\n      // Bottom position\n      positions[offset] = new Vector3(curPosX, -halfHeight, curPosZ);\n      // Bottom normal\n      normals[offset] = new Vector3(0, -1, 0);\n      // Bottom texcoord\n      uvs[offset++] = new Vector2(curPosX * diameterBottomReciprocal + 0.5, 0.5 - curPosZ * diameterBottomReciprocal);\n    }\n\n    const bottomIndiceIndex = torsoVertexCount + 1;\n    for (let i = 0; i < radialSegments; ++i) {\n      const firstStride = i;\n      const secondStride = i === radialSegments - 1 ? 0 : firstStride + 1;\n\n      // Bottom\n      indices[indicesOffset++] = torsoVertexCount;\n      indices[indicesOffset++] = bottomIndiceIndex + secondStride;\n      indices[indicesOffset++] = bottomIndiceIndex + firstStride;\n    }\n\n    const { bounds } = mesh;\n    bounds.min.setValue(-radius, -halfHeight, -radius);\n    bounds.max.setValue(radius, halfHeight, radius);\n\n    PrimitiveMesh._initialize(mesh, positions, normals, uvs, indices, noLongerAccessible);\n    return mesh;\n  }\n\n  private static _initialize(\n    mesh: ModelMesh,\n    positions: Vector3[],\n    normals: Vector3[],\n    uvs: Vector2[],\n    indices: Uint16Array | Uint32Array,\n    noLongerAccessible: boolean\n  ) {\n    mesh.setPositions(positions);\n    mesh.setNormals(normals);\n    mesh.setUVs(uvs);\n    mesh.setIndices(indices);\n\n    mesh.uploadData(noLongerAccessible);\n    mesh.addSubMesh(0, indices.length);\n  }\n\n  private static _generateIndices(engine: Engine, vertexCount: number, indexCount: number): Uint16Array | Uint32Array {\n    let indices: Uint16Array | Uint32Array = null;\n    if (vertexCount > 65535) {\n      if (engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        indices = new Uint32Array(indexCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(indexCount);\n    }\n    return indices;\n  }\n}\n","import { IndexBufferBinding, IndexFormat, Mesh, Buffer, VertexBufferBinding, VertexElement } from \"../graphic\";\n\n/**\n * BufferMesh.\n */\nexport class BufferMesh extends Mesh {\n  /**\n   * Instanced count, disable instanced drawing when set zero.\n   */\n  get instanceCount(): number {\n    return this._instanceCount;\n  }\n\n  set instanceCount(value: number) {\n    this._instanceCount = value;\n  }\n\n  /**\n   * Vertex buffer binding collection.\n   */\n  get vertexBufferBindings(): Readonly<VertexBufferBinding[]> {\n    return this._vertexBufferBindings;\n  }\n\n  /**\n   * Index buffer binding.\n   */\n  get indexBufferBinding(): IndexBufferBinding {\n    return this._indexBufferBinding;\n  }\n\n  /**\n   * Vertex element collection.\n   */\n  get vertexElements(): Readonly<VertexElement[]> {\n    return this._vertexElements;\n  }\n\n  /**\n   * Set vertex elements.\n   * @param elements - Vertex element collection\n   */\n  setVertexElements(elements: VertexElement[]): void {\n    this._setVertexElements(elements);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBufferBindings: VertexBufferBinding, index?: number): void;\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBuffer - Vertex buffer\n   * @param stride - Vertex buffer data stride\n   * @param index - Vertex buffer index, the default value is 0\n   */\n  setVertexBufferBinding(vertexBuffer: Buffer, stride: number, index?: number): void;\n\n  setVertexBufferBinding(\n    bufferOrBinding: Buffer | VertexBufferBinding,\n    strideOrFirstIndex: number = 0,\n    index: number = 0\n  ): void {\n    let binding = <VertexBufferBinding>bufferOrBinding;\n    const isBinding = binding.buffer !== undefined;\n    isBinding || (binding = new VertexBufferBinding(<Buffer>bufferOrBinding, strideOrFirstIndex));\n\n    const bindings = this._vertexBufferBindings;\n    bindings.length <= index && (bindings.length = index + 1);\n    this._setVertexBufferBinding(isBinding ? strideOrFirstIndex : index, binding);\n  }\n\n  /**\n   * Set vertex buffer binding.\n   * @param vertexBufferBindings - Vertex buffer binding\n   * @param firstIndex - First vertex buffer index, the default value is 0\n   */\n  setVertexBufferBindings(vertexBufferBindings: VertexBufferBinding[], firstIndex: number = 0): void {\n    const bindings = this._vertexBufferBindings;\n    const count = vertexBufferBindings.length;\n    const needLength = firstIndex + count;\n    bindings.length < needLength && (bindings.length = needLength);\n    for (let i = 0; i < count; i++) {\n      this._setVertexBufferBinding(firstIndex + i, vertexBufferBindings[i]);\n    }\n  }\n\n  /**\n   * Set index buffer binding.\n   * @param buffer - Index buffer\n   * @param format - Index buffer format\n   */\n  setIndexBufferBinding(buffer: Buffer, format: IndexFormat): void;\n\n  /**\n   * Set index buffer binding.\n   * @param bufferBinding - Index buffer binding\n   * @remarks When bufferBinding is null, it will clear IndexBufferBinding\n   */\n  setIndexBufferBinding(bufferBinding: IndexBufferBinding | null): void;\n\n  setIndexBufferBinding(bufferOrBinding: Buffer | IndexBufferBinding | null, format?: IndexFormat): void {\n    let binding = <IndexBufferBinding>bufferOrBinding;\n    if (binding) {\n      const isBinding = binding.buffer !== undefined;\n      isBinding || (binding = new IndexBufferBinding(<Buffer>bufferOrBinding, format));\n    }\n    this._setIndexBufferBinding(binding);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * BlendShapeFrame.\n */\nexport class BlendShapeFrame {\n  /** Weight of BlendShapeFrame. */\n  readonly weight: number;\n  /** Delta positions for the frame being added. */\n  readonly deltaPositions: Readonly<Readonly<Vector3>[]>;\n  /** Delta normals for the frame being added. */\n  readonly deltaNormals: Readonly<Readonly<Vector3[]> | null>;\n  /** Delta tangents for the frame being added. */\n  readonly deltaTangents: Readonly<Readonly<Vector3[]> | null>;\n\n  /**\n   * Create a BlendShapeFrame.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  constructor(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals: Vector3[] = null,\n    deltaTangents: Vector3[] = null\n  ) {\n    if (deltaNormals && deltaNormals.length !== deltaPositions.length) {\n      throw \"deltaNormals length must same with deltaPositions length.\";\n    }\n\n    if (deltaTangents && deltaTangents.length !== deltaPositions.length) {\n      throw \"deltaTangents length must same with deltaPositions length.\";\n    }\n\n    this.weight = weight;\n    this.deltaPositions = deltaPositions;\n    this.deltaNormals = deltaNormals;\n    this.deltaTangents = deltaTangents;\n  }\n}\n","import { BlendShapeFrame } from \"./BlendShapeFrame\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\n\n/**\n * BlendShape.\n */\nexport class BlendShape {\n  /** Name of BlendShape. */\n  name: string;\n\n  /** @internal */\n  _useBlendShapeNormal: boolean = false;\n  /** @internal */\n  _useBlendShapeTangent: boolean = false;\n\n  private _frames: BlendShapeFrame[] = [];\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n\n  /**\n   * Frames of BlendShape.\n   */\n  get frames(): Readonly<BlendShapeFrame[]> {\n    return this._frames;\n  }\n\n  /**\n   * Create a BlendShape.\n   * @param name - BlendShape name.\n   */\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  /**\n   * Add a BlendShapeFrame by weight, deltaPositions, deltaNormals and deltaTangents.\n   * @param weight - Weight of BlendShapeFrame\n   * @param deltaPositions - Delta positions for the frame being added\n   * @param deltaNormals - Delta normals for the frame being added\n   * @param deltaTangents - Delta tangents for the frame being added\n   */\n  addFrame(\n    weight: number,\n    deltaPositions: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): BlendShapeFrame;\n\n  /**\n   * Add a BlendShapeFrame.\n   * @param frame - The BlendShapeFrame.\n   */\n  addFrame(frame: BlendShapeFrame): void;\n\n  addFrame(\n    frameOrWeight: BlendShapeFrame | number,\n    deltaPositions?: Vector3[],\n    deltaNormals?: Vector3[],\n    deltaTangents?: Vector3[]\n  ): void | BlendShapeFrame {\n    if (typeof frameOrWeight === \"number\") {\n      const frame = new BlendShapeFrame(frameOrWeight, deltaPositions, deltaNormals, deltaTangents);\n      this._addFrame(frame);\n      return frame;\n    } else {\n      this._addFrame(frameOrWeight);\n    }\n    this._updateFlagManager.distribute();\n  }\n\n  /**\n   * Clear all frames.\n   */\n  clearFrames(): void {\n    this._frames.length = 0;\n    this._updateFlagManager.distribute();\n    this._useBlendShapeNormal = false;\n    this._useBlendShapeTangent = false;\n  }\n\n  /**\n   * @internal\n   */\n  _registerChangeFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  private _addFrame(frame: BlendShapeFrame): void {\n    const frames = this._frames;\n    const frameCount = frames.length;\n    if (frameCount > 0 && frame.deltaPositions.length !== frames[frameCount - 1].deltaPositions.length) {\n      throw \"Frame's deltaPositions length must same with before frame deltaPositions length.\";\n    }\n\n    this._useBlendShapeNormal = this._useBlendShapeNormal || frame.deltaNormals !== null;\n    this._useBlendShapeTangent = this._useBlendShapeTangent || frame.deltaTangents !== null;\n    this._frames.push(frame);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Buffer, BufferBindFlag, BufferUsage, IndexFormat, MeshTopology, SubMesh, VertexElement } from \"../graphic\";\nimport { BufferMesh } from \"../mesh\";\nimport { SystemInfo } from \"../SystemInfo\";\nimport { ClassPool } from \"./ClassPool\";\nimport { SpriteElement } from \"./SpriteElement\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\n\ntype Element = SpriteElement | SpriteMaskElement;\n\nexport abstract class Basic2DBatcher {\n  /** The maximum number of vertex. */\n  static MAX_VERTEX_COUNT: number = 4096;\n  static _canUploadSameBuffer: boolean = true;\n\n  /** @internal */\n  _subMeshPool: ClassPool<SubMesh> = new ClassPool(SubMesh);\n  /** @internal */\n  _batchedQueue: Element[] = [];\n  /** @internal */\n  _meshes: BufferMesh[] = [];\n  /** @internal */\n  _meshCount: number = 1;\n  /** @internal */\n  _vertexBuffers: Buffer[] = [];\n  /** @internal */\n  _indiceBuffers: Buffer[] = [];\n  /** @internal */\n  _vertices: Float32Array;\n  /** @internal */\n  _indices: Uint16Array;\n  /** @internal */\n  _flushId: number = 0;\n  /** @internal */\n  _vertexCount: number = 0;\n  /** @internal */\n  _elementCount: number = 0;\n\n  constructor(engine: Engine) {\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    this._vertices = new Float32Array(MAX_VERTEX_COUNT * 9);\n    this._indices = new Uint16Array(MAX_VERTEX_COUNT * 3);\n\n    const { _meshes, _meshCount } = this;\n    for (let i = 0; i < _meshCount; i++) {\n      _meshes[i] = this._createMesh(engine, i);\n    }\n  }\n\n  drawElement(element: Element): void {\n    const len = element.positions.length;\n    if (this._vertexCount + len > Basic2DBatcher.MAX_VERTEX_COUNT) {\n      this.flush(element.camera.engine);\n    }\n\n    this._vertexCount += len;\n    this._batchedQueue[this._elementCount++] = element;\n  }\n\n  flush(engine: Engine): void {\n    const batchedQueue = this._batchedQueue;\n\n    if (batchedQueue.length === 0) {\n      return;\n    }\n\n    this._updateData(engine);\n    this.drawBatches(engine);\n\n    if (!Basic2DBatcher._canUploadSameBuffer) {\n      this._flushId++;\n    }\n\n    batchedQueue.length = 0;\n    this._subMeshPool.resetPool();\n    this._vertexCount = 0;\n    this._elementCount = 0;\n  }\n\n  clear(): void {\n    this._flushId = 0;\n    this._vertexCount = 0;\n    this._elementCount = 0;\n    this._batchedQueue.length = 0;\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n\n  private _createMesh(engine: Engine, index: number): BufferMesh {\n    const { MAX_VERTEX_COUNT } = Basic2DBatcher;\n    const mesh = new BufferMesh(engine, `BufferMesh${index}`);\n\n    const vertexElements: VertexElement[] = [];\n    const vertexStride = this.createVertexElements(vertexElements);\n\n    // vertices\n    this._vertexBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.VertexBuffer,\n      MAX_VERTEX_COUNT * 4 * vertexStride,\n      BufferUsage.Dynamic\n    );\n    // indices\n    this._indiceBuffers[index] = new Buffer(\n      engine,\n      BufferBindFlag.IndexBuffer,\n      MAX_VERTEX_COUNT * 3,\n      BufferUsage.Dynamic\n    );\n    mesh.setVertexBufferBinding(this._vertexBuffers[index], vertexStride);\n    mesh.setIndexBufferBinding(this._indiceBuffers[index], IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n\n    return mesh;\n  }\n\n  private _updateData(engine: Engine): void {\n    const { _meshes, _flushId } = this;\n\n    if (!Basic2DBatcher._canUploadSameBuffer && this._meshCount <= _flushId) {\n      this._meshCount++;\n      _meshes[_flushId] = this._createMesh(engine, _flushId);\n    }\n\n    const { _batchedQueue: batchedQueue, _vertices: vertices, _indices: indices } = this;\n    const mesh = _meshes[_flushId];\n    mesh.clearSubMesh();\n\n    let vertexIndex = 0;\n    let indiceIndex = 0;\n    let vertexStartIndex = 0;\n    let vertexCount = 0;\n    let curIndiceStartIndex = 0;\n    let curMeshIndex = 0;\n    let preElement: Element = null;\n    for (let i = 0, len = batchedQueue.length; i < len; i++) {\n      const curElement = batchedQueue[i];\n\n      // Batch vertex\n      vertexIndex = this.updateVertices(curElement, vertices, vertexIndex);\n\n      // Batch indice\n      const { triangles } = curElement;\n      const triangleNum = triangles.length;\n      for (let j = 0; j < triangleNum; j++) {\n        indices[indiceIndex++] = triangles[j] + curIndiceStartIndex;\n      }\n\n      curIndiceStartIndex += curElement.positions.length;\n\n      if (preElement === null) {\n        vertexCount += triangleNum;\n      } else {\n        if (this.canBatch(preElement, curElement)) {\n          vertexCount += triangleNum;\n        } else {\n          mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n          vertexStartIndex += vertexCount;\n          vertexCount = triangleNum;\n          batchedQueue[curMeshIndex++] = preElement;\n        }\n      }\n\n      preElement = curElement;\n    }\n\n    mesh.addSubMesh(this._getSubMeshFromPool(vertexStartIndex, vertexCount));\n    batchedQueue[curMeshIndex] = preElement;\n\n    this._vertexBuffers[_flushId].setData(vertices, 0, 0, vertexIndex);\n    this._indiceBuffers[_flushId].setData(indices, 0, 0, indiceIndex);\n  }\n\n  private _getSubMeshFromPool(start: number, count: number): SubMesh {\n    const subMesh = this._subMeshPool.getFromPool();\n    subMesh.start = start;\n    subMesh.count = count;\n    subMesh.topology = MeshTopology.Triangles;\n    return subMesh;\n  }\n\n  /**\n   * @internal\n   */\n  abstract createVertexElements(vertexElements: VertexElement[]): number;\n\n  /**\n   * @internal\n   */\n  abstract canBatch(preElement: Element, curElement: Element): boolean;\n\n  /**\n   * @internal\n   */\n  abstract updateVertices(element: Element, vertices: Float32Array, vertexIndex: number): number;\n\n  /**\n   * @internal\n   */\n  abstract drawBatches(engine: Engine): void;\n}\n","import { SpriteMask } from \"../2d/sprite/SpriteMask\";\nimport { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { StencilOperation } from \"../shader/enums/StencilOperation\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteMaskElement } from \"./SpriteMaskElement\";\n\nexport class SpriteMaskBatcher extends Basic2DBatcher {\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    return 20;\n  }\n\n  canBatch(preElement: SpriteMaskElement, curElement: SpriteMaskElement): boolean {\n    if (preElement.isAdd !== curElement.isAdd) {\n      return false;\n    }\n\n    // Compare renderer property\n    const preShaderData = (<SpriteMask>preElement.component).shaderData;\n    const curShaderData = (<SpriteMask>curElement.component).shaderData;\n    const textureProperty = SpriteMask._textureProperty;\n    const alphaCutoffProperty = SpriteMask._alphaCutoffProperty;\n\n    return (\n      preShaderData.getTexture(textureProperty) === curShaderData.getTexture(textureProperty) &&\n      preShaderData.getTexture(alphaCutoffProperty) === curShaderData.getTexture(alphaCutoffProperty)\n    );\n  }\n\n  updateVertices(element: SpriteMaskElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uv } = element;\n    const verticesNum = positions.length;\n    for (let i = 0; i < verticesNum; i++) {\n      const curPos = positions[i];\n      const curUV = uv[i];\n\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(engine: Engine): void {\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const batchedQueue = this._batchedQueue;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteMaskElement = <SpriteMaskElement>batchedQueue[i];\n\n      if (!subMesh || !spriteMaskElement) {\n        return;\n      }\n\n      const renderer = <SpriteMask>spriteMaskElement.component;\n      const material = spriteMaskElement.material;\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      // Update stencil state\n      const stencilState = material.renderState.stencilState;\n      const op = spriteMaskElement.isAdd ? StencilOperation.IncrementSaturate : StencilOperation.DecrementSaturate;\n      stencilState.passOperationFront = op;\n      stencilState.passOperationBack = op;\n\n      const program = material.shader._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      const camera = spriteMaskElement.camera;\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, camera.scene.shaderData);\n      program.uploadAll(program.cameraUniformBlock, camera.shaderData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      material.renderState._apply(engine);\n\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n    }\n  }\n}\n","import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { SpriteMaskBatcher } from \"./SpriteMaskBatcher\";\n\n/**\n * @internal\n */\nexport class SpriteMaskManager {\n  _batcher: SpriteMaskBatcher;\n\n  private _preMaskLayer: number = 0;\n\n  constructor(engine: Engine) {\n    this._batcher = new SpriteMaskBatcher(engine);\n  }\n\n  clear(): void {\n    this._preMaskLayer = 0;\n    this._batcher.clear();\n  }\n\n  preRender(camera: Camera, renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._batcher.clear();\n    this._processMasksDiff(camera, renderer);\n    this._batcher.flush(camera.engine);\n  }\n\n  postRender(renderer: SpriteRenderer): void {\n    if (renderer.maskInteraction === SpriteMaskInteraction.None) {\n      return;\n    }\n\n    this._preMaskLayer = renderer.maskLayer;\n  }\n\n  destroy(): void {\n    this._batcher.destroy();\n    this._batcher = null;\n  }\n\n  private _processMasksDiff(camera: Camera, renderer: SpriteRenderer): void {\n    const preMaskLayer = this._preMaskLayer;\n    const curMaskLayer = renderer.maskLayer;\n    if (preMaskLayer !== curMaskLayer) {\n      const allMasks = camera._renderPipeline._allSpriteMasks;\n      const commonLayer = preMaskLayer & curMaskLayer;\n      const addLayer = curMaskLayer & ~preMaskLayer;\n      const reduceLayer = preMaskLayer & ~curMaskLayer;\n\n      const allMaskElements = allMasks._elements;\n      for (let i = 0, n = allMasks.length; i < n; i++) {\n        const mask = allMaskElements[i];\n        const influenceLayers = mask.influenceLayers;\n\n        if (influenceLayers & commonLayer) {\n          continue;\n        }\n\n        if (influenceLayers & addLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = true;\n          this._batcher.drawElement(maskRenderElement);\n          continue;\n        }\n\n        if (influenceLayers & reduceLayer) {\n          const maskRenderElement = mask._maskElement;\n          maskRenderElement.isAdd = false;\n          this._batcher.drawElement(maskRenderElement);\n        }\n      }\n    }\n  }\n}\n","/**\n * The Background mode enumeration.\n */\nexport enum BackgroundMode {\n  /* Solid color. */\n  SolidColor,\n  /* Sky. */\n  Sky,\n  /** Texture */\n  Texture\n}\n","/**\n * Filling mode of background texture.\n */\nexport enum BackgroundTextureFillMode {\n  /* Maintain the aspect ratio and scale the texture to fit the width of the canvas. */\n  AspectFitWidth,\n  /* Maintain the aspect ratio and scale the texture to fit the height of the canvas. */\n  AspectFitHeight,\n  /* Scale the texture fully fills the canvas. */\n  Fill\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Mesh } from \"../graphic\";\nimport { Material } from \"../material\";\n\n/**\n * Sky.\n */\nexport class Sky {\n  /** Material of the sky. */\n  material: Material;\n  /** Mesh of the sky. */\n  mesh: Mesh;\n  /** @internal */\n  _matrix: Matrix = new Matrix();\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Engine } from \"./Engine\";\nimport { BackgroundMode } from \"./enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"./enums/BackgroundTextureFillMode\";\nimport { Sky } from \"./sky/Sky\";\nimport { Texture2D } from \"./texture\";\n\n/**\n * Background of scene.\n */\nexport class Background {\n  /**\n   * Background mode.\n   * @defaultValue `BackgroundMode.SolidColor`\n   * @remarks If using `BackgroundMode.Sky` mode and material or mesh of the `sky` is not defined, it will downgrade to `BackgroundMode.SolidColor`.\n   */\n  mode: BackgroundMode = BackgroundMode.SolidColor;\n\n  /**\n   * Background solid color.\n   * @defaultValue `new Color(0.25, 0.25, 0.25, 1.0)`\n   * @remarks When `mode` is `BackgroundMode.SolidColor`, the property will take effects.\n   */\n  solidColor: Color = new Color(0.25, 0.25, 0.25, 1.0);\n\n  /**\n   * Background sky.\n   * @remarks When `mode` is `BackgroundMode.Sky`, the property will take effects.\n   */\n  readonly sky: Sky = new Sky();\n\n  /** @internal */\n  _textureFillMode: BackgroundTextureFillMode = BackgroundTextureFillMode.AspectFitHeight;\n\n  private _texture: Texture2D = null;\n\n  /**\n   * Background texture.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._engine._backgroundTextureMaterial.shaderData.setTexture(\"u_baseTexture\", value);\n    }\n  }\n\n  /**\n   * @internal\n   * Background texture fill mode.\n   * @remarks When `mode` is `BackgroundMode.Texture`, the property will take effects.\n   * @defaultValue `BackgroundTextureFillMode.FitHeight`\n   */\n  get textureFillMode(): BackgroundTextureFillMode {\n    return this._textureFillMode;\n  }\n\n  set textureFillMode(value: BackgroundTextureFillMode) {\n    if (value !== this._textureFillMode) {\n      this._textureFillMode = value;\n      this._resizeBackgroundTexture();\n    }\n  }\n\n  /**\n   * Constructor of Background.\n   * @param _engine Engine Which the background belongs to.\n   */\n  constructor(private _engine: Engine) {}\n\n  /**\n   * @internal\n   */\n  _resizeBackgroundTexture(): void {\n    if (!this._texture) {\n      return;\n    }\n    const { canvas } = this._engine;\n    const { width, height } = canvas;\n    const { _backgroundTextureMesh } = this._engine;\n    const positions = _backgroundTextureMesh.getPositions();\n\n    switch (this._textureFillMode) {\n      case BackgroundTextureFillMode.Fill:\n        positions[0].setValue(-1, -1, 1);\n        positions[1].setValue(1, -1, 1);\n        positions[2].setValue(-1, 1, 1);\n        positions[3].setValue(1, 1, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitWidth:\n        const fitWidthScale = (this._texture.height * width) / this.texture.width / height;\n        positions[0].setValue(-1, -fitWidthScale, 1);\n        positions[1].setValue(1, -fitWidthScale, 1);\n        positions[2].setValue(-1, fitWidthScale, 1);\n        positions[3].setValue(1, fitWidthScale, 1);\n        break;\n      case BackgroundTextureFillMode.AspectFitHeight:\n        const fitHeightScale = (this._texture.width * height) / this.texture.height / width;\n        positions[0].setValue(-fitHeightScale, -1, 1);\n        positions[1].setValue(fitHeightScale, -1, 1);\n        positions[2].setValue(-fitHeightScale, 1, 1);\n        positions[3].setValue(fitHeightScale, 1, 1);\n        break;\n    }\n    _backgroundTextureMesh.setPositions(positions);\n    _backgroundTextureMesh.uploadData(false);\n  }\n}\n","/**\n * Diffuse mode.\n */\nexport enum DiffuseMode {\n  /** Solid color mode. */\n  SolidColor,\n\n  /**\n   * SH mode\n   * @remarks\n   * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.\n   */\n  SphericalHarmonics\n}\n","import { Color, SphericalHarmonics3 } from \"@oasis-engine/math\";\nimport { Scene } from \"../Scene\";\nimport { Shader } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { TextureCubeMap } from \"../texture\";\nimport { DiffuseMode } from \"./enums/DiffuseMode\";\n\n/**\n * Ambient light.\n */\nexport class AmbientLight {\n  private static _shMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SH\");\n  private static _specularMacro: ShaderMacro = Shader.getMacroByName(\"O3_USE_SPECULAR_ENV\");\n\n  private static _diffuseColorProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuse\");\n  private static _diffuseSHProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_sh\");\n  private static _diffuseIntensityProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.diffuseIntensity\");\n  private static _specularTextureProperty: ShaderProperty = Shader.getPropertyByName(\"u_env_specularSampler\");\n  private static _specularIntensityProperty: ShaderProperty = Shader.getPropertyByName(\n    \"u_envMapLight.specularIntensity\"\n  );\n  private static _mipLevelProperty: ShaderProperty = Shader.getPropertyByName(\"u_envMapLight.mipMapLevel\");\n\n  private _scene: Scene;\n  private _diffuseSphericalHarmonics: SphericalHarmonics3;\n  private _diffuseSolidColor: Color = new Color(0.212, 0.227, 0.259);\n  private _diffuseIntensity: number = 1.0;\n  private _specularReflection: TextureCubeMap;\n  private _specularIntensity: number = 1.0;\n  private _diffuseMode: DiffuseMode = DiffuseMode.SolidColor;\n  private _shArray: Float32Array = new Float32Array(27);\n\n  /**\n   * Diffuse mode of ambient light.\n   */\n  get diffuseMode(): DiffuseMode {\n    return this._diffuseMode;\n  }\n\n  set diffuseMode(value: DiffuseMode) {\n    this._diffuseMode = value;\n    if (value === DiffuseMode.SphericalHarmonics) {\n      this._scene.shaderData.enableMacro(AmbientLight._shMacro);\n    } else {\n      this._scene.shaderData.disableMacro(AmbientLight._shMacro);\n    }\n  }\n\n  /**\n   * Diffuse reflection solid color.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SolidColor`.\n   */\n  get diffuseSolidColor(): Color {\n    return this._diffuseSolidColor;\n  }\n\n  set diffuseSolidColor(value: Color) {\n    if (value !== this._diffuseSolidColor) {\n      value.cloneTo(this._diffuseSolidColor);\n    }\n  }\n\n  /**\n   * Diffuse reflection spherical harmonics 3.\n   * @remarks Effective when diffuse reflection mode is `DiffuseMode.SphericalHarmonics`.\n   */\n  get diffuseSphericalHarmonics(): SphericalHarmonics3 {\n    return this._diffuseSphericalHarmonics;\n  }\n\n  set diffuseSphericalHarmonics(value: SphericalHarmonics3) {\n    this._diffuseSphericalHarmonics = value;\n    const shaderData = this._scene.shaderData;\n\n    if (value) {\n      shaderData.setFloatArray(AmbientLight._diffuseSHProperty, this._preComputeSH(value, this._shArray));\n    }\n  }\n\n  /**\n   * Diffuse reflection intensity.\n   */\n  get diffuseIntensity(): number {\n    return this._diffuseIntensity;\n  }\n\n  set diffuseIntensity(value: number) {\n    this._diffuseIntensity = value;\n    this._scene.shaderData.setFloat(AmbientLight._diffuseIntensityProperty, value);\n  }\n\n  /**\n   * Specular reflection texture.\n   */\n  get specularTexture(): TextureCubeMap {\n    return this._specularReflection;\n  }\n\n  set specularTexture(value: TextureCubeMap) {\n    this._specularReflection = value;\n\n    const shaderData = this._scene.shaderData;\n\n    if (value) {\n      shaderData.setTexture(AmbientLight._specularTextureProperty, value);\n      shaderData.setFloat(AmbientLight._mipLevelProperty, this._specularReflection.mipmapCount);\n      shaderData.enableMacro(AmbientLight._specularMacro);\n    } else {\n      shaderData.disableMacro(AmbientLight._specularMacro);\n    }\n  }\n\n  /**\n   * Specular reflection intensity.\n   */\n  get specularIntensity(): number {\n    return this._specularIntensity;\n  }\n\n  set specularIntensity(value: number) {\n    this._specularIntensity = value;\n    this._scene.shaderData.setFloat(AmbientLight._specularIntensityProperty, value);\n  }\n\n  constructor(scene: Scene) {\n    this._scene = scene;\n\n    const { shaderData } = this._scene;\n    shaderData.setColor(AmbientLight._diffuseColorProperty, this._diffuseSolidColor);\n    shaderData.setFloat(AmbientLight._diffuseIntensityProperty, this._diffuseIntensity);\n    shaderData.setFloat(AmbientLight._specularIntensityProperty, this._specularIntensity);\n  }\n\n  private _preComputeSH(sh: SphericalHarmonics3, out: Float32Array): Float32Array {\n    /**\n     * Basis constants\n     *\n     * 0: 1/2 * Math.sqrt(1 / Math.PI)\n     *\n     * 1: -1/2 * Math.sqrt(3 / Math.PI)\n     * 2: 1/2 * Math.sqrt(3 / Math.PI)\n     * 3: -1/2 * Math.sqrt(3 / Math.PI)\n     *\n     * 4: 1/2 * Math.sqrt(15 / Math.PI)\n     * 5: -1/2 * Math.sqrt(15 / Math.PI)\n     * 6: 1/4 * Math.sqrt(5 / Math.PI)\n     * 7: -1/2 * Math.sqrt(15 / Math.PI)\n     * 8: 1/4 * Math.sqrt(15 / Math.PI)\n     */\n\n    /**\n     * Convolution kernel\n     *\n     * 0: Math.PI\n     * 1: (2 * Math.PI) / 3\n     * 2: Math.PI / 4\n     */\n\n    const src = sh.coefficients;\n\n    // l0\n    out[0] = src[0] * 0.886227; // kernel0 * basis0 = 0.886227\n    out[1] = src[1] * 0.886227;\n    out[2] = src[2] * 0.886227;\n\n    // l1\n    out[3] = src[3] * -1.023327; // kernel1 * basis1 = -1.023327;\n    out[4] = src[4] * -1.023327;\n    out[5] = src[5] * -1.023327;\n    out[6] = src[6] * 1.023327; // kernel1 * basis2 = 1.023327\n    out[7] = src[7] * 1.023327;\n    out[8] = src[8] * 1.023327;\n    out[9] = src[9] * -1.023327; // kernel1 * basis3 = -1.023327\n    out[10] = src[10] * -1.023327;\n    out[11] = src[11] * -1.023327;\n\n    // l2\n    out[12] = src[12] * 0.858086; // kernel2 * basis4 = 0.858086\n    out[13] = src[13] * 0.858086;\n    out[14] = src[14] * 0.858086;\n    out[15] = src[15] * -0.858086; // kernel2 * basis5 = -0.858086\n    out[16] = src[16] * -0.858086;\n    out[17] = src[17] * -0.858086;\n    out[18] = src[18] * 0.247708; // kernel2 * basis6 = 0.247708\n    out[19] = src[19] * 0.247708;\n    out[20] = src[20] * 0.247708;\n    out[21] = src[21] * -0.858086; // kernel2 * basis7 = -0.858086\n    out[22] = src[22] * -0.858086;\n    out[23] = src[23] * -0.858086;\n    out[24] = src[24] * 0.429042; // kernel2 * basis8 = 0.429042\n    out[25] = src[25] * 0.429042;\n    out[26] = src[26] * 0.429042;\n\n    return out;\n  }\n}\n","import { Camera } from \"./Camera\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene feature plug-in.\n * @deprecated\n */\nexport abstract class SceneFeature {\n  /**\n   * Callback before every scene update.\n   * @param scene - Scene\n   */\n  public preUpdate(scene: Scene): void {}\n\n  /**\n   * Callback after every scene update.\n   * @param scene - Scene\n   */\n  public postUpdate(scene: Scene): void {}\n\n  /**\n   * Callback before scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public preRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after scene rendering.\n   * @param scene - Scene\n   * @param camera - Camera\n   */\n  public postRender(scene: Scene, camera: Camera): void {}\n\n  /**\n   * Callback after the scene is destroyed.\n   * @param scene - Scene\n   */\n  public destroy(scene: Scene): void {}\n}\n","import { Matrix } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { LightFeature } from \"./LightFeature\";\n\n/**\n * Light base class.\n */\nexport class Light extends Component {\n  /**\n   * Each type of light source is at most 10, beyond which it will not take effect.\n   * */\n  protected static _maxLight: number = 10;\n\n  private _viewMat: Matrix;\n  private _inverseViewMat: Matrix;\n\n  /**\n   * Mount to the current Scene.\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.findFeature(LightFeature).attachRenderLight(this);\n  }\n\n  /**\n   * Unmount from the current Scene.\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.findFeature(LightFeature).detachRenderLight(this);\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix() {\n    if (!this._viewMat) this._viewMat = new Matrix();\n    Matrix.invert(this.entity.transform.worldMatrix, this._viewMat);\n    return this._viewMat;\n  }\n\n  /**\n   * Inverse view matrix.\n   */\n  get inverseViewMatrix() {\n    if (!this._inverseViewMat) this._inverseViewMat = new Matrix();\n    Matrix.invert(this.viewMatrix, this._inverseViewMat);\n    return this._inverseViewMat;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Directional light.\n */\nexport class DirectLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightColor\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_directLightDirection\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = DirectLight._combinedData;\n\n    shaderData.setFloatArray(DirectLight._colorProperty, data.color);\n    shaderData.setFloatArray(DirectLight._directionProperty, data.direction);\n  }\n\n  color: Color = new Color(1, 1, 1, 1);\n  intensity: number = 1;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _reverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * Get the opposite direction of the directional light direction.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._reverseDirection);\n    return this._reverseDirection;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const lightColor = this.lightColor;\n    const direction = this.direction;\n\n    const data = DirectLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Point light.\n */\nexport class PointLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightPosition\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_pointLightDistance\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = PointLight._combinedData;\n\n    shaderData.setFloatArray(PointLight._colorProperty, data.color);\n    shaderData.setFloatArray(PointLight._positionProperty, data.position);\n    shaderData.setFloatArray(PointLight._distanceProperty, data.distance);\n  }\n  /** Light color. */\n  color: Color = new Color(1, 1, 1, 1);\n  /** Light intensity. */\n  intensity: number = 1.0;\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n\n    const lightColor = this.lightColor;\n    const lightPosition = this.position;\n\n    const data = PointLight._combinedData;\n\n    data.color[colorStart] = lightColor.r;\n    data.color[colorStart + 1] = lightColor.g;\n    data.color[colorStart + 2] = lightColor.b;\n    data.position[positionStart] = lightPosition.x;\n    data.position[positionStart + 1] = lightPosition.y;\n    data.position[positionStart + 2] = lightPosition.z;\n    data.distance[distanceStart] = this.distance;\n  }\n}\n","import { Color, Vector3 } from \"@oasis-engine/math\";\nimport { Shader } from \"../shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Light } from \"./Light\";\n\n/**\n * Spot light.\n */\nexport class SpotLight extends Light {\n  private static _colorProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightColor\");\n  private static _positionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPosition\");\n  private static _directionProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDirection\");\n  private static _distanceProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightDistance\");\n  private static _angleCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightAngleCos\");\n  private static _penumbraCosProperty: ShaderProperty = Shader.getPropertyByName(\"u_spotLightPenumbraCos\");\n\n  private static _combinedData = {\n    color: new Float32Array(3 * Light._maxLight),\n    position: new Float32Array(3 * Light._maxLight),\n    direction: new Float32Array(3 * Light._maxLight),\n    distance: new Float32Array(Light._maxLight),\n    angleCos: new Float32Array(Light._maxLight),\n    penumbraCos: new Float32Array(Light._maxLight)\n  };\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData): void {\n    const data = SpotLight._combinedData;\n\n    shaderData.setFloatArray(SpotLight._colorProperty, data.color);\n    shaderData.setFloatArray(SpotLight._positionProperty, data.position);\n    shaderData.setFloatArray(SpotLight._directionProperty, data.direction);\n    shaderData.setFloatArray(SpotLight._distanceProperty, data.distance);\n    shaderData.setFloatArray(SpotLight._angleCosProperty, data.angleCos);\n    shaderData.setFloatArray(SpotLight._penumbraCosProperty, data.penumbraCos);\n  }\n\n  /** Light color. */\n  color: Color = new Color(1, 1, 1, 1);\n  /** Light intensity. */\n  intensity: number = 1.0;\n  /** Defines a distance cutoff at which the light's intensity must be considered zero. */\n  distance: number = 100;\n  /** Angle, in radians, from centre of spotlight where falloff begins. */\n  angle: number = Math.PI / 6;\n  /** Angle, in radians, from falloff begins to ends. */\n  penumbra: number = Math.PI / 12;\n\n  private _forward: Vector3 = new Vector3();\n  private _lightColor: Color = new Color(1, 1, 1, 1);\n  private _inverseDirection: Vector3 = new Vector3();\n\n  /**\n   * Get light position.\n   */\n  get position(): Vector3 {\n    return this.entity.transform.worldPosition;\n  }\n\n  /**\n   * Get light direction.\n   */\n  get direction(): Vector3 {\n    this.entity.transform.getWorldForward(this._forward);\n    return this._forward;\n  }\n\n  /**\n   * Get the opposite direction of the spotlight.\n   */\n  get reverseDirection(): Vector3 {\n    Vector3.scale(this.direction, -1, this._inverseDirection);\n    return this._inverseDirection;\n  }\n\n  /**\n   * Get the final light color.\n   */\n  get lightColor(): Color {\n    this._lightColor.r = this.color.r * this.intensity;\n    this._lightColor.g = this.color.g * this.intensity;\n    this._lightColor.b = this.color.b * this.intensity;\n    this._lightColor.a = this.color.a * this.intensity;\n    return this._lightColor;\n  }\n\n  /**\n   * @internal\n   */\n  _appendData(lightIndex: number): void {\n    const colorStart = lightIndex * 3;\n    const positionStart = lightIndex * 3;\n    const directionStart = lightIndex * 3;\n    const distanceStart = lightIndex;\n    const penumbraCosStart = lightIndex;\n    const angleCosStart = lightIndex;\n\n    const color = this.lightColor;\n    const position = this.position;\n    const direction = this.direction;\n\n    const data = SpotLight._combinedData;\n\n    data.color[colorStart] = color.r;\n    data.color[colorStart + 1] = color.g;\n    data.color[colorStart + 2] = color.b;\n    data.position[positionStart] = position.x;\n    data.position[positionStart + 1] = position.y;\n    data.position[positionStart + 2] = position.z;\n    data.direction[directionStart] = direction.x;\n    data.direction[directionStart + 1] = direction.y;\n    data.direction[directionStart + 2] = direction.z;\n    data.distance[distanceStart] = this.distance;\n    data.angleCos[angleCosStart] = Math.cos(this.angle);\n    data.penumbraCos[penumbraCosStart] = Math.cos(this.angle + this.penumbra);\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { DirectLight } from \"./DirectLight\";\nimport { Light } from \"./Light\";\nimport { PointLight } from \"./PointLight\";\nimport { SpotLight } from \"./SpotLight\";\n\n/**\n * Determine whether there are lights in the scene.\n * @returns Has light\n */\nexport function hasLight(): boolean {\n  return this.findFeature(LightFeature).visibleLights.length > 0;\n}\n\n/**\n * Light plug-in.\n */\nexport class LightFeature extends SceneFeature {\n  visibleLights: Light[];\n\n  constructor() {\n    super();\n    this.visibleLights = [];\n  }\n\n  /**\n   * Register a light object to the current scene.\n   * @param light\n   */\n  attachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index == -1) {\n      this.visibleLights.push(light);\n    } else {\n      Logger.warn(\"Light already attached.\");\n    }\n  }\n\n  /**\n   * Remove a light object from the current scene.\n   * @param light\n   */\n  detachRenderLight(light: Light): void {\n    const index = this.visibleLights.indexOf(light);\n    if (index != -1) {\n      this.visibleLights.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData(shaderData: ShaderData) {\n    /**\n     * ambientLight and envMapLight only use the last one in the scene\n     * */\n    let directLightCount = 0;\n    let pointLightCount = 0;\n    let spotLightCount = 0;\n\n    let lights = this.visibleLights;\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const light = lights[i];\n      if (light instanceof DirectLight) {\n        light._appendData(directLightCount++);\n      } else if (light instanceof PointLight) {\n        light._appendData(pointLightCount++);\n      } else if (light instanceof SpotLight) {\n        light._appendData(spotLightCount++);\n      }\n    }\n\n    if (directLightCount) {\n      DirectLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_DIRECT_LIGHT_COUNT\", directLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_DIRECT_LIGHT_COUNT\");\n    }\n\n    if (pointLightCount) {\n      PointLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_POINT_LIGHT_COUNT\", pointLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_POINT_LIGHT_COUNT\");\n    }\n\n    if (spotLightCount) {\n      SpotLight._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SPOT_LIGHT_COUNT\", spotLightCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SPOT_LIGHT_COUNT\");\n    }\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Background } from \"./Background\";\nimport { EngineObject, GLCapabilityType, Logger } from \"./base\";\nimport { Camera } from \"./Camera\";\nimport { Engine } from \"./Engine\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { Layer } from \"./Layer\";\nimport { AmbientLight } from \"./lighting/AmbientLight\";\nimport { LightFeature } from \"./lighting/LightFeature\";\nimport { SceneFeature } from \"./SceneFeature\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { ShaderData } from \"./shader/ShaderData\";\n\n/**\n * Scene.\n */\nexport class Scene extends EngineObject {\n  static sceneFeatureManager = new FeatureManager<SceneFeature>();\n\n  /** Scene name. */\n  name: string;\n  /** The background of the scene. */\n  readonly background: Background = new Background(this._engine);\n  /** Ambient light. */\n  readonly ambientLight: AmbientLight;\n  /** Scene-related shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Scene);\n\n  /** @internal */\n  _activeCameras: Camera[] = [];\n  /** @internal */\n  _isActiveInEngine: boolean = false;\n\n  private _destroyed: boolean = false;\n  private _rootEntities: Entity[] = [];\n\n  /**\n   * Count of root entities.\n   */\n  get rootEntitiesCount(): number {\n    return this._rootEntities.length;\n  }\n\n  /**\n   * Root entity collection.\n   */\n  get rootEntities(): Readonly<Entity[]> {\n    return this._rootEntities;\n  }\n\n  /**\n   * Whether it's destroyed.\n   */\n  get destroyed(): boolean {\n    return this._destroyed;\n  }\n\n  /**\n   * Create scene.\n   * @param engine - Engine\n   * @param name - Name\n   */\n  constructor(engine: Engine, name?: string) {\n    super(engine);\n    this.name = name || \"\";\n\n    const shaderData = this.shaderData;\n    Scene.sceneFeatureManager.addObject(this);\n    shaderData._addRefCount(1);\n    this.ambientLight = new AmbientLight(this);\n  }\n\n  /**\n   * Create root entity.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  createRootEntity(name?: string): Entity {\n    const entity = new Entity(this._engine, name);\n    this.addRootEntity(entity);\n    return entity;\n  }\n\n  /**\n   * Append an entity.\n   * @param entity - The root entity to add\n   */\n  addRootEntity(entity: Entity): void {\n    const isRoot = entity._isRoot;\n\n    // let entity become root\n    if (!isRoot) {\n      entity._isRoot = true;\n      entity._removeFromParent();\n    }\n\n    // add or remove from scene's rootEntities\n    const oldScene = entity._scene;\n    if (oldScene !== this) {\n      if (oldScene && isRoot) {\n        oldScene._removeEntity(entity);\n      }\n      this._rootEntities.push(entity);\n      Entity._traverseSetOwnerScene(entity, this);\n    } else if (!isRoot) {\n      this._rootEntities.push(entity);\n    }\n\n    // process entity active/inActive\n    if (this._isActiveInEngine) {\n      !entity._isActiveInHierarchy && entity._isActive && entity._processActive();\n    } else {\n      entity._isActiveInHierarchy && entity._processInActive();\n    }\n  }\n\n  /**\n   * Remove an entity.\n   * @param entity - The root entity to remove\n   */\n  removeRootEntity(entity: Entity): void {\n    if (entity._isRoot && entity._scene == this) {\n      this._removeEntity(entity);\n      this._isActiveInEngine && entity._processInActive();\n      Entity._traverseSetOwnerScene(entity, null);\n    }\n  }\n\n  /**\n   * Get root entity from index.\n   * @param index - Index\n   * @returns Entity\n   */\n  getRootEntity(index: number = 0): Entity | null {\n    return this._rootEntities[index];\n  }\n\n  /**\n   * Find entity globally by name.\n   * @param name - Entity name\n   * @returns Entity\n   */\n  findEntityByName(name: string): Entity | null {\n    const children = this._rootEntities;\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      if (child.name === name) {\n        return child;\n      }\n    }\n\n    for (let i = children.length - 1; i >= 0; i--) {\n      const child = children[i];\n      const entity = child.findByName(name);\n      if (entity) {\n        return entity;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Find entity globally by name,use ‘/’ symbol as a path separator.\n   * @param path - Entity's path\n   * @returns Entity\n   */\n  findEntityByPath(path: string): Entity | null {\n    const splits = path.split(\"/\").filter(Boolean);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      let findEntity = this.getRootEntity(i);\n      if (findEntity.name != splits[0]) continue;\n      for (let j = 1, m = splits.length; j < m; ++j) {\n        findEntity = Entity._findChildByName(findEntity, splits[j]);\n        if (!findEntity) break;\n      }\n      return findEntity;\n    }\n    return null;\n  }\n\n  /**\n   * Destroy this scene.\n   */\n  destroy(): void {\n    if (this._destroyed) {\n      return;\n    }\n    this._isActiveInEngine && (this._engine.sceneManager.activeScene = null);\n    Scene.sceneFeatureManager.callFeatureMethod(this, \"destroy\", [this]);\n    for (let i = 0, n = this.rootEntitiesCount; i < n; i++) {\n      this._rootEntities[i].destroy();\n    }\n    this._rootEntities.length = 0;\n    this._activeCameras.length = 0;\n    (Scene.sceneFeatureManager as any)._objects = [];\n    this.shaderData._addRefCount(-1);\n    this._destroyed = true;\n  }\n\n  /**\n   * @internal\n   */\n  _attachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index === -1) {\n      this._activeCameras.push(camera);\n    } else {\n      Logger.warn(\"Camera already attached.\");\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _detachRenderCamera(camera: Camera): void {\n    const index = this._activeCameras.indexOf(camera);\n    if (index !== -1) {\n      this._activeCameras.splice(index, 1);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _processActive(active: boolean): void {\n    this._isActiveInEngine = active;\n    const rootEntities = this._rootEntities;\n    for (let i = rootEntities.length - 1; i >= 0; i--) {\n      const entity = rootEntities[i];\n      if (entity._isActive) {\n        active ? entity._processActive() : entity._processInActive();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _updateShaderData() {\n    const lightMgr = this.findFeature(LightFeature);\n\n    lightMgr._updateShaderData(this.shaderData);\n  }\n\n  private _removeEntity(entity: Entity): void {\n    const oldRootEntities = this._rootEntities;\n    oldRootEntities.splice(oldRootEntities.indexOf(entity), 1);\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n  static registerFeature(Feature: new () => SceneFeature) {\n    Scene.sceneFeatureManager.registerFeature(Feature);\n  }\n\n  findFeature<T extends SceneFeature>(Feature: { new (): T }): T {\n    return Scene.sceneFeatureManager.findFeature(this, Feature) as T;\n  }\n\n  features: SceneFeature[] = [];\n}\n","import { AssetPromise } from \"./asset/AssetPromise\";\nimport { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Scene manager.\n */\nexport class SceneManager {\n  _activeScene: Scene;\n\n  /**\n   * Get the activated scene.\n   */\n  get activeScene(): Scene {\n    return this._activeScene;\n  }\n\n  set activeScene(scene: Scene) {\n    const oldScene = this._activeScene;\n    if (oldScene !== scene) {\n      oldScene && oldScene._processActive(false);\n      scene && scene._processActive(true);\n      this._activeScene = scene;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(public readonly engine: Engine) {}\n\n  /**\n   * Load and activate scene.\n   * @param url - the path of the scene\n   * @param destroyOldScene - whether to destroy old scene information\n   * @returns scene promise\n   */\n  loadScene(url: string, destroyOldScene: boolean = true): AssetPromise<Scene> {\n    const scenePromise = this.engine.resourceManager.load<Scene>(url);\n    scenePromise.then((scene: Scene) => {\n      const oldScene: Scene = this._activeScene;\n      this.activeScene = scene;\n      if (oldScene && destroyOldScene) {\n        oldScene.destroy();\n      }\n    });\n    return scenePromise;\n  }\n\n  /**\n   * Merge the source scene into the target scene.\n   * @remarks the global information of destScene will be used after the merge, and the lightingMap information will be merged.\n   * @param sourceScene - source scene\n   * @param destScene - target scene\n   */\n  mergeScenes(sourceScene: Scene, destScene: Scene): void {\n    const oldRootEntities = sourceScene.rootEntities;\n    for (let i: number = 0, n: number = oldRootEntities.length; i < n; i++) {\n      destScene.addRootEntity(oldRootEntities[i]);\n    }\n  }\n}\n","import blinnPhongFs from \"../shaderlib/extra/blinn-phong.fs.glsl\";\nimport blinnPhongVs from \"../shaderlib/extra/blinn-phong.vs.glsl\";\nimport particleFs from \"../shaderlib/extra/particle.fs.glsl\";\nimport particleVs from \"../shaderlib/extra/particle.vs.glsl\";\nimport pbrFs from \"../shaderlib/extra/pbr.fs.glsl\";\nimport pbrVs from \"../shaderlib/extra/pbr.vs.glsl\";\nimport shadowMapFs from \"../shaderlib/extra/shadow-map.fs.glsl\";\nimport shadowMapVs from \"../shaderlib/extra/shadow-map.vs.glsl\";\nimport shadowFs from \"../shaderlib/extra/shadow.fs.glsl\";\nimport skyboxFs from \"../shaderlib/extra/skybox.fs.glsl\";\nimport skyboxVs from \"../shaderlib/extra/skybox.vs.glsl\";\nimport spriteMaskFs from \"../shaderlib/extra/sprite-mask.fs.glsl\";\nimport spriteMaskVs from \"../shaderlib/extra/sprite-mask.vs.glsl\";\nimport spriteFs from \"../shaderlib/extra/sprite.fs.glsl\";\nimport spriteVs from \"../shaderlib/extra/sprite.vs.glsl\";\nimport unlitFs from \"../shaderlib/extra/unlit.fs.glsl\";\nimport unlitVs from \"../shaderlib/extra/unlit.vs.glsl\";\nimport backgroundTextureVs from \"../shaderlib/extra/background-texture.vs.glsl\";\nimport backgroundTextureFs from \"../shaderlib/extra/background-texture.fs.glsl\";\nimport { Shader } from \"./Shader\";\n\n/**\n * Internal shader pool.\n * @internal\n */\nexport class ShaderPool {\n  static init(): void {\n    Shader.create(\"blinn-phong\", blinnPhongVs, blinnPhongFs);\n    Shader.create(\"pbr\", pbrVs, pbrFs);\n    Shader.create(\"unlit\", unlitVs, unlitFs);\n    Shader.create(\"shadow-map\", shadowMapVs, shadowMapFs);\n    Shader.create(\"shadow\", shadowMapVs, shadowFs);\n    Shader.create(\"skybox\", skyboxVs, skyboxFs);\n    Shader.create(\"particle-shader\", particleVs, particleFs);\n    Shader.create(\"SpriteMask\", spriteMaskVs, spriteMaskFs);\n    Shader.create(\"Sprite\", spriteVs, spriteFs);\n    Shader.create(\"background-texture\", backgroundTextureVs, backgroundTextureFs);\n  }\n}\n","import { ShaderMacroCollection } from \"./ShaderMacroCollection\";\nimport { ShaderProgram } from \"./ShaderProgram\";\n\n/**\n * Shader program pool.\n * @internal\n */\nexport class ShaderProgramPool {\n  private _cacheHierarchy: number = 1;\n  private _cacheMap: object = Object.create(null);\n  private _lastQueryMap: Record<number, ShaderProgram>;\n  private _lastQueryKey: number;\n\n  /**\n   * Get shader program by macro collection.\n   * @param macros - macro collection\n   * @returns shader program\n   */\n  get(macros: ShaderMacroCollection): ShaderProgram | null {\n    let cacheMap = this._cacheMap;\n    const maskLength = macros._length;\n    if (maskLength > this._cacheHierarchy) {\n      this._resizeCacheMapHierarchy(cacheMap, 0, maskLength);\n    }\n\n    const mask = macros._mask;\n    const endIndex = macros._length - 1;\n    const maxEndIndex = this._cacheHierarchy - 1;\n    for (let i = 0; i < maxEndIndex; i++) {\n      const subMask = endIndex < i ? 0 : mask[i];\n      let subCacheShaders: object = cacheMap[subMask];\n      subCacheShaders || (cacheMap[subMask] = subCacheShaders = Object.create(null));\n      cacheMap = subCacheShaders;\n    }\n\n    const cacheKey = endIndex < maxEndIndex ? 0 : mask[maxEndIndex];\n    const shader = (<Record<number, ShaderProgram>>cacheMap)[cacheKey];\n    if (!shader) {\n      this._lastQueryKey = cacheKey;\n      this._lastQueryMap = <Record<number, ShaderProgram>>cacheMap;\n    }\n    return shader;\n  }\n\n  /**\n   * Cache the shader program.\n   *\n   * @remarks\n   * The method must return an empty value after calling get() to run normally.\n   *\n   * @param shaderProgram - shader program\n   */\n  cache(shaderProgram: ShaderProgram): void {\n    this._lastQueryMap[this._lastQueryKey] = shaderProgram;\n  }\n\n  private _resizeCacheMapHierarchy(cacheMap: object, hierarchy: number, resizeLength: number): void {\n    // only expand but not shrink.\n    const end = this._cacheHierarchy - 1;\n    if (hierarchy == end) {\n      for (let k in cacheMap) {\n        const shader: ShaderProgram = cacheMap[k];\n        for (let i = 0, n = resizeLength - end; i < n; i++) {\n          if (i == n - 1) {\n            cacheMap[0] = shader;\n          } else {\n            cacheMap = cacheMap[i == 0 ? k : 0] = Object.create(null);\n          }\n        }\n      }\n      this._cacheHierarchy = resizeLength;\n    } else {\n      for (let k in cacheMap) {\n        this._resizeCacheMapHierarchy(cacheMap[k], ++hierarchy, resizeLength);\n      }\n    }\n  }\n}\n","import { SceneFeature } from \"../SceneFeature\";\nimport { Collider } from \"./Collider\";\n\nexport class ColliderFeature extends SceneFeature {\n  colliders: Collider[];\n  constructor() {\n    super();\n\n    this.colliders = [];\n  }\n\n  /**\n   * Add a collider component.\n   * @param collider - The collider component to add\n   */\n  attachCollider(collider: Collider) {\n    this.colliders.push(collider);\n  }\n\n  /**\n   * Remove a collider component.\n   * @param collider - The collider component to remove\n   */\n  detachCollider(collider: Collider) {\n    const index = this.colliders.indexOf(collider);\n    if (index != -1) {\n      this.colliders.splice(index, 1);\n    }\n  }\n}\n","import { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { ColliderFeature } from \"./ColliderFeature\";\nimport { Ray, Vector3 } from \"@oasis-engine/math\";\nimport { HitResult } from \"../HitResult\";\n\n/**\n * Define collider data.\n */\nexport class Collider extends Component {\n  private static _ray = new Ray();\n\n  /**\n   * @param {Entity} entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  _onEnable(): void {\n    this.scene.findFeature(ColliderFeature).attachCollider(this);\n  }\n\n  _onDisable(): void {\n    this.scene.findFeature(ColliderFeature).detachCollider(this);\n  }\n\n  protected _updateHitResult(\n    ray: Ray,\n    distance: number,\n    outHit: HitResult,\n    origin: Vector3,\n    isWorldRay: boolean = false\n  ) {\n    ray.getPoint(distance, outHit.point);\n    if (!isWorldRay) {\n      Vector3.transformCoordinate(outHit.point, this.entity.transform.worldMatrix, outHit.point);\n    }\n\n    outHit.distance = Vector3.distance(origin, outHit.point);\n    outHit.collider = this;\n  }\n\n  protected _getLocalRay(ray: Ray): Ray {\n    const worldToLocal = this.entity.getInvModelMatrix();\n    const outRay = Collider._ray;\n\n    Vector3.transformCoordinate(ray.origin, worldToLocal, outRay.origin);\n    Vector3.transformNormal(ray.direction, worldToLocal, outRay.direction);\n    outRay.direction.normalize();\n\n    return outRay;\n  }\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, hit: HitResult): boolean {\n    throw \"Error: use concrete type instead!\";\n  }\n}\n","import { BoundingBox, Ray, Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { Collider } from \"./Collider\";\nimport { HitResult } from \"../HitResult\";\n\n/**\n * Axis Aligned Bound Box (AABB).\n * @extends Collider\n */\nexport class ABoxCollider extends Collider {\n  private static _tempVec3: Vector3 = new Vector3();\n  private static _tempBox: BoundingBox = new BoundingBox();\n\n  public boxMin: Vector3;\n  public boxMax: Vector3;\n\n  private _corners: Array<Vector3> = [];\n  private _cornerFlag: boolean = false;\n\n  /**\n   * Constructor of ABoxCollider.\n   * @param entity - Entity which the box belongs to\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this.boxMin = new Vector3(-0.5, -0.5, -0.5);\n    this.boxMax = new Vector3(0.5, 0.5, 0.5);\n  }\n\n  /**\n   * Set box from the minimum point of the box and the maximum point of the box.\n   * @param min - The minimum point of the box\n   * @param max - The maximum point of the box\n   */\n  setBoxMinMax(min: Vector3, max: Vector3) {\n    this.boxMin = min;\n    this.boxMax = max;\n\n    this._cornerFlag = true;\n  }\n\n  /**\n   * Set box from the center point and the size of the bounding box.\n   * @param center - The center point\n   * @param size - The size of the bounding box\n   */\n  setBoxCenterSize(center: Vector3, size: Vector3) {\n    const halfSize = ABoxCollider._tempVec3;\n    Vector3.scale(size, 0.5, halfSize);\n    Vector3.add(center, halfSize, this.boxMax);\n    Vector3.subtract(center, halfSize, this.boxMin);\n\n    this._cornerFlag = true;\n  }\n\n  /**\n   * Get the eight corners of this bounding box.\n   */\n  getCorners(): Vector3[] {\n    if (this._cornerFlag) {\n      const minX = this.boxMin.x;\n      const minY = this.boxMin.y;\n      const minZ = this.boxMin.z;\n      const w = this.boxMax.x - minX;\n      const h = this.boxMax.y - minY;\n      const d = this.boxMax.z - minZ;\n\n      if (this._corners.length === 0) {\n        for (let i = 0; i < 8; ++i) {\n          this._corners.push(new Vector3());\n        }\n      }\n\n      this._corners[0].setValue(minX + w, minY + h, minZ + d);\n      this._corners[1].setValue(minX, minY + h, minZ + d);\n      this._corners[2].setValue(minX, minY, minZ + d);\n      this._corners[3].setValue(minX + w, minY, minZ + d);\n      this._corners[4].setValue(minX + w, minY + h, minZ);\n      this._corners[5].setValue(minX, minY + h, minZ);\n      this._corners[6].setValue(minX, minY, minZ);\n      this._corners[7].setValue(minX + w, minY, minZ);\n\n      this._cornerFlag = false;\n    }\n\n    return this._corners;\n    // if (this._corners.length === 0) {\n    //   const minX = this.boxMin.x;\n    //   const minY = this.boxMin.y;\n    //   const minZ = this.boxMin.z;\n    //   const w = this.boxMax.x - minX;\n    //   const h = this.boxMax.y - minY;\n    //   const d = this.boxMax.z - minZ;\n\n    //   this._corners = [\n    //     new Vector3(minX + w, minY + h, minZ + d),\n    //     new Vector3(minX, minY + h, minZ + d),\n    //     new Vector3(minX, minY, minZ + d),\n    //     new Vector3(minX + w, minY, minZ + d),\n    //     new Vector3(minX + w, minY + h, minZ),\n    //     new Vector3(minX, minY + h, minZ),\n    //     new Vector3(minX, minY, minZ),\n    //     new Vector3(minX + w, minY, minZ)\n    //   ];\n    // }\n\n    // return this._corners;\n  }\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, hit: HitResult): boolean {\n    const localRay = this._getLocalRay(ray);\n\n    const boundingBox = ABoxCollider._tempBox;\n    this.boxMin.cloneTo(boundingBox.min);\n    this.boxMax.cloneTo(boundingBox.max);\n    const intersect = localRay.intersectBox(boundingBox);\n    if (intersect !== -1) {\n      this._updateHitResult(localRay, intersect, hit, ray.origin);\n      return true;\n    } else {\n      return false;\n    } // end of else\n  }\n}\n","import { Collider } from \"./Collider\";\nimport { Plane, Ray, Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { HitResult } from \"../HitResult\";\n\n/**\n * Represents a plane in three dimensional space.\n */\nexport class PlaneCollider extends Collider {\n  private static _tempPlane: Plane = new Plane();\n\n  planePoint: Vector3;\n  normal: Vector3;\n\n  /**\n   * Constructor of PlaneCollider.\n   * @param entity - Entity which the plane belongs to\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    /** The point through the plane. */\n    this.planePoint = new Vector3();\n\n    /** The normal direction of the plane. */\n    this.normal = new Vector3(0, 1, 0);\n  }\n\n  /**\n   * Set a plane from point and normal.\n   * @param  point - The point through the plane\n   * @param  normal - The normal direction of the plane\n   */\n  setPlane(point: Vector3, normal: Vector3) {\n    this.planePoint = point;\n    this.normal = normal;\n  }\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, hit: HitResult): boolean {\n    const localRay = this._getLocalRay(ray);\n\n    const boundingPlane = PlaneCollider._tempPlane;\n    this.normal.cloneTo(boundingPlane.normal);\n    boundingPlane.distance = -Vector3.dot(this.planePoint, boundingPlane.normal);\n    const intersect = localRay.intersectPlane(boundingPlane);\n    if (intersect !== -1) {\n      this._updateHitResult(localRay, intersect, hit, ray.origin);\n      return true;\n    } else {\n      return false;\n    } // end of else\n  }\n}\n","import { Collider } from \"./Collider\";\nimport { BoundingSphere, Ray, Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { HitResult } from \"../HitResult\";\n\n/**\n * A bounding sphere.\n */\nexport class ASphereCollider extends Collider {\n  private static _tempSphere: BoundingSphere = new BoundingSphere();\n\n  center: Vector3;\n  radius: number;\n\n  /**\n   * Constructor of ASphereCollider.\n   * @param  entity - Entity which the sphere belongs to\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    /** The center point of the sphere. */\n    this.center = new Vector3();\n\n    /** The radius of the sphere. */\n    this.radius = 1;\n  }\n\n  /**\n   * Set the center and radius of the sphere.\n   * @param center - The center point of the sphere\n   * @param radius - The radius of the sphere\n   */\n  setSphere(center: Vector3, radius: number) {\n    this.center = center;\n    this.radius = radius;\n  }\n\n  /**\n   * @internal\n   */\n  _raycast(ray: Ray, hit: HitResult): boolean {\n    const { transform } = this.entity;\n    const boundingSphere = ASphereCollider._tempSphere;\n    Vector3.transformCoordinate(this.center, transform.worldMatrix, boundingSphere.center);\n    const lossyScale = transform.lossyWorldScale;\n    boundingSphere.radius = this.radius * Math.max(lossyScale.x, lossyScale.y, lossyScale.z);\n    const intersect = ray.intersectSphere(boundingSphere);\n    if (intersect !== -1) {\n      this._updateHitResult(ray, intersect, hit, ray.origin, true);\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { ABoxCollider } from \"./ABoxCollider\";\n\nexport class BoxCollider extends ABoxCollider {\n  private _center: Vector3 = new Vector3();\n  private _size: Vector3 = new Vector3();\n  private isShowCollider: boolean = true;\n\n  get center(): Vector3 {\n    return this._center;\n  }\n\n  set center(value: Vector3) {\n    this._center = value;\n    this.setBoxCenterSize(this._center, this._size);\n  }\n\n  get size(): Vector3 {\n    return this._size;\n  }\n\n  set size(value: Vector3) {\n    this._size = value;\n    this.setBoxCenterSize(this._center, this._size);\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.center = this.center;\n    this.size = this.size;\n    this.isShowCollider = this.isShowCollider;\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\nimport { Entity } from \"../Entity\";\nimport { ASphereCollider } from \"./ASphereCollider\";\n\nexport class SphereCollider extends ASphereCollider {\n  private __center: Vector3 = new Vector3();\n  private __radius: number = 1.0;\n  private isShowCollider: boolean = true;\n\n  get _center(): Vector3 {\n    return this.__center;\n  }\n\n  set _center(value: Vector3) {\n    this.__center = value;\n    this.setSphere(this.__center, this.__radius);\n  }\n\n  get _radius() {\n    return this.__radius;\n  }\n\n  set _radius(value: number) {\n    this.__radius = value;\n    this.setSphere(this.__center, this.__radius);\n  }\n\n  constructor(entity: Entity) {\n    super(entity);\n\n    this._center = this._center;\n    this._radius = this._radius;\n    this.isShowCollider = this.isShowCollider;\n  }\n}\n","import { ColliderFeature } from \"./ColliderFeature\";\nimport { Scene } from \"../Scene\";\nScene.registerFeature(ColliderFeature);\n\n//-- colliders\nexport { ColliderFeature };\nexport { Collider as ACollider } from \"./Collider\";\nexport { ABoxCollider } from \"./ABoxCollider\";\nexport { PlaneCollider } from \"./PlaneCollider\";\nexport { ASphereCollider } from \"./ASphereCollider\";\nexport { BoxCollider } from \"./BoxCollider\";\nexport { SphereCollider } from \"./SphereCollider\";\n","import { Collider } from \"./collider/Collider\";\nimport { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * Structure used to get information back from a raycast or a sweep.\n */\nexport class HitResult {\n  /** The collider that was hit. */\n  collider: Collider = null;\n  /** The distance from the origin to the hit point. */\n  distance: number = 0;\n  /** The hit point of the collider that was hit in world space. */\n  point: Vector3 = new Vector3();\n  /** The hit normal of the collider that was hit in world space. */\n  normal: Vector3 = new Vector3();\n}\n","import { Ray } from \"@oasis-engine/math\";\nimport { Layer } from \"./Layer\";\nimport { ColliderFeature } from \"./collider\";\nimport { Engine } from \"./Engine\";\nimport { HitResult } from \"./HitResult\";\n\n/*\n * Manager for physical scenes.\n */\nexport class PhysicsManager {\n  private static _currentHit: HitResult = new HitResult();\n\n  private _engine: Engine;\n\n  /**\n   * @internal\n   */\n  constructor(engine: Engine) {\n    this._engine = engine;\n  }\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @returns Returns true if the ray intersects with a Collider, otherwise false.\n   */\n  raycast(ray: Ray): Boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns true if the ray intersects with a Collider, otherwise false.\n   */\n  raycast(ray: Ray, outHitResult: HitResult): Boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @returns Returns true if the ray intersects with a Collider, otherwise false.\n   */\n  raycast(ray: Ray, distance: number): Boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns true if the ray intersects with a Collider, otherwise false.\n   */\n  raycast(ray: Ray, distance: number, outHitResult: HitResult): Boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @returns Returns true if the ray intersects with a Collider, otherwise false.\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer): Boolean;\n\n  /**\n   * Casts a ray through the Scene and returns the first hit.\n   * @param ray - The ray\n   * @param distance - The max distance the ray should check\n   * @param layerMask - Layer mask that is used to selectively ignore Colliders when casting\n   * @param outHitResult - If true is returned, outHitResult will contain more detailed collision information\n   * @returns Returns true if the ray intersects with a Collider, otherwise false.\n   */\n  raycast(ray: Ray, distance: number, layerMask: Layer, outHitResult: HitResult): Boolean;\n\n  raycast(\n    ray: Ray,\n    distanceOrResult?: number | HitResult,\n    layerMaskOrResult?: Layer | HitResult,\n    outHitResult?: HitResult\n  ): Boolean {\n    const cf = this._engine.sceneManager.activeScene.findFeature(ColliderFeature);\n    const colliders = cf.colliders;\n\n    let hitResult: HitResult;\n\n    let distance = Number.MAX_VALUE;\n    if (typeof distanceOrResult === \"number\") {\n      distance = distanceOrResult;\n    } else if (distanceOrResult != undefined) {\n      hitResult = distanceOrResult;\n    }\n\n    let layerMask = Layer.Everything;\n    if (typeof layerMaskOrResult === \"number\") {\n      layerMask = layerMaskOrResult;\n    } else if (layerMaskOrResult != undefined) {\n      hitResult = layerMaskOrResult;\n    }\n\n    if (outHitResult) {\n      hitResult = outHitResult;\n    }\n\n    let isHit = false;\n    const curHit = PhysicsManager._currentHit;\n    for (let i = 0, len = colliders.length; i < len; i++) {\n      const collider = colliders[i];\n\n      if (!(collider.entity.layer & layerMask)) {\n        continue;\n      }\n\n      if (collider._raycast(ray, curHit)) {\n        isHit = true;\n        if (curHit.distance < distance) {\n          if (hitResult) {\n            curHit.normal.cloneTo(hitResult.normal);\n            curHit.point.cloneTo(hitResult.point);\n            hitResult.distance = curHit.distance;\n            hitResult.collider = curHit.collider;\n          } else {\n            return true;\n          }\n          distance = curHit.distance;\n        }\n      }\n    }\n\n    if (!isHit && hitResult) {\n      hitResult.collider = null;\n      hitResult.distance = 0;\n      hitResult.point.setValue(0, 0, 0);\n      hitResult.normal.setValue(0, 0, 0);\n    }\n    return isHit;\n  }\n}\n","import { ResourceManager } from \"./asset/ResourceManager\";\nimport { Event, EventDispatcher, Logger, Time } from \"./base\";\nimport { Canvas } from \"./Canvas\";\nimport { ComponentsManager } from \"./ComponentsManager\";\nimport { EngineFeature } from \"./EngineFeature\";\nimport { Entity } from \"./Entity\";\nimport { FeatureManager } from \"./FeatureManager\";\nimport { RenderQueueType } from \"./material/enums/RenderQueueType\";\nimport { Material } from \"./material/Material\";\nimport { IHardwareRenderer } from \"./renderingHardwareInterface/IHardwareRenderer\";\nimport { ClassPool } from \"./RenderPipeline/ClassPool\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { RenderElement } from \"./RenderPipeline/RenderElement\";\nimport { SpriteElement } from \"./RenderPipeline/SpriteElement\";\nimport { SpriteMaskElement } from \"./RenderPipeline/SpriteMaskElement\";\nimport { SpriteMaskManager } from \"./RenderPipeline/SpriteMaskManager\";\nimport { Scene } from \"./Scene\";\nimport { SceneManager } from \"./SceneManager\";\nimport { BlendFactor } from \"./shader/enums/BlendFactor\";\nimport { BlendOperation } from \"./shader/enums/BlendOperation\";\nimport { ColorWriteMask } from \"./shader/enums/ColorWriteMask\";\nimport { CullMode } from \"./shader/enums/CullMode\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderPool } from \"./shader/ShaderPool\";\nimport { ShaderProgramPool } from \"./shader/ShaderProgramPool\";\nimport { RenderState } from \"./shader/state/RenderState\";\nimport { Texture2D, TextureCubeFace, TextureCubeMap, TextureFormat } from \"./texture\";\nimport { PhysicsManager } from \"./PhysicsManager\";\nimport { ModelMesh, PrimitiveMesh } from \"./mesh\";\nimport { CompareFunction } from \"./shader\";\n\n/** TODO: delete */\nconst engineFeatureManager = new FeatureManager<EngineFeature>();\nShaderPool.init();\n\n/**\n * Engine.\n */\nexport class Engine extends EventDispatcher {\n  /** Physics manager of Engine. */\n  readonly physicsManager: PhysicsManager = new PhysicsManager(this);\n\n  _componentsManager: ComponentsManager = new ComponentsManager();\n  _hardwareRenderer: IHardwareRenderer;\n  _lastRenderState: RenderState = new RenderState();\n  _renderElementPool: ClassPool<RenderElement> = new ClassPool(RenderElement);\n  _spriteElementPool: ClassPool<SpriteElement> = new ClassPool(SpriteElement);\n  _spriteMaskElementPool: ClassPool<SpriteMaskElement> = new ClassPool(SpriteMaskElement);\n  _spriteDefaultMaterial: Material;\n  _spriteMaskDefaultMaterial: Material;\n  _renderContext: RenderContext = new RenderContext();\n\n  /* @internal */\n  _whiteTexture2D: Texture2D;\n  /* @internal */\n  _whiteTextureCube: TextureCubeMap;\n  /* @internal */\n  _backgroundTextureMaterial: Material;\n  /* @internal */\n  _backgroundTextureMesh: ModelMesh;\n  /* @internal */\n  _renderCount: number = 0;\n  /* @internal */\n  _shaderProgramPools: ShaderProgramPool[] = [];\n  /** @internal */\n  _spriteMaskManager: SpriteMaskManager;\n\n  protected _canvas: Canvas;\n  private _resourceManager: ResourceManager = new ResourceManager(this);\n  private _sceneManager: SceneManager = new SceneManager(this);\n  private _vSyncCount: number = 1;\n  private _targetFrameRate: number = 60;\n  private _time: Time = new Time();\n  private _isPaused: boolean = true;\n  private _requestId: number;\n  private _timeoutId: number;\n  private _vSyncCounter: number = 1;\n  private _targetFrameInterval: number = 1000 / 60;\n\n  private _animate = () => {\n    if (this._vSyncCount) {\n      this._requestId = requestAnimationFrame(this._animate);\n      if (this._vSyncCounter++ % this._vSyncCount === 0) {\n        this.update();\n        this._vSyncCounter = 1;\n      }\n    } else {\n      this._timeoutId = window.setTimeout(this._animate, this._targetFrameInterval);\n      this.update();\n    }\n  };\n\n  /**\n   * The canvas to use for rendering.\n   */\n  get canvas(): Canvas {\n    return this._canvas;\n  }\n\n  /**\n   * Get the resource manager.\n   */\n  get resourceManager(): ResourceManager {\n    return this._resourceManager;\n  }\n\n  /**\n   * Get the scene manager.\n   */\n  get sceneManager(): SceneManager {\n    return this._sceneManager;\n  }\n\n  /**\n   * Get the Time class.\n   */\n  get time(): Time {\n    return this._time;\n  }\n\n  /**\n   * Whether the engine is paused.\n   */\n  get isPaused(): boolean {\n    return this._isPaused;\n  }\n\n  /**\n   * The number of vertical synchronization means the number of vertical blanking for one frame.\n   * @remarks 0 means that the vertical synchronization is turned off.\n   */\n  get vSyncCount(): number {\n    return this._vSyncCount;\n  }\n\n  set vSyncCount(value: number) {\n    this._vSyncCount = Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * Set the target frame rate you want to achieve.\n   * @remarks\n   * It only takes effect when vSyncCount = 0 (ie, vertical synchronization is turned off).\n   * The larger the value, the higher the target frame rate, Number.POSITIVE_INFINITY represents the infinite target frame rate.\n   */\n  get targetFrameRate(): number {\n    return this._targetFrameRate;\n  }\n\n  set targetFrameRate(value: number) {\n    value = Math.max(0.000001, value);\n    this._targetFrameRate = value;\n    this._targetFrameInterval = 1000 / value;\n  }\n\n  /**\n   * Create engine.\n   * @param canvas - The canvas to use for rendering\n   * @param hardwareRenderer - Graphics API renderer\n   */\n  constructor(canvas: Canvas, hardwareRenderer: IHardwareRenderer) {\n    super(null);\n    this._hardwareRenderer = hardwareRenderer;\n    this._hardwareRenderer.init(canvas);\n    this._canvas = canvas;\n    // @todo delete\n    engineFeatureManager.addObject(this);\n    this._sceneManager.activeScene = new Scene(this, \"DefaultScene\");\n\n    this._spriteMaskManager = new SpriteMaskManager(this);\n    this._spriteDefaultMaterial = this._createSpriteMaterial();\n    this._spriteMaskDefaultMaterial = this._createSpriteMaskMaterial();\n\n    const whitePixel = new Uint8Array([255, 255, 255, 255]);\n\n    const whiteTexture2D = new Texture2D(this, 1, 1, TextureFormat.R8G8B8A8, false);\n    whiteTexture2D.setPixelBuffer(whitePixel);\n    whiteTexture2D.isGCIgnored = true;\n\n    const whiteTextureCube = new TextureCubeMap(this, 1, TextureFormat.R8G8B8A8, false);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveX, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeX, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveY, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeY, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.PositiveZ, whitePixel);\n    whiteTextureCube.setPixelBuffer(TextureCubeFace.NegativeZ, whitePixel);\n    whiteTextureCube.isGCIgnored = true;\n\n    this._whiteTexture2D = whiteTexture2D;\n    this._whiteTextureCube = whiteTextureCube;\n\n    this._backgroundTextureMaterial = new Material(this, Shader.find(\"background-texture\"));\n    this._backgroundTextureMaterial.isGCIgnored = true;\n    this._backgroundTextureMaterial.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this._backgroundTextureMesh = PrimitiveMesh.createPlane(this, 2, 2, 1, 1, false);\n    this._backgroundTextureMesh.isGCIgnored = true;\n  }\n\n  /**\n   * Create an entity.\n   * @param name - The name of the entity\n   * @returns Entity\n   */\n  createEntity(name?: string): Entity {\n    return new Entity(this, name);\n  }\n\n  /**\n   * Pause the engine.\n   */\n  pause(): void {\n    this._isPaused = true;\n    cancelAnimationFrame(this._requestId);\n    clearTimeout(this._timeoutId);\n  }\n\n  /**\n   * Resume the engine.\n   */\n  resume(): void {\n    if (!this._isPaused) return;\n    this._isPaused = false;\n    this.time.reset();\n    requestAnimationFrame(this._animate);\n  }\n\n  /**\n   * Update the engine loop manually. If you call engine.run(), you generally don't need to call this function.\n   */\n  update(): void {\n    const time = this._time;\n    const deltaTime = time.deltaTime;\n\n    time.tick();\n    this._renderElementPool.resetPool();\n    this._spriteElementPool.resetPool();\n    this._spriteMaskElementPool.resetPool();\n\n    engineFeatureManager.callFeatureMethod(this, \"preTick\", [this, this._sceneManager._activeScene]);\n\n    const scene = this._sceneManager._activeScene;\n    const componentsManager = this._componentsManager;\n    if (scene) {\n      componentsManager.callScriptOnStart();\n      componentsManager.callScriptOnUpdate(deltaTime);\n      componentsManager.callAnimationUpdate(deltaTime);\n      componentsManager.callScriptOnLateUpdate(deltaTime);\n\n      this._render(scene);\n    }\n\n    this._componentsManager.callComponentDestroy();\n\n    engineFeatureManager.callFeatureMethod(this, \"postTick\", [this, this._sceneManager._activeScene]);\n  }\n\n  /**\n   * Execution engine loop.\n   */\n  run(): void {\n    // @todo: delete\n    engineFeatureManager.callFeatureMethod(this, \"preLoad\", [this]);\n    this.resume();\n    this.trigger(new Event(\"run\", this));\n  }\n\n  /**\n   * Destroy engine.\n   */\n  destroy(): void {\n    if (this._sceneManager) {\n      this._whiteTexture2D.destroy(true);\n      this._whiteTextureCube.destroy(true);\n\n      this.trigger(new Event(\"shutdown\", this));\n      engineFeatureManager.callFeatureMethod(this, \"shutdown\", [this]);\n\n      // -- cancel animation\n      this.pause();\n\n      this._animate = null;\n\n      this._sceneManager._activeScene.destroy();\n      this._resourceManager.gc();\n      // If engine destroy, callComponentDestroy() maybe will not call anymore.\n      this._componentsManager.callComponentDestroy();\n      this._sceneManager = null;\n      this._resourceManager = null;\n\n      this._canvas = null;\n\n      this.features = [];\n      this._time = null;\n\n      // delete mask manager\n      this._spriteMaskManager.destroy();\n\n      // todo: delete\n      (engineFeatureManager as any)._objects = [];\n      this.removeAllEventListeners();\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _getShaderProgramPool(shader: Shader): ShaderProgramPool {\n    const index = shader._shaderId;\n    const shaderProgramPools = this._shaderProgramPools;\n    let pool = shaderProgramPools[index];\n    if (!pool) {\n      const length = index + 1;\n      if (length < shaderProgramPools.length) {\n        shaderProgramPools.length = length;\n      }\n      shaderProgramPools[index] = pool = new ShaderProgramPool();\n    }\n    return pool;\n  }\n\n  _render(scene: Scene): void {\n    const cameras = scene._activeCameras;\n    const componentsManager = this._componentsManager;\n    const deltaTime = this.time.deltaTime;\n    componentsManager.callRendererOnUpdate(deltaTime);\n\n    scene._updateShaderData();\n\n    if (cameras.length > 0) {\n      // Sort on priority\n      //@ts-ignore\n      cameras.sort((camera1, camera2) => camera1.priority - camera2.priority);\n      for (let i = 0, l = cameras.length; i < l; i++) {\n        const camera = cameras[i];\n        const cameraEntity = camera.entity;\n        if (camera.enabled && cameraEntity.isActiveInHierarchy) {\n          componentsManager.callCameraOnBeginRender(camera);\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"preRender\", [scene, camera]); //TODO: will be removed\n          camera.render();\n          Scene.sceneFeatureManager.callFeatureMethod(scene, \"postRender\", [scene, camera]); //TODO: will be removed\n          componentsManager.callCameraOnEndRender(camera);\n        }\n      }\n    } else {\n      Logger.debug(\"NO active camera.\");\n    }\n  }\n\n  private _createSpriteMaterial(): Material {\n    const material = new Material(this, Shader.find(\"Sprite\"));\n    const renderState = material.renderState;\n    const target = renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n    renderState.depthState.writeEnabled = false;\n    renderState.rasterState.cullMode = CullMode.Off;\n    material.renderQueueType = RenderQueueType.Transparent;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  private _createSpriteMaskMaterial(): Material {\n    const material = new Material(this, Shader.find(\"SpriteMask\"));\n    const renderState = material.renderState;\n    renderState.blendState.targetBlendState.colorWriteMask = ColorWriteMask.None;\n    renderState.rasterState.cullMode = CullMode.Off;\n    renderState.stencilState.enabled = true;\n    renderState.depthState.enabled = false;\n    material.isGCIgnored = true;\n    return material;\n  }\n\n  //-----------------------------------------@deprecated-----------------------------------\n\n  findFeature(Feature) {\n    return engineFeatureManager.findFeature(this, Feature);\n  }\n\n  static registerFeature(Feature: new () => EngineFeature): void {\n    engineFeatureManager.registerFeature(Feature);\n  }\n\n  features: EngineFeature[] = [];\n}\n","/**\n * System info.\n */\nexport class SystemInfo {\n  /**\n   * The pixel ratio of the device.\n   */\n  static get devicePixelRatio(): number {\n    return window.devicePixelRatio;\n  }\n\n  /**\n   * @internal\n   */\n  static _isIos(): boolean {\n    if (!window) {\n      return false;\n    }\n\n    const ua = window.navigator.userAgent.toLocaleLowerCase();\n    return /iphone|ipad|ipod/.test(ua);\n  }\n}\n","import { Engine } from \"./Engine\";\nimport { Scene } from \"./Scene\";\n\n/**\n * Engine feature plug-in.\n * @deprecated\n */\nexport class EngineFeature {\n  /**\n   * Callback before the engine main loop runs,used to load resource.\n   * @param engine - Engine\n   */\n  public preLoad(engine: Engine): void {}\n\n  /**\n   * Callback before every engine tick.\n   * @param engine - Engine\n   * @param currentScene - Scene\n   */\n  public preTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after every engine tick.\n   * @param  engine - Engine\n   */\n  public postTick(engine: Engine, currentScene: Scene): void {}\n\n  /**\n   * Callback after the engine is destroyed.\n   * @param engine - Engine\n   */\n  public shutdown(engine: Engine): void {}\n}\n","import { Camera } from \"./Camera\";\nimport { ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { ACollider } from \"./collider\";\n/**\n * Script class, used for logic writing.\n */\nexport class Script extends Component {\n  /** @internal */\n  @ignoreClone\n  _started: boolean = false;\n  /** @internal */\n  @ignoreClone\n  _onStartIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onLateUpdateIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPreRenderIndex: number = -1;\n  /** @internal */\n  @ignoreClone\n  _onPostRenderIndex: number = -1;\n  @ignoreClone\n  _entityCacheIndex: number = -1;\n\n  /**\n   * Called when be enabled first time, only once.\n   */\n  onAwake(): void {}\n\n  /**\n   * Called when be enabled.\n   */\n  onEnable(): void {}\n\n  /**\n   * Called before the frame-level loop start for the first time, only once.\n   */\n  onStart(): void {}\n\n  /**\n   * The main loop, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onUpdate(deltaTime: number): void {}\n\n  /**\n   * Called after the onUpdate finished, called frame by frame.\n   * @param deltaTime - The deltaTime when the script update.\n   */\n  onLateUpdate(deltaTime: number): void {}\n\n  /**\n   * Called before camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onBeginRender(camera: Camera): void {}\n\n  /**\n   * Called after camera rendering, called per camera.\n   * @param camera - Current camera.\n   */\n  onEndRender(camera: Camera): void {}\n\n  /**\n   * Called when the collision enter.\n   * @param other Collider\n   */\n  onTriggerEnter(other: ACollider): void {}\n\n  /**\n   * Called when the collision stay.\n   * @remarks onTriggerStay is called every frame while the collision stay.\n   * @param other Collider\n   */\n  onTriggerStay(other: ACollider): void {}\n\n  /**\n   * Called when the collision exit.\n   * @param other Collider\n   */\n  onTriggerExit(other: ACollider): void {}\n\n  /**\n   * Called when the pointer is down while over the Collider.\n   */\n  onPointerDown(): void {}\n\n  /**\n   * Called when the pointer is up while over the Collider.\n   */\n  onPointerUp(): void {}\n\n  /**\n   * Called when the pointer is down and up with the same collider.\n   */\n  onPointerClick(): void {}\n\n  /**\n   * Called when the pointer is enters the Collider.\n   */\n  onPointerEnter(): void {}\n\n  /**\n   * Called when the pointer is no longer over the Collider.\n   */\n  onPointerExit(): void {}\n\n  /**\n   * Called when the pointer is down while over the Collider and is still holding down.\n   * @remarks onPointerDrag is called every frame while the pointer is down.\n   */\n  onPointerDrag(): void {}\n\n  /**\n   * Called when be disabled.\n   */\n  onDisable(): void {}\n\n  /**\n   * Called at the end of the destroyed frame.\n   */\n  onDestroy(): void {}\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onAwake(): void {\n    this.onAwake();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onEnable(): void {\n    const componentsManager = this.engine._componentsManager;\n    const prototype = Script.prototype;\n    if (!this._started) {\n      componentsManager.addOnStartScript(this);\n    }\n    if (this.onUpdate !== prototype.onUpdate) {\n      componentsManager.addOnUpdateScript(this);\n    }\n    if (this.onLateUpdate !== prototype.onLateUpdate) {\n      componentsManager.addOnLateUpdateScript(this);\n    }\n    this._entity._addScript(this);\n    this.onEnable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDisable(): void {\n    const componentsManager = this.engine._componentsManager;\n    // Use \"xxIndex\" is more safe.\n    // When call onDisable it maybe it still not in script queue,for example write \"entity.isActive = false\" in onWake().\n    if (this._onStartIndex !== -1) {\n      componentsManager.removeOnStartScript(this);\n    }\n    if (this._onUpdateIndex !== -1) {\n      componentsManager.removeOnUpdateScript(this);\n    }\n    if (this._onLateUpdateIndex !== -1) {\n      componentsManager.removeOnLateUpdateScript(this);\n    }\n    if (this._entityCacheIndex !== -1) {\n      this._entity._removeScript(this);\n    }\n    this.onDisable();\n  }\n\n  /**\n   * @internal\n   * @inheritDoc\n   * @override\n   */\n  _onDestroy(): void {\n    this.engine._componentsManager.addDestroyComponent(this);\n  }\n}\n","/**\n * Camera clear flags enumeration.\n */\nexport enum CameraClearFlags {\n  /* Clear depth and color from background. */\n  DepthColor,\n  /* Clear depth only. */\n  Depth,\n  /* Do nothing. */\n  None\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderQueue } from \"./RenderQueue\";\n\nlet passNum = 0;\n\n/**\n * RenderPass.\n */\nclass RenderPass {\n  public name: string;\n  public enabled: boolean;\n  public priority: number;\n  public renderTarget: RenderTarget;\n  public replaceMaterial: Material;\n  public mask: Layer;\n  public renderOverride: boolean;\n  public clearFlags: CameraClearFlags | undefined;\n  public clearColor: Color | undefined;\n\n  /**\n   * Create a RenderPass.\n   * @param name - Pass name\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  constructor(\n    name = `RENDER_PASS${passNum++}`,\n    priority = 0,\n    renderTarget = null,\n    replaceMaterial = null,\n    mask = null\n  ) {\n    this.name = name;\n    this.enabled = true;\n    this.priority = priority;\n    this.renderTarget = renderTarget;\n    this.replaceMaterial = replaceMaterial;\n    this.mask = mask || Layer.Everything;\n    this.renderOverride = false; // If renderOverride is set to true, you need to implement the render method\n  }\n\n  /**\n   * Rendering callback, will be executed if renderOverride is set to true.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  render(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  preRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n\n  /**\n   * Post rendering callback.\n   * @param camera - Camera\n   * @param opaqueQueue - Opaque queue\n   * @param alphaTestQueue - Alpha test queue\n   * @param transparentQueue - Transparent queue\n   */\n  postRender(camera: Camera, opaqueQueue: RenderQueue, alphaTestQueue: RenderQueue, transparentQueue: RenderQueue) {}\n}\n\nexport { RenderPass };\n","import { SpriteMaskInteraction } from \"../2d/enums/SpriteMaskInteraction\";\nimport { SpriteRenderer } from \"../2d/sprite/SpriteRenderer\";\nimport { Engine } from \"../Engine\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { ShaderProperty } from \"../shader/ShaderProperty\";\nimport { Basic2DBatcher } from \"./Basic2DBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * @internal\n */\nexport class SpriteBatcher extends Basic2DBatcher {\n  private static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n\n  createVertexElements(vertexElements: VertexElement[]): number {\n    vertexElements[0] = new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0);\n    vertexElements[1] = new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0);\n    vertexElements[2] = new VertexElement(\"COLOR_0\", 20, VertexElementFormat.Vector4, 0);\n    return 36;\n  }\n\n  canBatch(preElement: SpriteElement, curElement: SpriteElement): boolean {\n    const preRenderer = <SpriteRenderer>preElement.component;\n    const curRenderer = <SpriteRenderer>curElement.component;\n\n    // Compare mask\n    if (!this.checkBatchWithMask(preRenderer, curRenderer)) {\n      return false;\n    }\n\n    // Compare renderer property\n    const textureProperty = SpriteBatcher._textureProperty;\n    if (preRenderer.shaderData.getTexture(textureProperty) !== curRenderer.shaderData.getTexture(textureProperty)) {\n      return false;\n    }\n\n    // Compare material\n    return preElement.material === curElement.material;\n  }\n\n  checkBatchWithMask(left: SpriteRenderer, right: SpriteRenderer): boolean {\n    const leftMaskInteraction = left.maskInteraction;\n\n    if (leftMaskInteraction !== right.maskInteraction) {\n      return false;\n    }\n    if (leftMaskInteraction === SpriteMaskInteraction.None) {\n      return true;\n    }\n    return left.maskLayer === right.maskLayer;\n  }\n\n  updateVertices(element: SpriteElement, vertices: Float32Array, vertexIndex: number): number {\n    const { positions, uv, color } = element;\n    const verticesNum = positions.length;\n    for (let i = 0; i < verticesNum; i++) {\n      const curPos = positions[i];\n      const curUV = uv[i];\n\n      vertices[vertexIndex++] = curPos.x;\n      vertices[vertexIndex++] = curPos.y;\n      vertices[vertexIndex++] = curPos.z;\n      vertices[vertexIndex++] = curUV.x;\n      vertices[vertexIndex++] = curUV.y;\n      vertices[vertexIndex++] = color.r;\n      vertices[vertexIndex++] = color.g;\n      vertices[vertexIndex++] = color.b;\n      vertices[vertexIndex++] = color.a;\n    }\n\n    return vertexIndex;\n  }\n\n  drawBatches(engine: Engine): void {\n    const mesh = this._meshes[this._flushId];\n    const subMeshes = mesh.subMeshes;\n    const batchedQueue = this._batchedQueue;\n    const maskManager = engine._spriteMaskManager;\n\n    for (let i = 0, len = subMeshes.length; i < len; i++) {\n      const subMesh = subMeshes[i];\n      const spriteElement = <SpriteElement>batchedQueue[i];\n\n      if (!subMesh || !spriteElement) {\n        return;\n      }\n\n      const renderer = <SpriteRenderer>spriteElement.component;\n      const camera = spriteElement.camera;\n      const material = spriteElement.material;\n      maskManager.preRender(camera, renderer);\n\n      const compileMacros = Shader._compileMacros;\n      // union render global macro and material self macro.\n      ShaderMacroCollection.unionCollection(\n        renderer._globalShaderMacro,\n        material.shaderData._macroCollection,\n        compileMacros\n      );\n\n      const program = material.shader._getShaderProgram(engine, compileMacros);\n      if (!program.isValid) {\n        return;\n      }\n\n      program.bind();\n      program.groupingOtherUniformBlock();\n      program.uploadAll(program.sceneUniformBlock, camera.scene.shaderData);\n      program.uploadAll(program.cameraUniformBlock, camera.shaderData);\n      program.uploadAll(program.rendererUniformBlock, renderer.shaderData);\n      program.uploadAll(program.materialUniformBlock, material.shaderData);\n\n      material.renderState._apply(engine);\n\n      engine._hardwareRenderer.drawPrimitive(mesh, subMesh, program);\n\n      maskManager.postRender(renderer);\n    }\n  }\n\n  destroy(): void {\n    this._batchedQueue = null;\n\n    const { _meshes: meshes, _vertexBuffers: vertexBuffers, _indiceBuffers: indiceBuffers } = this;\n\n    for (let i = 0, n = meshes.length; i < n; ++i) {\n      meshes[i].destroy();\n    }\n    this._meshes = null;\n\n    for (let i = 0, n = vertexBuffers.length; i < n; ++i) {\n      vertexBuffers[i].destroy();\n    }\n    this._vertexBuffers = null;\n\n    for (let i = 0, n = indiceBuffers.length; i < n; ++i) {\n      indiceBuffers[i].destroy();\n    }\n    this._indiceBuffers = null;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Engine } from \"../Engine\";\nimport { Layer } from \"../Layer\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { RenderElement } from \"./RenderElement\";\nimport { SpriteBatcher } from \"./SpriteBatcher\";\nimport { SpriteElement } from \"./SpriteElement\";\n\ntype Item = RenderElement | SpriteElement;\n\n/**\n * Render queue.\n */\nexport class RenderQueue {\n  /**\n   * @internal\n   */\n  static _compareFromNearToFar(a: Item, b: Item): number {\n    return (\n      a.material.renderQueueType - b.material.renderQueueType ||\n      a.component._distanceForSort - b.component._distanceForSort ||\n      b.component._renderSortId - a.component._renderSortId\n    );\n  }\n\n  /**\n   * @internal\n   */\n  static _compareFromFarToNear(a: Item, b: Item): number {\n    return (\n      a.material.renderQueueType - b.material.renderQueueType ||\n      b.component._distanceForSort - a.component._distanceForSort ||\n      b.component._renderSortId - a.component._renderSortId\n    );\n  }\n\n  readonly items: Item[] = [];\n  private _spriteBatcher: SpriteBatcher;\n\n  constructor(engine: Engine) {\n    this._spriteBatcher = new SpriteBatcher(engine);\n  }\n\n  /**\n   * Push a render element.\n   */\n  pushPrimitive(element: RenderElement | SpriteElement): void {\n    this.items.push(element);\n  }\n\n  render(camera: Camera, replaceMaterial: Material, mask: Layer) {\n    const items = this.items;\n    if (items.length === 0) {\n      return;\n    }\n\n    const { engine, scene } = camera;\n    const renderCount = engine._renderCount;\n    const rhi = engine._hardwareRenderer;\n    const sceneData = scene.shaderData;\n    const cameraData = camera.shaderData;\n\n    for (let i = 0, n = items.length; i < n; i++) {\n      const item = items[i];\n      const renderPassFlag = item.component.entity.layer;\n\n      if (!(renderPassFlag & mask)) {\n        continue;\n      }\n\n      if (!!(item as RenderElement).mesh) {\n        this._spriteBatcher.flush(engine);\n\n        const compileMacros = Shader._compileMacros;\n        const element = <RenderElement>item;\n        const renderer = element.component;\n        const material = replaceMaterial ? replaceMaterial : element.material;\n        const rendererData = renderer.shaderData;\n        const materialData = material.shaderData;\n\n        // @todo: temporary solution\n        material._preRender(element);\n\n        // union render global macro and material self macro.\n        ShaderMacroCollection.unionCollection(\n          renderer._globalShaderMacro,\n          materialData._macroCollection,\n          compileMacros\n        );\n\n        const program = material.shader._getShaderProgram(engine, compileMacros);\n        if (!program.isValid) {\n          continue;\n        }\n\n        const switchProgram = program.bind();\n        const switchRenderCount = renderCount !== program._uploadRenderCount;\n\n        if (switchRenderCount) {\n          program.groupingOtherUniformBlock();\n          program.uploadAll(program.sceneUniformBlock, sceneData);\n          program.uploadAll(program.cameraUniformBlock, cameraData);\n          program.uploadAll(program.rendererUniformBlock, rendererData);\n          program.uploadAll(program.materialUniformBlock, materialData);\n          // Ungroup textures should upload default value, texture uint maybe change by logic of texture bind.\n          program.uploadUngroupTextures();\n          program._uploadCamera = camera;\n          program._uploadRenderer = renderer;\n          program._uploadMaterial = material;\n          program._uploadRenderCount = renderCount;\n        } else {\n          if (program._uploadCamera !== camera) {\n            program.uploadAll(program.cameraUniformBlock, cameraData);\n            program._uploadCamera = camera;\n          } else if (switchProgram) {\n            program.uploadTextures(program.cameraUniformBlock, cameraData);\n          }\n\n          if (program._uploadRenderer !== renderer) {\n            program.uploadAll(program.rendererUniformBlock, rendererData);\n            program._uploadRenderer = renderer;\n          } else if (switchProgram) {\n            program.uploadTextures(program.rendererUniformBlock, rendererData);\n          }\n\n          if (program._uploadMaterial !== material) {\n            program.uploadAll(program.materialUniformBlock, materialData);\n            program._uploadMaterial = material;\n          } else if (switchProgram) {\n            program.uploadTextures(program.materialUniformBlock, materialData);\n          }\n\n          // We only consider switchProgram case, because ungroup texture's value is always default.\n          if (switchProgram) {\n            program.uploadUngroupTextures();\n          }\n        }\n        material.renderState._apply(camera.engine);\n        rhi.drawPrimitive(element.mesh, element.subMesh, program);\n      } else {\n        const spriteElement = <SpriteElement>item;\n        this._spriteBatcher.drawElement(spriteElement);\n      }\n    }\n\n    this._spriteBatcher.flush(engine);\n  }\n\n  /**\n   * Clear collection.\n   */\n  clear(): void {\n    this.items.length = 0;\n    this._spriteBatcher.clear();\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._spriteBatcher.destroy();\n    this._spriteBatcher = null;\n  }\n\n  /**\n   * Sort the elements.\n   */\n  sort(compareFunc: Function): void {\n    this._quickSort(this.items, 0, this.items.length, compareFunc);\n  }\n\n  /**\n   * @remarks\n   * Modified based on v8.\n   * https://github.com/v8/v8/blob/7.2-lkgr/src/js/array.js\n   */\n  private _quickSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    while (true) {\n      // Insertion sort is faster for short arrays.\n      if (to - from <= 10) {\n        this._insertionSort(a, from, to, compareFunc);\n        return;\n      }\n      const third_index = (from + to) >> 1;\n      // Find a pivot as the median of first, last and middle element.\n      let v0 = a[from];\n      let v1 = a[to - 1];\n      let v2 = a[third_index];\n      const c01 = compareFunc(v0, v1);\n      if (c01 > 0) {\n        // v1 < v0, so swap them.\n        const tmp = v0;\n        v0 = v1;\n        v1 = tmp;\n      } // v0 <= v1.\n      const c02 = compareFunc(v0, v2);\n      if (c02 >= 0) {\n        // v2 <= v0 <= v1.\n        const tmp = v0;\n        v0 = v2;\n        v2 = v1;\n        v1 = tmp;\n      } else {\n        // v0 <= v1 && v0 < v2\n        const c12 = compareFunc(v1, v2);\n        if (c12 > 0) {\n          // v0 <= v2 < v1\n          const tmp = v1;\n          v1 = v2;\n          v2 = tmp;\n        }\n      }\n      // v0 <= v1 <= v2\n      a[from] = v0;\n      a[to - 1] = v2;\n      const pivot = v1;\n      let low_end = from + 1; // Upper bound of elements lower than pivot.\n      let high_start = to - 1; // Lower bound of elements greater than pivot.\n      a[third_index] = a[low_end];\n      a[low_end] = pivot;\n\n      // From low_end to i are elements equal to pivot.\n      // From i to high_start are elements that haven't been compared yet.\n      partition: for (let i = low_end + 1; i < high_start; i++) {\n        let element = a[i];\n        let order = compareFunc(element, pivot);\n        if (order < 0) {\n          a[i] = a[low_end];\n          a[low_end] = element;\n          low_end++;\n        } else if (order > 0) {\n          do {\n            high_start--;\n            if (high_start == i) break partition;\n            const top_elem = a[high_start];\n            order = compareFunc(top_elem, pivot);\n          } while (order > 0);\n          a[i] = a[high_start];\n          a[high_start] = element;\n          if (order < 0) {\n            element = a[i];\n            a[i] = a[low_end];\n            a[low_end] = element;\n            low_end++;\n          }\n        }\n      }\n      if (to - high_start < low_end - from) {\n        this._quickSort(a, high_start, to, compareFunc);\n        to = low_end;\n      } else {\n        this._quickSort(a, from, low_end, compareFunc);\n        from = high_start;\n      }\n    }\n  }\n\n  private _insertionSort<T>(a: T[], from: number, to: number, compareFunc: Function): void {\n    for (let i = from + 1; i < to; i++) {\n      let j;\n      const element = a[i];\n      for (j = i - 1; j >= from; j--) {\n        const tmp = a[j];\n        const order = compareFunc(tmp, element);\n        if (order > 0) {\n          a[j + 1] = tmp;\n        } else {\n          break;\n        }\n      }\n      a[j + 1] = element;\n    }\n  }\n}\n","import { Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { Background } from \"..\";\nimport { SpriteMask } from \"../2d/sprite/SpriteMask\";\nimport { Logger } from \"../base/Logger\";\nimport { Camera } from \"../Camera\";\nimport { DisorderedArray } from \"../DisorderedArray\";\nimport { Engine } from \"../Engine\";\nimport { BackgroundMode } from \"../enums/BackgroundMode\";\nimport { BackgroundTextureFillMode } from \"../enums/BackgroundTextureFillMode\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { Layer } from \"../Layer\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderMacroCollection } from \"../shader/ShaderMacroCollection\";\nimport { Sky } from \"../sky/Sky\";\nimport { TextureCubeFace } from \"../texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\nimport { RenderContext } from \"./RenderContext\";\nimport { RenderElement } from \"./RenderElement\";\nimport { RenderPass } from \"./RenderPass\";\nimport { RenderQueue } from \"./RenderQueue\";\nimport { SpriteElement } from \"./SpriteElement\";\n\n/**\n * Basic render pipeline.\n */\nexport class BasicRenderPipeline {\n  /** @internal */\n  _opaqueQueue: RenderQueue;\n  /** @internal */\n  _transparentQueue: RenderQueue;\n  /** @internal */\n  _alphaTestQueue: RenderQueue;\n  /** @internal */\n  _allSpriteMasks: DisorderedArray<SpriteMask> = new DisorderedArray();\n\n  private _camera: Camera;\n  private _defaultPass: RenderPass;\n  private _renderPassArray: Array<RenderPass>;\n  private _lastCanvasSize = new Vector2();\n\n  /**\n   * Create a basic render pipeline.\n   * @param camera - Camera\n   */\n  constructor(camera: Camera) {\n    this._camera = camera;\n    const { engine } = camera;\n    this._opaqueQueue = new RenderQueue(engine);\n    this._alphaTestQueue = new RenderQueue(engine);\n    this._transparentQueue = new RenderQueue(engine);\n\n    this._renderPassArray = [];\n    this._defaultPass = new RenderPass(\"default\", 0, null, null, 0);\n    this.addRenderPass(this._defaultPass);\n  }\n\n  /**\n   * Default render pass.\n   */\n  get defaultRenderPass() {\n    return this._defaultPass;\n  }\n\n  /**\n   * Add render pass.\n   * @param nameOrPass - The name of this Pass or RenderPass object. When it is a name, the following parameters need to be provided\n   * @param priority - Priority, less than 0 before the default pass, greater than 0 after the default pass\n   * @param renderTarget - The specified Render Target\n   * @param replaceMaterial -  Replaced material\n   * @param mask - Perform bit and operations with Entity.Layer to filter the objects that this Pass needs to render\n   */\n  addRenderPass(\n    nameOrPass: string | RenderPass,\n    priority: number = null,\n    renderTarget: RenderTarget = null,\n    replaceMaterial: Material = null,\n    mask: Layer = null\n  ) {\n    if (typeof nameOrPass === \"string\") {\n      const renderPass = new RenderPass(nameOrPass, priority, renderTarget, replaceMaterial, mask);\n      this._renderPassArray.push(renderPass);\n    } else if (nameOrPass instanceof RenderPass) {\n      this._renderPassArray.push(nameOrPass);\n    }\n\n    this._renderPassArray.sort(function (p1, p2) {\n      return p1.priority - p2.priority;\n    });\n  }\n\n  /**\n   * Remove render pass by name or render pass object.\n   * @param nameOrPass - Render pass name or render pass object\n   */\n  removeRenderPass(nameOrPass: string | RenderPass): void {\n    let pass: RenderPass;\n    if (typeof nameOrPass === \"string\") pass = this.getRenderPass(nameOrPass);\n    else if (nameOrPass instanceof RenderPass) pass = nameOrPass;\n    if (pass) {\n      const idx = this._renderPassArray.indexOf(pass);\n      this._renderPassArray.splice(idx, 1);\n    }\n  }\n\n  /**\n   * Get render pass by name.\n   * @param  name - Render pass name\n   */\n  getRenderPass(name: string) {\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      const pass = this._renderPassArray[i];\n      if (pass.name === name) return pass;\n    }\n\n    return null;\n  }\n\n  /**\n   * Destroy internal resources.\n   */\n  destroy(): void {\n    this._opaqueQueue.destroy();\n    this._alphaTestQueue.destroy();\n    this._transparentQueue.destroy();\n    this._allSpriteMasks = null;\n    this._renderPassArray = null;\n    this._defaultPass = null;\n    this._camera = null;\n  }\n\n  /**\n   * Perform scene rendering.\n   * @param context - Render context\n   * @param cubeFace - Render surface of cube texture\n   */\n  render(context: RenderContext, cubeFace?: TextureCubeFace) {\n    const camera = this._camera;\n    const opaqueQueue = this._opaqueQueue;\n    const alphaTestQueue = this._alphaTestQueue;\n    const transparentQueue = this._transparentQueue;\n\n    camera.engine._spriteMaskManager.clear();\n\n    opaqueQueue.clear();\n    alphaTestQueue.clear();\n    transparentQueue.clear();\n    this._allSpriteMasks.length = 0;\n\n    camera.engine._componentsManager.callRender(context);\n    opaqueQueue.sort(RenderQueue._compareFromNearToFar);\n    alphaTestQueue.sort(RenderQueue._compareFromNearToFar);\n    transparentQueue.sort(RenderQueue._compareFromFarToNear);\n\n    for (let i = 0, len = this._renderPassArray.length; i < len; i++) {\n      this._drawRenderPass(this._renderPassArray[i], camera, cubeFace);\n    }\n  }\n\n  private _drawRenderPass(pass: RenderPass, camera: Camera, cubeFace?: TextureCubeFace) {\n    pass.preRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n\n    if (pass.enabled) {\n      const { engine, scene } = camera;\n      const { background } = scene;\n      const rhi = engine._hardwareRenderer;\n      const renderTarget = camera.renderTarget || pass.renderTarget;\n      rhi.activeRenderTarget(renderTarget, camera);\n      renderTarget?._setRenderTargetFace(cubeFace);\n      const clearFlags = pass.clearFlags ?? camera.clearFlags;\n      const color = pass.clearColor ?? background.solidColor;\n      if (clearFlags !== CameraClearFlags.None) {\n        rhi.clearRenderTarget(camera.engine, clearFlags, color);\n      }\n\n      if (pass.renderOverride) {\n        pass.render(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n      } else {\n        this._opaqueQueue.render(camera, pass.replaceMaterial, pass.mask);\n        this._alphaTestQueue.render(camera, pass.replaceMaterial, pass.mask);\n        if (background.mode === BackgroundMode.Sky) {\n          this._drawSky(engine, camera, background.sky);\n        } else if (background.mode === BackgroundMode.Texture && background.texture) {\n          this._drawBackgroundTexture(engine, background);\n        }\n        this._transparentQueue.render(camera, pass.replaceMaterial, pass.mask);\n      }\n\n      renderTarget?._blitRenderTarget();\n      renderTarget?.generateMipmaps();\n    }\n\n    pass.postRender(camera, this._opaqueQueue, this._alphaTestQueue, this._transparentQueue);\n  }\n\n  /**\n   * Push a render element to the render queue.\n   * @param element - Render element\n   */\n  pushPrimitive(element: RenderElement | SpriteElement) {\n    const renderQueueType = element.material.renderQueueType;\n\n    if (renderQueueType > (RenderQueueType.Transparent + RenderQueueType.AlphaTest) >> 1) {\n      this._transparentQueue.pushPrimitive(element);\n    } else if (renderQueueType > (RenderQueueType.AlphaTest + RenderQueueType.Opaque) >> 1) {\n      this._alphaTestQueue.pushPrimitive(element);\n    } else {\n      this._opaqueQueue.pushPrimitive(element);\n    }\n  }\n\n  private _drawBackgroundTexture(engine: Engine, background: Background) {\n    const rhi = engine._hardwareRenderer;\n    const { _backgroundTextureMaterial, _backgroundTextureMesh, canvas } = engine;\n\n    if (\n      (this._lastCanvasSize.x !== canvas.width || this._lastCanvasSize.y !== canvas.height) &&\n      background._textureFillMode !== BackgroundTextureFillMode.Fill\n    ) {\n      this._lastCanvasSize.setValue(canvas.width, canvas.height);\n      background._resizeBackgroundTexture();\n    }\n\n    const program = _backgroundTextureMaterial.shader._getShaderProgram(engine, Shader._compileMacros);\n    program.bind();\n    program.uploadAll(program.materialUniformBlock, _backgroundTextureMaterial.shaderData);\n    program.uploadUngroupTextures();\n\n    _backgroundTextureMaterial.renderState._apply(engine);\n    rhi.drawPrimitive(_backgroundTextureMesh, _backgroundTextureMesh.subMesh, program);\n  }\n\n  private _drawSky(engine: Engine, camera: Camera, sky: Sky): void {\n    const { material, mesh, _matrix } = sky;\n    if (!material) {\n      Logger.warn(\"The material of sky is not defined.\");\n      return;\n    }\n    if (!mesh) {\n      Logger.warn(\"The mesh of sky is not defined.\");\n      return;\n    }\n\n    const rhi = engine._hardwareRenderer;\n    const { shaderData, shader, renderState } = material;\n\n    const compileMacros = Shader._compileMacros;\n    ShaderMacroCollection.unionCollection(camera._globalShaderMacro, shaderData._macroCollection, compileMacros);\n\n    const { viewMatrix, projectionMatrix } = camera;\n    viewMatrix.cloneTo(_matrix);\n    const e = _matrix.elements;\n    e[12] = e[13] = e[14] = 0;\n    Matrix.multiply(projectionMatrix, _matrix, _matrix);\n    shaderData.setMatrix(\"u_mvpNoscale\", _matrix);\n\n    const program = shader._getShaderProgram(engine, compileMacros);\n    program.bind();\n    program.groupingOtherUniformBlock();\n    program.uploadAll(program.materialUniformBlock, shaderData);\n    program.uploadUngroupTextures();\n\n    renderState._apply(engine);\n    rhi.drawPrimitive(mesh, mesh.subMesh, program);\n  }\n}\n","import { BoundingFrustum, MathUtil, Matrix, Ray, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { deepClone, ignoreClone } from \"./clone/CloneManager\";\nimport { Component } from \"./Component\";\nimport { dependencies } from \"./ComponentsDependencies\";\nimport { Entity } from \"./Entity\";\nimport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nimport { Layer } from \"./Layer\";\nimport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nimport { RenderContext } from \"./RenderPipeline/RenderContext\";\nimport { ShaderDataGroup } from \"./shader/enums/ShaderDataGroup\";\nimport { Shader } from \"./shader/Shader\";\nimport { ShaderData } from \"./shader/ShaderData\";\nimport { ShaderMacroCollection } from \"./shader/ShaderMacroCollection\";\nimport { TextureCubeFace } from \"./texture/enums/TextureCubeFace\";\nimport { RenderTarget } from \"./texture/RenderTarget\";\nimport { Transform } from \"./Transform\";\nimport { UpdateFlag } from \"./UpdateFlag\";\n\nclass MathTemp {\n  static tempMat4 = new Matrix();\n  static tempVec4 = new Vector4();\n  static tempVec3 = new Vector3();\n  static tempVec2 = new Vector2();\n}\n\n/**\n * Camera component, as the entrance to the three-dimensional world.\n */\n@dependencies(Transform)\nexport class Camera extends Component {\n  private static _viewMatrixProperty = Shader.getPropertyByName(\"u_viewMat\");\n  private static _projectionMatrixProperty = Shader.getPropertyByName(\"u_projMat\");\n  private static _vpMatrixProperty = Shader.getPropertyByName(\"u_VPMat\");\n  private static _inverseViewMatrixProperty = Shader.getPropertyByName(\"u_viewInvMat\");\n  private static _inverseProjectionMatrixProperty = Shader.getPropertyByName(\"u_projInvMat\");\n  private static _cameraPositionProperty = Shader.getPropertyByName(\"u_cameraPos\");\n\n  /** Shader data. */\n  readonly shaderData: ShaderData = new ShaderData(ShaderDataGroup.Camera);\n\n  /** Rendering priority - A Camera with higher priority will be rendered on top of a camera with lower priority. */\n  priority: number = 0;\n\n  /** Whether to enable frustum culling, it is enabled by default. */\n  enableFrustumCulling: boolean = true;\n\n  /**\n   * Determining what to clear when rendering by a Camera.\n   * @defaultValue `CameraClearFlags.DepthColor`\n   */\n  clearFlags: CameraClearFlags = CameraClearFlags.DepthColor;\n\n  /**\n   * Culling mask - which layers the camera renders.\n   * @remarks Support bit manipulation, corresponding to Entity's layer.\n   */\n  cullingMask: Layer = Layer.Everything;\n\n  /** @internal */\n  _globalShaderMacro: ShaderMacroCollection = new ShaderMacroCollection();\n  /** @internal */\n  @deepClone\n  _frustum: BoundingFrustum = new BoundingFrustum();\n  /** @internal */\n  @ignoreClone\n  _renderPipeline: BasicRenderPipeline;\n\n  private _isOrthographic: boolean = false;\n  private _isProjMatSetting = false;\n  private _nearClipPlane: number = 0.1;\n  private _farClipPlane: number = 100;\n  private _fieldOfView: number = 45;\n  private _orthographicSize: number = 10;\n  private _isProjectionDirty = true;\n  private _isInvProjMatDirty: boolean = true;\n  private _isFrustumProjectDirty: boolean = true;\n  private _customAspectRatio: number | undefined = undefined;\n  private _renderTarget: RenderTarget = null;\n\n  @ignoreClone\n  private _frustumViewChangeFlag: UpdateFlag;\n  @ignoreClone\n  private _transform: Transform;\n  @ignoreClone\n  private _isViewMatrixDirty: UpdateFlag;\n  @ignoreClone\n  private _isInvViewProjDirty: UpdateFlag;\n  @deepClone\n  private _projectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewMatrix: Matrix = new Matrix();\n  @deepClone\n  private _viewport: Vector4 = new Vector4(0, 0, 1, 1);\n  @deepClone\n  private _inverseProjectionMatrix: Matrix = new Matrix();\n  @deepClone\n  private _lastAspectSize: Vector2 = new Vector2(0, 0);\n  @deepClone\n  private _invViewProjMat: Matrix = new Matrix();\n\n  /**\n   * Near clip plane - the closest point to the camera when rendering occurs.\n   */\n  get nearClipPlane(): number {\n    return this._nearClipPlane;\n  }\n\n  set nearClipPlane(value: number) {\n    this._nearClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Far clip plane - the furthest point to the camera when rendering occurs.\n   */\n  get farClipPlane(): number {\n    return this._farClipPlane;\n  }\n\n  set farClipPlane(value: number) {\n    this._farClipPlane = value;\n    this._projMatChange();\n  }\n\n  /**\n   * The camera's view angle. activating when camera use perspective projection.\n   */\n  get fieldOfView(): number {\n    return this._fieldOfView;\n  }\n\n  set fieldOfView(value: number) {\n    this._fieldOfView = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Aspect ratio. The default is automatically calculated by the viewport's aspect ratio. If it is manually set,\n   * the manual value will be kept. Call resetAspectRatio() to restore it.\n   */\n  get aspectRatio(): number {\n    const canvas = this._entity.engine.canvas;\n    return this._customAspectRatio ?? (canvas.width * this._viewport.z) / (canvas.height * this._viewport.w);\n  }\n\n  set aspectRatio(value: number) {\n    this._customAspectRatio = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Viewport, normalized expression, the upper left corner is (0, 0), and the lower right corner is (1, 1).\n   * @remarks Re-assignment is required after modification to ensure that the modification takes effect.\n   */\n  get viewport(): Vector4 {\n    return this._viewport;\n  }\n\n  set viewport(value: Vector4) {\n    if (value !== this._viewport) {\n      value.cloneTo(this._viewport);\n    }\n    this._projMatChange();\n  }\n\n  /**\n   * Whether it is orthogonal, the default is false. True will use orthographic projection, false will use perspective projection.\n   */\n  get isOrthographic(): boolean {\n    return this._isOrthographic;\n  }\n\n  set isOrthographic(value: boolean) {\n    this._isOrthographic = value;\n    this._projMatChange();\n  }\n\n  /**\n   * Half the size of the camera in orthographic mode.\n   */\n  get orthographicSize(): number {\n    return this._orthographicSize;\n  }\n\n  set orthographicSize(value: number) {\n    this._orthographicSize = value;\n    this._projMatChange();\n  }\n\n  /**\n   * View matrix.\n   */\n  get viewMatrix(): Readonly<Matrix> {\n    // Remove scale\n    if (this._isViewMatrixDirty.flag) {\n      this._isViewMatrixDirty.flag = false;\n      Matrix.invert(this._transform.worldMatrix, this._viewMatrix);\n    }\n    return this._viewMatrix;\n  }\n\n  /**\n   * The projection matrix is ​​calculated by the relevant parameters of the camera by default.\n   * If it is manually set, the manual value will be maintained. Call resetProjectionMatrix() to restore it.\n   */\n  set projectionMatrix(value: Matrix) {\n    this._projectionMatrix = value;\n    this._isProjMatSetting = true;\n    this._projMatChange();\n  }\n\n  get projectionMatrix(): Matrix {\n    const canvas = this._entity.engine.canvas;\n    if (\n      (!this._isProjectionDirty || this._isProjMatSetting) &&\n      this._lastAspectSize.x === canvas.width &&\n      this._lastAspectSize.y === canvas.height\n    ) {\n      return this._projectionMatrix;\n    }\n    this._isProjectionDirty = false;\n    this._lastAspectSize.x = canvas.width;\n    this._lastAspectSize.y = canvas.height;\n    const aspectRatio = this.aspectRatio;\n    if (!this._isOrthographic) {\n      Matrix.perspective(\n        MathUtil.degreeToRadian(this._fieldOfView),\n        aspectRatio,\n        this._nearClipPlane,\n        this._farClipPlane,\n        this._projectionMatrix\n      );\n    } else {\n      const width = this._orthographicSize * aspectRatio;\n      const height = this._orthographicSize;\n      Matrix.ortho(-width, width, -height, height, this._nearClipPlane, this._farClipPlane, this._projectionMatrix);\n    }\n    return this._projectionMatrix;\n  }\n\n  /**\n   * Whether to enable HDR.\n   * @todo When render pipeline modification\n   */\n  get enableHDR(): boolean {\n    console.log(\"not implementation\");\n    return false;\n  }\n\n  set enableHDR(value: boolean) {\n    console.log(\"not implementation\");\n  }\n\n  /**\n   * RenderTarget. After setting, it will be rendered to the renderTarget. If it is empty, it will be rendered to the main canvas.\n   */\n  get renderTarget(): RenderTarget | null {\n    return this._renderTarget;\n  }\n\n  set renderTarget(value: RenderTarget | null) {\n    this._renderTarget = value;\n  }\n\n  /**\n   * Create the Camera component.\n   * @param entity - Entity\n   */\n  constructor(entity: Entity) {\n    super(entity);\n\n    const transform = this.entity.transform;\n    this._transform = transform;\n    this._isViewMatrixDirty = transform.registerWorldChangeFlag();\n    this._isInvViewProjDirty = transform.registerWorldChangeFlag();\n    this._frustumViewChangeFlag = transform.registerWorldChangeFlag();\n    this._renderPipeline = new BasicRenderPipeline(this);\n    this.shaderData._addRefCount(1);\n  }\n\n  /**\n   * Restore the automatic calculation of projection matrix through fieldOfView, nearClipPlane and farClipPlane.\n   */\n  resetProjectionMatrix(): void {\n    this._isProjMatSetting = false;\n    this._projMatChange();\n  }\n\n  /**\n   * Restore the automatic calculation of the aspect ratio through the viewport aspect ratio.\n   */\n  resetAspectRatio(): void {\n    this._customAspectRatio = undefined;\n    this._projMatChange();\n  }\n\n  /**\n   * Transform a point from world space to viewport space.\n   * @param point - Point in world space\n   * @param out - A point in the viewport space, X and Y are the viewport space coordinates, Z is the viewport depth, the near clipping plane is 0, the far clipping plane is 1, and W is the world unit distance from the camera\n   * @returns Point in viewport space\n   */\n  worldToViewportPoint(point: Vector3, out: Vector4): Vector4 {\n    Matrix.multiply(this.projectionMatrix, this.viewMatrix, MathTemp.tempMat4);\n    MathTemp.tempVec4.setValue(point.x, point.y, point.z, 1.0);\n    Vector4.transform(MathTemp.tempVec4, MathTemp.tempMat4, MathTemp.tempVec4);\n\n    const w = MathTemp.tempVec4.w;\n    const nx = MathTemp.tempVec4.x / w;\n    const ny = MathTemp.tempVec4.y / w;\n    const nz = MathTemp.tempVec4.z / w;\n\n    // Transform of coordinate axis.\n    out.x = (nx + 1.0) * 0.5;\n    out.y = (1.0 - ny) * 0.5;\n    out.z = nz;\n    out.w = w;\n    return out;\n  }\n\n  /**\n   * Transform a point from viewport space to world space.\n   * @param point - Point in viewport space, X and Y are the viewport space coordinates, Z is the viewport depth. The near clipping plane is 0, and the far clipping plane is 1\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  viewportToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    const invViewProjMat = this.invViewProjMat;\n    return this._innerViewportToWorldPoint(point, invViewProjMat, out);\n  }\n\n  /**\n   * Generate a ray by a point in viewport.\n   * @param point - Point in viewport space, which is represented by normalization\n   * @param out - Ray\n   * @returns Ray\n   */\n  viewportPointToRay(point: Vector2, out: Ray): Ray {\n    const clipPoint = MathTemp.tempVec3;\n    // Use the intersection of the near clipping plane as the origin point.\n    clipPoint.setValue(point.x, point.y, 0);\n    const origin = this.viewportToWorldPoint(clipPoint, out.origin);\n    // Use the intersection of the far clipping plane as the origin point.\n    clipPoint.z = 1.0;\n    const farPoint: Vector3 = this._innerViewportToWorldPoint(clipPoint, this._invViewProjMat, clipPoint);\n    Vector3.subtract(farPoint, origin, out.direction);\n    out.direction.normalize();\n\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from screen space to viewport space\n   * @param point - Point in screen space\n   * @param out - Point in viewport space\n   * @returns Point in viewport space\n   */\n  screenToViewportPoint<T extends Vector2 | Vector3>(point: Vector3 | Vector2, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (point.x / canvas.width - viewport.x) / viewport.z;\n    out.y = (point.y / canvas.height - viewport.y) / viewport.w;\n    return out;\n  }\n\n  /**\n   * Transform the X and Y coordinates of a point from viewport space to screen space.\n   * @param point - Point in viewport space\n   * @param out - Point in screen space\n   * @returns Point in screen space\n   */\n  viewportToScreenPoint<T extends Vector2 | Vector3 | Vector4>(point: T, out: T): T {\n    const canvas = this.engine.canvas;\n    const viewport = this.viewport;\n    out.x = (viewport.x + point.x * viewport.z) * canvas.width;\n    out.y = (viewport.y + point.y * viewport.w) * canvas.height;\n    return out;\n  }\n\n  /**\n   * Transform a point from world space to screen space.\n   * @param point - Point in world space\n   * @param out - Point of screen space\n   * @returns Point of screen space\n   */\n  worldToScreenPoint(point: Vector3, out: Vector4): Vector4 {\n    this.worldToViewportPoint(point, out);\n    return this.viewportToScreenPoint(out, out);\n  }\n\n  /**\n   * Transform a point from screen space to world space.\n   * @param point - Screen space point\n   * @param out - Point in world space\n   * @returns Point in world space\n   */\n  screenToWorldPoint(point: Vector3, out: Vector3): Vector3 {\n    this.screenToViewportPoint(point, out);\n    return this.viewportToWorldPoint(out, out);\n  }\n\n  /**\n   * Generate a ray by a point in screen.\n   * @param point - Point in screen space, the unit is pixel\n   * @param out - Ray\n   * @returns Ray\n   */\n  screenPointToRay(point: Vector2, out: Ray): Ray {\n    const viewportPoint = MathTemp.tempVec2;\n    this.screenToViewportPoint(point, viewportPoint);\n    return this.viewportPointToRay(viewportPoint, out);\n  }\n\n  /**\n   * Manually call the rendering of the camera.\n   * @param cubeFace - Cube rendering surface collection\n   */\n  render(cubeFace?: TextureCubeFace): void {\n    // compute cull frustum.\n    const context = this.engine._renderContext;\n    context._setContext(this);\n    if (this.enableFrustumCulling && (this._frustumViewChangeFlag.flag || this._isFrustumProjectDirty)) {\n      this._frustum.calculateFromMatrix(context._viewProjectMatrix);\n      this._frustumViewChangeFlag.flag = false;\n      this._isFrustumProjectDirty = false;\n    }\n\n    this._updateShaderData(context);\n\n    // union scene and camera macro.\n    ShaderMacroCollection.unionCollection(\n      this.scene.shaderData._macroCollection,\n      this.shaderData._macroCollection,\n      this._globalShaderMacro\n    );\n\n    this._renderPipeline.render(context, cubeFace);\n    this._engine._renderCount++;\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onActive() {\n    this.entity.scene._attachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onInActive() {\n    this.entity.scene._detachRenderCamera(this);\n  }\n\n  /**\n   * @override\n   * @inheritdoc\n   */\n  _onDestroy() {\n    this._renderPipeline?.destroy();\n    this._isInvViewProjDirty.destroy();\n    this._isViewMatrixDirty.destroy();\n    this.shaderData._addRefCount(-1);\n  }\n\n  private _projMatChange() {\n    this._isFrustumProjectDirty = true;\n    this._isProjectionDirty = true;\n    this._isInvProjMatDirty = true;\n    this._isInvViewProjDirty.flag = true;\n  }\n\n  private _innerViewportToWorldPoint(point: Vector3, invViewProjMat: Matrix, out: Vector3): Vector3 {\n    // Depth is a normalized value, 0 is nearPlane, 1 is farClipPlane.\n    const depth = point.z * 2 - 1;\n    // Transform to clipping space matrix\n    const clipPoint = MathTemp.tempVec4;\n    clipPoint.setValue(point.x * 2 - 1, 1 - point.y * 2, depth, 1);\n    Vector4.transform(clipPoint, invViewProjMat, clipPoint);\n    const invW = 1.0 / clipPoint.w;\n    out.x = clipPoint.x * invW;\n    out.y = clipPoint.y * invW;\n    out.z = clipPoint.z * invW;\n    return out;\n  }\n\n  private _updateShaderData(context: RenderContext) {\n    const shaderData = this.shaderData;\n    shaderData.setMatrix(Camera._viewMatrixProperty, this.viewMatrix);\n    shaderData.setMatrix(Camera._projectionMatrixProperty, this.projectionMatrix);\n    shaderData.setMatrix(Camera._vpMatrixProperty, context._viewProjectMatrix);\n    shaderData.setMatrix(Camera._inverseViewMatrixProperty, this._transform.worldMatrix);\n    shaderData.setMatrix(Camera._inverseProjectionMatrixProperty, this.inverseProjectionMatrix);\n    shaderData.setVector3(Camera._cameraPositionProperty, this._transform.worldPosition);\n  }\n\n  /**\n   * @private\n   * The inverse matrix of view projection matrix.\n   */\n  get invViewProjMat(): Matrix {\n    if (this._isInvViewProjDirty.flag) {\n      this._isInvViewProjDirty.flag = false;\n      Matrix.multiply(this._transform.worldMatrix, this.inverseProjectionMatrix, this._invViewProjMat);\n    }\n    return this._invViewProjMat;\n  }\n\n  /**\n   * @private\n   * The inverse of the projection matrix.\n   */\n  get inverseProjectionMatrix(): Readonly<Matrix> {\n    if (this._isInvProjMatDirty) {\n      this._isInvProjMatDirty = false;\n      Matrix.invert(this.projectionMatrix, this._inverseProjectionMatrix);\n    }\n    return this._inverseProjectionMatrix;\n  }\n}\n","import { AssetPromise } from \"./AssetPromise\";\n\nconst mimeType = {\n  json: \"json\",\n  gltf: \"json\",\n  mtl: \"json\",\n  prefab: \"json\",\n  txt: \"text\",\n  bin: \"arraybuffer\",\n  png: \"image\",\n  webp: \"image\",\n  jpg: \"image\"\n};\n\nconst defaultRetryCount = 4;\nconst defaultTimeout = 15000;\nconst defaultInterval = 500;\n\nexport type RequestConfig = {\n  type?: XMLHttpRequestResponseType | \"image\";\n  retryCount?: number;\n  retryInterval?: number;\n  timeout?: number;\n} & RequestInit;\n\n/**\n * Web request.\n * @param url - The link\n * @param config - Load configuration\n */\nexport function request<T>(url: string, config: RequestConfig = {}): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const retryCount = config.retryCount ?? defaultRetryCount;\n    const retryInterval = config.retryInterval ?? defaultInterval;\n    config.timeout = config.timeout ?? defaultTimeout;\n    config.type = config.type ?? getMimeTypeFromUrl(url);\n    const realRequest = config.type === \"image\" ? requestImage : requestRes;\n    let lastError: Error;\n    const executor = new MultiExecutor(\n      () => {\n        return realRequest<T>(url, config)\n          .onProgress(setProgress)\n          .then((res) => {\n            resolve(res);\n            executor.stop();\n          })\n          .catch((err) => (lastError = err));\n      },\n      retryCount,\n      retryInterval\n    );\n    executor.start(() => {\n      reject(lastError);\n    });\n  });\n}\n\nfunction requestImage<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject) => {\n    const { timeout } = config;\n    const img = new Image();\n    const onerror = () => {\n      reject(new Error(`request ${url} fail`));\n    };\n    img.onerror = onerror;\n\n    img.onabort = onerror;\n\n    const timeoutId = setTimeout(() => {\n      reject(new Error(`request ${url} timeout`));\n    }, timeout);\n\n    img.onload = ((timeoutId) => {\n      return () => {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          //@ts-ignore\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n        clearTimeout(timeoutId);\n      };\n    })(timeoutId);\n\n    img.crossOrigin = \"anonymous\";\n\n    img.src = url;\n  });\n}\n\nfunction requestRes<T>(url: string, config: RequestConfig): AssetPromise<T> {\n  return new AssetPromise((resolve, reject, setProgress) => {\n    const xhr = new XMLHttpRequest();\n    xhr.timeout = config.timeout;\n    config.method = config.method ?? \"get\";\n    xhr.onload = () => {\n      if (xhr.status < 200 || xhr.status >= 300) {\n        reject(new Error(`request failed from: ${url}`));\n        return;\n      }\n      const result = xhr.response ?? xhr.responseText;\n      resolve(result);\n    };\n    xhr.onerror = () => {\n      reject(new Error(`request failed from: ${url}`));\n    };\n    xhr.ontimeout = () => {\n      reject(new Error(`request timeout from: ${url}`));\n    };\n    xhr.onprogress = (e) => {\n      setProgress(e.loaded / e.total);\n    };\n    xhr.open(config.method, url, true);\n    xhr.withCredentials = config.credentials === \"include\";\n    //@ts-ignore\n    xhr.responseType = config.type;\n    const headers = config.headers;\n    if (headers) {\n      Object.keys(headers).forEach((name) => {\n        xhr.setRequestHeader(name, headers[name]);\n      });\n    }\n    xhr.send(config.body);\n  });\n}\n\nfunction getMimeTypeFromUrl(url: string) {\n  const extname = url.substring(url.lastIndexOf(\".\") + 1);\n  return mimeType[extname];\n}\n\nexport class MultiExecutor {\n  private _timeoutId: number = -100;\n  private _currentCount = 0;\n  constructor(\n    private execFunc: (count?: number) => Promise<any>,\n    private totalCount: number,\n    private interval: number\n  ) {\n    this.exec = this.exec.bind(this);\n  }\n\n  private done: Function;\n  start(done?: Function): void {\n    this.done = done;\n    this.exec();\n  }\n\n  stop(): void {\n    clearTimeout(this._timeoutId);\n  }\n\n  private exec(): void {\n    if (this._currentCount >= this.totalCount) {\n      this.done && this.done();\n      return;\n    }\n    this._currentCount++;\n    this.execFunc(this._currentCount).then(() => {\n      //@ts-ignore\n      this._timeoutId = setTimeout(this.exec, this.interval);\n    });\n  }\n}\n","import { LoadItem } from \"./LoadItem\";\nimport { AssetPromise } from \"./AssetPromise\";\nimport { RequestConfig, request } from \"./request\";\nimport { ResourceManager } from \"./ResourceManager\";\n/**\n * Loader abstract class.\n */\nexport abstract class Loader<T> {\n  request: <U>(url: string, config: RequestConfig) => AssetPromise<U> = request;\n  abstract load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<T>;\n  constructor(public readonly useCache: boolean) {}\n}\n","/**\n * Asset Type.\n */\nexport enum AssetType {\n  /**\n   * Plain text.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Text = \"text\",\n  /**\n   * JSON.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  JSON = \"json\",\n  /**\n   * ArrayBuffer.\n   * @remarks Will not be cached based on url in ResourceManager.\n   */\n  Buffer = \"buffer\",\n  /** 2D Texture. */\n  Texture2D = \"texture2d\",\n  /** Cube Texture. */\n  TextureCube = \"texture-cube\",\n  /** Material. */\n  Material = \"material\",\n  /** Mesh. */\n  Mesh = \"mesh\",\n  /** Animation Clip. */\n  AnimationClip = \"animation-clip\",\n  /** Prefab.*/\n  Prefab = \"prefab\",\n  /** Compress Texture. */\n  KTX = \"ktx\",\n  /** Cube Compress Texture. */\n  KTXCube = \"ktx-cube\",\n  /** Sprite Atlas. */\n  SpriteAtlas = \"sprite-atlas\"\n}\n","/**\n * Set which face for render.\n */\nexport enum RenderFace {\n  /** Render front face. */\n  Front,\n  /** Render back face. */\n  Back,\n  /** Render double face. */\n  Double\n}\n","/**\n * Alpha blend mode.\n */\nexport enum BlendMode {\n  /** SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\n  Normal,\n  /** SRC ALPHA * SRC + ONE * DEST */\n  Additive\n}\n","import { Engine } from \"../Engine\";\nimport { BlendFactor, BlendOperation, CullMode, Shader } from \"../shader\";\nimport { ShaderMacro } from \"../shader/ShaderMacro\";\nimport { BlendMode } from \"./enums/BlendMode\";\nimport { RenderFace } from \"./enums/RenderFace\";\nimport { RenderQueueType } from \"./enums/RenderQueueType\";\nimport { Material } from \"./Material\";\n\nexport class BaseMaterial extends Material {\n  private static _alphaCutoffMacro: ShaderMacro = Shader.getMacroByName(\"ALPHA_CUTOFF\");\n  private static _alphaCutoffProp = Shader.getPropertyByName(\"u_alphaCutoff\");\n\n  private _renderFace: RenderFace = RenderFace.Front;\n  private _isTransparent: boolean = false;\n  private _blendMode: BlendMode;\n\n  /**\n   * Is this material transparent.\n   * @remarks\n   * If material is transparent, transparent blend mode will be affected by `blendMode`, default is `BlendMode.Normal`.\n   */\n  get isTransparent(): boolean {\n    return this._isTransparent;\n  }\n\n  set isTransparent(value: boolean) {\n    if (value === this._isTransparent) return;\n    this._isTransparent = value;\n\n    const {\n      depthState,\n      blendState: { targetBlendState }\n    } = this.renderState;\n\n    if (value) {\n      targetBlendState.enabled = true;\n      depthState.writeEnabled = false;\n      this.renderQueueType = RenderQueueType.Transparent;\n    } else {\n      targetBlendState.enabled = false;\n      depthState.writeEnabled = true;\n      this.renderQueueType = this.shaderData.getFloat(BaseMaterial._alphaCutoffProp)\n        ? RenderQueueType.AlphaTest\n        : RenderQueueType.Opaque;\n    }\n  }\n\n  /**\n   * Alpha cutoff value.\n   * @remarks\n   * Fragments with alpha channel lower than cutoff value will be discarded.\n   * `0` means no fragment will be discarded.\n   */\n  get alphaCutoff(): number {\n    return this.shaderData.getFloat(BaseMaterial._alphaCutoffProp);\n  }\n\n  set alphaCutoff(value: number) {\n    this.shaderData.setFloat(BaseMaterial._alphaCutoffProp, value);\n\n    if (value > 0) {\n      this.shaderData.enableMacro(BaseMaterial._alphaCutoffMacro);\n      this.renderQueueType = this._isTransparent ? RenderQueueType.Transparent : RenderQueueType.AlphaTest;\n    } else {\n      this.shaderData.disableMacro(BaseMaterial._alphaCutoffMacro);\n      this.renderQueueType = this._isTransparent ? RenderQueueType.Transparent : RenderQueueType.Opaque;\n    }\n  }\n\n  /**\n   * Set which face for render.\n   */\n  get renderFace(): RenderFace {\n    return this._renderFace;\n  }\n\n  set renderFace(value: RenderFace) {\n    if (value === this._renderFace) return;\n    this._renderFace = value;\n\n    switch (value) {\n      case RenderFace.Front:\n        this.renderState.rasterState.cullMode = CullMode.Back;\n        break;\n      case RenderFace.Back:\n        this.renderState.rasterState.cullMode = CullMode.Front;\n        break;\n      case RenderFace.Double:\n        this.renderState.rasterState.cullMode = CullMode.Off;\n        break;\n    }\n  }\n\n  /**\n   * Alpha blend mode.\n   * @remarks\n   * Only take effect when `isTransparent` is `true`.\n   */\n  get blendMode(): BlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: BlendMode) {\n    if (value === this._blendMode) return;\n    this._blendMode = value;\n\n    const {\n      blendState: { targetBlendState: target }\n    } = this.renderState;\n\n    switch (value) {\n      case BlendMode.Normal:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n      case BlendMode.Additive:\n        target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n        target.destinationColorBlendFactor = BlendFactor.One;\n        target.sourceAlphaBlendFactor = BlendFactor.One;\n        target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n        target.colorBlendOperation = target.alphaBlendOperation = BlendOperation.Add;\n        break;\n    }\n  }\n\n  /**\n   * Create a BaseMaterial instance.\n   * @param engine - Engine to which the material belongs\n   * @param shader - Shader used by the material\n   */\n  constructor(engine: Engine, shader: Shader) {\n    super(engine, shader);\n    this.blendMode = BlendMode.Normal;\n    this.shaderData.setFloat(BaseMaterial._alphaCutoffProp, 0);\n  }\n\n  /**\n   * @override\n   * Clone and return the instance.\n   */\n  clone(): BaseMaterial {\n    const dest = new BaseMaterial(this._engine, this.shader);\n    this.cloneTo(dest);\n    return dest;\n  }\n\n  /**\n   * @override\n   * Clone to the target material.\n   * @param target - target material\n   */\n  cloneTo(target: BaseMaterial): void {\n    super.cloneTo(target);\n    target._renderFace = this._renderFace;\n    target._isTransparent = this._isTransparent;\n    target._blendMode = this._blendMode;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Blinn-phong Material.\n */\nexport class BlinnPhongMaterial extends BaseMaterial {\n  private static _diffuseColorProp = Shader.getPropertyByName(\"u_diffuseColor\");\n  private static _specularColorProp = Shader.getPropertyByName(\"u_specularColor\");\n  private static _emissiveColorProp = Shader.getPropertyByName(\"u_emissiveColor\");\n  private static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n  private static _shininessProp = Shader.getPropertyByName(\"u_shininess\");\n  private static _normalIntensityProp = Shader.getPropertyByName(\"u_normalIntensity\");\n\n  private static _baseTextureProp = Shader.getPropertyByName(\"u_diffuseTexture\");\n  private static _specularTextureProp = Shader.getPropertyByName(\"u_specularTexture\");\n  private static _emissiveTextureProp = Shader.getPropertyByName(\"u_emissiveTexture\");\n  private static _normalTextureProp = Shader.getPropertyByName(\"u_normalTexture\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._diffuseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(BlinnPhongMaterial._diffuseColorProp);\n    if (value !== baseColor) {\n      value.cloneTo(baseColor);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_DIFFUSE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_DIFFUSE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(BlinnPhongMaterial._specularColorProp);\n    if (value !== specularColor) {\n      value.cloneTo(specularColor);\n    }\n  }\n\n  /**\n   * Specular texture.\n   */\n  get specularTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._specularTextureProp);\n  }\n\n  set specularTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._specularTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_SPECULAR_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_SPECULAR_TEXTURE\");\n    }\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(BlinnPhongMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      value.cloneTo(emissiveColor);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_EMISSIVE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_EMISSIVE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(BlinnPhongMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(BlinnPhongMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_NORMAL_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_NORMAL_TEXTURE\");\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalIntensity(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._normalIntensityProp);\n  }\n\n  set normalIntensity(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, value);\n  }\n\n  /**\n   * Set the specular reflection coefficient, the larger the value, the more convergent the specular reflection effect.\n   */\n  get shininess(): number {\n    return this.shaderData.getFloat(BlinnPhongMaterial._shininessProp);\n  }\n\n  set shininess(value: number) {\n    this.shaderData.setFloat(BlinnPhongMaterial._shininessProp, value);\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(BlinnPhongMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      value.cloneTo(tilingOffset);\n    }\n  }\n\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"blinn-phong\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(BlinnPhongMaterial._diffuseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(BlinnPhongMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(BlinnPhongMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n    shaderData.setFloat(BlinnPhongMaterial._shininessProp, 16);\n    shaderData.setFloat(BlinnPhongMaterial._normalIntensityProp, 1);\n  }\n\n  /**\n   * @override\n   */\n  clone(): BlinnPhongMaterial {\n    var dest: BlinnPhongMaterial = new BlinnPhongMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * PBR (Physically-Based Rendering) Material.\n */\nexport abstract class PBRBaseMaterial extends BaseMaterial {\n  private static _baseColorProp = Shader.getPropertyByName(\"u_baseColor\");\n  private static _emissiveColorProp = Shader.getPropertyByName(\"u_emissiveColor\");\n  private static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n  private static _baseTextureProp = Shader.getPropertyByName(\"u_baseColorSampler\");\n  private static _normalTextureProp = Shader.getPropertyByName(\"u_normalTexture\");\n  private static _normalTextureIntensityProp = Shader.getPropertyByName(\"u_normalIntensity\");\n  private static _occlusionTextureIntensityProp = Shader.getPropertyByName(\"u_occlusionStrength\");\n\n  private static _emissiveTextureProp = Shader.getPropertyByName(\"u_emissiveSampler\");\n  private static _occlusionTextureProp = Shader.getPropertyByName(\"u_occlusionSampler\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(PBRBaseMaterial._baseColorProp);\n    if (value !== baseColor) {\n      value.cloneTo(baseColor);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_BASECOLORMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_BASECOLORMAP\");\n    }\n  }\n\n  /**\n   * Normal texture.\n   */\n  get normalTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._normalTextureProp);\n  }\n\n  set normalTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._normalTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_NORMAL_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_NORMAL_TEXTURE\");\n    }\n  }\n\n  /**\n   * Normal texture intensity.\n   */\n  get normalTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._normalTextureIntensityProp);\n  }\n\n  set normalTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._normalTextureIntensityProp, value);\n    this.shaderData.setFloat(\"u_normalIntensity\", value);\n  }\n\n  /**\n   * Emissive color.\n   */\n  get emissiveColor(): Color {\n    return this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n  }\n\n  set emissiveColor(value: Color) {\n    const emissiveColor = this.shaderData.getColor(PBRBaseMaterial._emissiveColorProp);\n    if (value !== emissiveColor) {\n      value.cloneTo(emissiveColor);\n    }\n  }\n\n  /**\n   * Emissive texture.\n   */\n  get emissiveTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._emissiveTextureProp);\n  }\n\n  set emissiveTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._emissiveTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_EMISSIVEMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_EMISSIVEMAP\");\n    }\n  }\n\n  /**\n   * Occlusion texture.\n   */\n  get occlusionTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRBaseMaterial._occlusionTextureProp);\n  }\n\n  set occlusionTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRBaseMaterial._occlusionTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_OCCLUSIONMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_OCCLUSIONMAP\");\n    }\n  }\n\n  /**\n   * Occlusion texture intensity.\n   */\n  get occlusionTextureIntensity(): number {\n    return this.shaderData.getFloat(PBRBaseMaterial._occlusionTextureIntensityProp);\n  }\n\n  set occlusionTextureIntensity(value: number) {\n    this.shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, value);\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(PBRBaseMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      value.cloneTo(tilingOffset);\n    }\n  }\n\n  /**\n   * Create a pbr base material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  protected constructor(engine: Engine) {\n    super(engine, Shader.find(\"pbr\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"O3_NEED_WORLDPOS\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(PBRBaseMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setColor(PBRBaseMaterial._emissiveColorProp, new Color(0, 0, 0, 1));\n    shaderData.setVector4(PBRBaseMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n\n    shaderData.setFloat(PBRBaseMaterial._normalTextureIntensityProp, 1);\n    shaderData.setFloat(PBRBaseMaterial._occlusionTextureIntensityProp, 1);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Metallic-Roughness Workflow) Material.\n */\nexport class PBRMaterial extends PBRBaseMaterial {\n  private static _metallicProp = Shader.getPropertyByName(\"u_metal\");\n  private static _roughnessProp = Shader.getPropertyByName(\"u_roughness\");\n  private static _metallicRoughnessTextureProp = Shader.getPropertyByName(\"u_metallicRoughnessSampler\");\n\n  /**\n   * Metallic.\n   */\n  get metallic(): number {\n    return this.shaderData.getFloat(PBRMaterial._metallicProp);\n  }\n\n  set metallic(value: number) {\n    this.shaderData.setFloat(PBRMaterial._metallicProp, value);\n  }\n\n  /**\n   * Roughness.\n   */\n  get roughness(): number {\n    return this.shaderData.getFloat(PBRMaterial._roughnessProp);\n  }\n\n  set roughness(value: number) {\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, value);\n  }\n\n  /**\n   * Roughness metallic texture.\n   * @remarks G channel is roughness, B channel is metallic\n   */\n  get roughnessMetallicTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRMaterial._metallicRoughnessTextureProp);\n  }\n\n  set roughnessMetallicTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRMaterial._metallicRoughnessTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_METALROUGHNESSMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_METALROUGHNESSMAP\");\n    }\n  }\n\n  /**\n   * Create a pbr metallic-roughness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n    this.shaderData.enableMacro(\"IS_METALLIC_WORKFLOW\");\n    this.shaderData.setFloat(PBRMaterial._metallicProp, 1.0);\n    this.shaderData.setFloat(PBRMaterial._roughnessProp, 1.0);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRMaterial {\n    const dest = new PBRMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { PBRBaseMaterial } from \"./PBRBaseMaterial\";\n\n/**\n * PBR (Specular-Glossiness Workflow) Material.\n */\nexport class PBRSpecularMaterial extends PBRBaseMaterial {\n  private static _specularColorProp = Shader.getPropertyByName(\"u_specularColor\");\n  private static _glossinessProp = Shader.getPropertyByName(\"u_glossinessFactor\");\n  private static _specularGlossinessTextureProp = Shader.getPropertyByName(\"u_specularGlossinessSampler\");\n\n  /**\n   * Specular color.\n   */\n  get specularColor(): Color {\n    return this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n  }\n\n  set specularColor(value: Color) {\n    const specularColor = this.shaderData.getColor(PBRSpecularMaterial._specularColorProp);\n    if (value !== specularColor) {\n      value.cloneTo(specularColor);\n    }\n  }\n\n  /**\n   * Glossiness.\n   */\n  get glossiness(): number {\n    return this.shaderData.getFloat(PBRSpecularMaterial._glossinessProp);\n  }\n\n  set glossiness(value: number) {\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, value);\n  }\n\n  /**\n   * Specular glossiness texture.\n   * @remarks RGB is specular, A is glossiness\n   */\n  get specularGlossinessTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(PBRSpecularMaterial._specularGlossinessTextureProp);\n  }\n\n  set specularGlossinessTexture(value: Texture2D) {\n    this.shaderData.setTexture(PBRSpecularMaterial._specularGlossinessTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"HAS_SPECULARGLOSSINESSMAP\");\n    } else {\n      this.shaderData.disableMacro(\"HAS_SPECULARGLOSSINESSMAP\");\n    }\n  }\n\n  /**\n   * Create a pbr specular-glossiness workflow material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n\n    this.shaderData.setColor(PBRSpecularMaterial._specularColorProp, new Color(1, 1, 1, 1));\n    this.shaderData.setFloat(PBRSpecularMaterial._glossinessProp, 1.0);\n  }\n\n  /**\n   * @override\n   */\n  clone(): PBRSpecularMaterial {\n    const dest = new PBRSpecularMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { Color, Vector4 } from \"@oasis-engine/math\";\nimport { Engine } from \"../Engine\";\nimport { Shader } from \"../shader/Shader\";\nimport { Texture2D } from \"../texture/Texture2D\";\nimport { BaseMaterial } from \"./BaseMaterial\";\n\n/**\n * Unlit Material.\n */\nexport class UnlitMaterial extends BaseMaterial {\n  private static _baseColorProp = Shader.getPropertyByName(\"u_baseColor\");\n  private static _baseTextureProp = Shader.getPropertyByName(\"u_baseTexture\");\n  private static _tilingOffsetProp = Shader.getPropertyByName(\"u_tilingOffset\");\n\n  /**\n   * Base color.\n   */\n  get baseColor(): Color {\n    return this.shaderData.getColor(UnlitMaterial._baseColorProp);\n  }\n\n  set baseColor(value: Color) {\n    const baseColor = this.shaderData.getColor(UnlitMaterial._baseColorProp);\n    if (value !== baseColor) {\n      value.cloneTo(baseColor);\n    }\n  }\n\n  /**\n   * Base texture.\n   */\n  get baseTexture(): Texture2D {\n    return <Texture2D>this.shaderData.getTexture(UnlitMaterial._baseTextureProp);\n  }\n\n  set baseTexture(value: Texture2D) {\n    this.shaderData.setTexture(UnlitMaterial._baseTextureProp, value);\n    if (value) {\n      this.shaderData.enableMacro(\"O3_BASE_TEXTURE\");\n    } else {\n      this.shaderData.disableMacro(\"O3_BASE_TEXTURE\");\n    }\n  }\n\n  /**\n   * Tiling and offset of main textures.\n   */\n  get tilingOffset(): Vector4 {\n    return this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n  }\n\n  set tilingOffset(value: Vector4) {\n    const tilingOffset = this.shaderData.getVector4(UnlitMaterial._tilingOffsetProp);\n    if (value !== tilingOffset) {\n      value.cloneTo(tilingOffset);\n    }\n  }\n\n  /**\n   * Create a unlit material instance.\n   * @param engine - Engine to which the material belongs\n   */\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"unlit\"));\n\n    const shaderData = this.shaderData;\n\n    shaderData.enableMacro(\"OMIT_NORMAL\");\n    shaderData.enableMacro(\"O3_NEED_TILINGOFFSET\");\n\n    shaderData.setColor(UnlitMaterial._baseColorProp, new Color(1, 1, 1, 1));\n    shaderData.setVector4(UnlitMaterial._tilingOffsetProp, new Vector4(1, 1, 0, 0));\n  }\n\n  /**\n   * @override\n   */\n  clone(): UnlitMaterial {\n    const dest = new UnlitMaterial(this._engine);\n    this.cloneTo(dest);\n    return dest;\n  }\n}\n","import { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Sprite } from \"../sprite/Sprite\";\n\n/**\n * Sprite Atlas.\n */\nexport class SpriteAtlas extends RefObject {\n  private _sprites: Sprite[] = new Array<Sprite>();\n  private _spriteNamesToIndex: Record<string, number> = {};\n\n  /**\n   * All the sprites in the atlas.\n   */\n  get sprites(): Readonly<Sprite[]> {\n    return this._sprites;\n  }\n\n  /**\n   * Get the last sprite named 'name' from the atlas.\n   * @param name - The name of the sprite you want to find\n   * @returns The sprite you want to find\n   */\n  getSprite(name: string): Sprite {\n    const sprite = this._sprites[this._spriteNamesToIndex[name]];\n    if (!sprite) {\n      console.warn(\"There is no sprite named \" + name + \" in the atlas.\");\n    }\n    return sprite;\n  }\n\n  /**\n   * Get all the sprite named 'name' from the atlas.\n   * @param name - The name of the sprites you want to find\n   * @param outSprites - This array holds the sprites found\n   * @returns The sprites you want to find\n   */\n  getSprites(name: string, outSprites: Sprite[]): Sprite[] {\n    outSprites.length = 0;\n    let i = this._spriteNamesToIndex[name];\n    if (i !== undefined) {\n      const { _sprites } = this;\n      for (; i >= 0; i--) {\n        const sprite = _sprites[i];\n        sprite.name === name && outSprites.push(sprite);\n      }\n    } else {\n      console.warn(\"The name of the sprite you want to find is not exit in SpriteAtlas.\");\n    }\n    return outSprites;\n  }\n\n  /**\n   * Constructor a SpriteAtlas.\n   * @param engine - Engine to which the SpriteAtlas belongs\n   */\n  constructor(engine: Engine) {\n    super(engine);\n  }\n\n  /**\n   * @internal\n   */\n  _addSprite(sprite: Sprite): void {\n    this._spriteNamesToIndex[sprite.name] = this._sprites.push(sprite) - 1;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    this._sprites = null;\n    this._spriteNamesToIndex = null;\n  }\n}\n","import { BoundingBox, MathUtil, Rect, Vector2, Vector4 } from \"@oasis-engine/math\";\nimport { RefObject } from \"../../asset/RefObject\";\nimport { Engine } from \"../../Engine\";\nimport { Texture2D } from \"../../texture/Texture2D\";\n\n/**\n * 2D sprite.\n */\nexport class Sprite extends RefObject {\n  private static _rectangleTriangles: number[] = [0, 2, 1, 2, 0, 3];\n\n  /** The name of sprite. */\n  name: string;\n\n  /** @internal */\n  _uv: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  /** @internal */\n  _positions: Vector2[] = [new Vector2(), new Vector2(), new Vector2(), new Vector2()];\n  /** @internal */\n  _bounds: BoundingBox = new BoundingBox();\n  /** @internal */\n  _triangles: number[];\n  /** @internal temp solution. */\n  _assetID: number;\n\n  private _pixelsPerUnit: number;\n  private _texture: Texture2D = null;\n  private _atlasRotated: boolean = false;\n  private _region: Rect = new Rect(0, 0, 1, 1);\n  private _pivot: Vector2 = new Vector2(0.5, 0.5);\n  private _atlasRegion: Rect = new Rect(0, 0, 1, 1);\n  private _atlasRegionOffset: Vector4 = new Vector4(0, 0, 0, 0);\n  private _dirtyFlag: DirtyFlag = DirtyFlag.all;\n\n  /**\n   * The reference to the used texture.\n   */\n  get texture(): Texture2D {\n    return this._texture;\n  }\n\n  set texture(value: Texture2D) {\n    if (this._texture !== value) {\n      this._texture = value;\n      this._setDirtyFlagTrue(DirtyFlag.positions);\n    }\n  }\n\n  /**\n   *  Bounding volume of the sprite.\n   *  @remarks The returned bounds should be considered deep-read-only.\n   */\n  get bounds(): Readonly<BoundingBox> {\n    if (this._isContainDirtyFlag(DirtyFlag.positions) && this._texture) {\n      this._updatePositionsAndBounds();\n      this._setDirtyFlagFalse(DirtyFlag.positions);\n    }\n    return this._bounds;\n  }\n\n  /**\n   * Is it rotated 90 degrees clockwise when packing.\n   */\n  get atlasRotated(): boolean {\n    return this._atlasRotated;\n  }\n\n  set atlasRotated(value: boolean) {\n    if (this._atlasRotated != value) {\n      this._atlasRotated = value;\n      this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n    }\n  }\n\n  /**\n   * The rectangle region of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegion(): Rect {\n    return this._atlasRegion;\n  }\n\n  set atlasRegion(value: Rect) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegion.setValue(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n  }\n\n  /**\n   * The rectangle region offset of the original texture on its atlas texture, specified in normalized.\n   */\n  get atlasRegionOffset(): Vector4 {\n    return this._atlasRegionOffset;\n  }\n\n  set atlasRegionOffset(value: Vector4) {\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    this._atlasRegionOffset.setValue(x, y, MathUtil.clamp(value.z, 0, 1 - x), MathUtil.clamp(value.w, 0, 1 - y));\n    this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n  }\n\n  /**\n   * Location of the sprite's center point in the rectangle region, specified in normalized.\n   */\n  get pivot(): Vector2 {\n    return this._pivot;\n  }\n\n  set pivot(value: Vector2) {\n    this._pivot.setValue(MathUtil.clamp(value.x, 0, 1), MathUtil.clamp(value.y, 0, 1));\n    this._setDirtyFlagTrue(DirtyFlag.positions);\n  }\n\n  /**\n   * The rectangle region of the sprite, specified in normalized.\n   */\n  get region(): Rect {\n    return this._region;\n  }\n\n  set region(value: Rect) {\n    const region = this._region;\n    const x = MathUtil.clamp(value.x, 0, 1);\n    const y = MathUtil.clamp(value.y, 0, 1);\n    region.setValue(x, y, MathUtil.clamp(value.width, 0, 1 - x), MathUtil.clamp(value.height, 0, 1 - y));\n    this._setDirtyFlagTrue(DirtyFlag.positions | DirtyFlag.uv);\n  }\n\n  /**\n   * The number of pixels in the sprite that correspond to one unit in world space.\n   */\n  get pixelsPerUnit(): number {\n    return this._pixelsPerUnit;\n  }\n\n  set pixelsPerUnit(value: number) {\n    if (this._pixelsPerUnit !== value) {\n      this._pixelsPerUnit = value;\n      this._setDirtyFlagTrue(DirtyFlag.positions);\n    }\n  }\n\n  /**\n   * Constructor a Sprite.\n   * @param engine - Engine to which the sprite belongs\n   * @param texture - Texture from which to obtain the Sprite\n   * @param region - Rectangle region of the texture to use for the Sprite, specified in normalized\n   * @param pivot - Sprite's pivot point relative to its graphic rectangle, specified in normalized\n   * @param pixelsPerUnit - The number of pixels in the Sprite that correspond to one unit in world space\n   * @param name - The name of Sprite\n   */\n  constructor(\n    engine: Engine,\n    texture: Texture2D = null,\n    region: Rect = null,\n    pivot: Vector2 = null,\n    pixelsPerUnit: number = 128,\n    name: string = null\n  ) {\n    super(engine);\n\n    this.name = name;\n    this._texture = texture;\n    this._pixelsPerUnit = pixelsPerUnit;\n\n    region && region.cloneTo(this._region);\n    pivot && pivot.cloneTo(this._pivot);\n\n    this._triangles = Sprite._rectangleTriangles;\n  }\n\n  /**\n   * @override\n   */\n  _onDestroy(): void {\n    if (this._texture) {\n      this._texture = null;\n    }\n  }\n\n  /**\n   * Update positions and bounds.\n   */\n  private _updatePositionsAndBounds(): void {\n    const { _texture: texture, _bounds: bounds } = this;\n    if (texture) {\n      const { _atlasRegion: atlasRegion, _pivot: pivot, _atlasRegionOffset: atlasRegionOffset } = this;\n      const { x: regionX, y: regionY, width: regionW, height: regionH } = this._region;\n      const pPUReciprocal = 1.0 / this._pixelsPerUnit;\n      // Coordinates of the four boundaries.\n      let lx: number, ty: number, rx: number, by: number;\n      // TextureSize\n      let textureW: number, textureH: number;\n      if (this._atlasRotated) {\n        textureW = texture.height * atlasRegion.height * pPUReciprocal;\n        textureH = texture.width * atlasRegion.width * pPUReciprocal;\n      } else {\n        textureW = texture.width * atlasRegion.width * pPUReciprocal;\n        textureH = texture.height * atlasRegion.height * pPUReciprocal;\n      }\n      // Determine whether it has been trimmed.\n      if (\n        atlasRegionOffset.x == 0 &&\n        atlasRegionOffset.y == 0 &&\n        atlasRegionOffset.z == 0 &&\n        atlasRegionOffset.w == 0\n      ) {\n        // Real rendering size.\n        const realRenderW = textureW * regionW;\n        const realRenderH = textureH * regionH;\n        lx = -pivot.x * realRenderW;\n        by = -pivot.y * realRenderH;\n        rx = realRenderW + lx;\n        ty = realRenderH + by;\n      } else {\n        const { x: blankLeft, y: blankTop, z: blankRight, w: blankBottom } = atlasRegionOffset;\n        const oriWidth = textureW / (1 - blankRight - blankLeft);\n        const oriHeight = textureH / (1 - blankBottom - blankTop);\n        // The size of the real rendering.\n        lx = (-pivot.x * regionW + Math.max(blankLeft, regionX) - regionX) * oriWidth;\n        ty = (pivot.y * regionH - Math.max(blankTop, regionY) + regionY) * oriHeight;\n        rx = (-pivot.x * regionW + Math.min(1 - blankRight, regionX + regionW) - regionX) * oriWidth;\n        by = (pivot.y * regionH - Math.min(1 - blankBottom, regionY + regionH) + regionY) * oriHeight;\n      }\n\n      // Assign values ​​to _positions\n      const positions = this._positions;\n      // Top-left.\n      positions[0].setValue(lx, ty);\n      // Top-right.\n      positions[1].setValue(rx, ty);\n      // Bottom-right.\n      positions[2].setValue(rx, by);\n      // Bottom-left.\n      positions[3].setValue(lx, by);\n\n      // Update bounds.\n      bounds.min.setValue(lx, by, 0);\n      bounds.max.setValue(rx, ty, 0);\n    } else {\n      // Update bounds.\n      bounds.min.setValue(0, 0, 0);\n      bounds.max.setValue(0, 0, 0);\n    }\n  }\n\n  /**\n   * Update mesh.\n   */\n  private _updateMesh(): void {\n    if (this._isContainDirtyFlag(DirtyFlag.positions)) {\n      this._updatePositionsAndBounds();\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.uv)) {\n      const { _atlasRegion, _uv: uv, _region: region, _atlasRotated, _atlasRegionOffset: atlasRegionOffset } = this;\n      let left: number, top: number, right: number, bottom: number;\n      // Determine whether it has been trimmed.\n      if (\n        atlasRegionOffset.x == 0 &&\n        atlasRegionOffset.y == 0 &&\n        atlasRegionOffset.z == 0 &&\n        atlasRegionOffset.w == 0\n      ) {\n        const { width: atlasRegionW, height: atlasRegionH } = _atlasRegion;\n        if (_atlasRotated) {\n          left = atlasRegionW * (1 - region.y - region.height) + _atlasRegion.x;\n          top = atlasRegionH * region.x + _atlasRegion.y;\n          right = atlasRegionW * region.height + left;\n          bottom = atlasRegionH * region.width + top;\n        } else {\n          left = atlasRegionW * region.x + _atlasRegion.x;\n          top = atlasRegionH * region.y + _atlasRegion.y;\n          right = atlasRegionW * region.width + left;\n          bottom = atlasRegionH * region.height + top;\n        }\n      } else {\n        const { x: regionX, y: regionY } = region;\n        const { x: atlasRegionX, y: atlasRegionY } = _atlasRegion;\n        const { x: blankLeft, y: blankTop, z: blankRight, w: blankBottom } = atlasRegionOffset;\n        // Proportion of the original sprite size in the atlas.\n        if (_atlasRotated) {\n          const textureW = _atlasRegion.width / (1 - blankBottom - blankTop);\n          const textureH = _atlasRegion.height / (1 - blankRight - blankLeft);\n          left = (Math.max(blankBottom, 1 - regionY - region.height) - blankBottom) * textureW + atlasRegionX;\n          top = (Math.max(blankLeft, regionX) - blankLeft) * textureH + atlasRegionY;\n          right = (Math.min(1 - blankTop, 1 - regionY) - blankBottom) * textureW + atlasRegionX;\n          bottom = (Math.min(1 - blankRight, regionX + region.width) - blankLeft) * textureH + atlasRegionY;\n        } else {\n          const textureW = _atlasRegion.width / (1 - blankRight - blankLeft);\n          const textureH = _atlasRegion.height / (1 - blankBottom - blankTop);\n          left = (Math.max(blankLeft, regionX) - blankLeft) * textureW + atlasRegionX;\n          top = (Math.max(blankTop, regionY) - blankTop) * textureH + atlasRegionY;\n          right = (Math.min(1 - blankRight, regionX + region.width) - blankLeft) * textureW + atlasRegionX;\n          bottom = (Math.min(1 - blankBottom, regionY + region.height) - blankTop) * textureH + atlasRegionY;\n        }\n      }\n\n      if (_atlasRotated) {\n        // If it is rotated, we need to rotate the UV 90 degrees counterclockwise to correct it.\n        // Top-right.\n        uv[0].setValue(right, top);\n        // Bottom-right.\n        uv[1].setValue(right, bottom);\n        // Bottom-left.\n        uv[2].setValue(left, bottom);\n        // Top-left.\n        uv[3].setValue(left, top);\n      } else {\n        // Top-left.\n        uv[0].setValue(left, top);\n        // Top-right.\n        uv[1].setValue(right, top);\n        // Bottom-right.\n        uv[2].setValue(right, bottom);\n        // Bottom-left.\n        uv[3].setValue(left, bottom);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   * Update mesh data of the sprite.\n   * @returns True if the data is refreshed, false otherwise.\n   */\n  _updateMeshData(): boolean {\n    if (this._isContainDirtyFlag(DirtyFlag.all)) {\n      this._updateMesh();\n      this._setDirtyFlagFalse(DirtyFlag.all);\n      return true;\n    }\n    return false;\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number): void {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number): void {\n    this._dirtyFlag &= ~type;\n  }\n}\n\nenum DirtyFlag {\n  positions = 0x1,\n  uv = 0x2,\n  all = 0x3\n}\n","import { BoundingBox, Color, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../../Camera\";\nimport { assignmentClone, deepClone, ignoreClone } from \"../../clone/CloneManager\";\nimport { Entity } from \"../../Entity\";\nimport { Renderer } from \"../../Renderer\";\nimport { CompareFunction } from \"../../shader/enums/CompareFunction\";\nimport { Shader } from \"../../shader/Shader\";\nimport { ShaderProperty } from \"../../shader/ShaderProperty\";\nimport { UpdateFlag } from \"../../UpdateFlag\";\nimport { SpriteMaskInteraction } from \"../enums/SpriteMaskInteraction\";\nimport { SpriteMaskLayer } from \"../enums/SpriteMaskLayer\";\nimport { Sprite } from \"./Sprite\";\n\n/**\n * Renders a Sprite for 2D graphics.\n */\nexport class SpriteRenderer extends Renderer {\n  private static _textureProperty: ShaderProperty = Shader.getPropertyByName(\"u_spriteTexture\");\n  private static _tempVec3: Vector3 = new Vector3();\n\n  /** @internal temp solution. */\n  @ignoreClone\n  _customLocalBounds: BoundingBox = null;\n  /** @internal temp solution. */\n  @ignoreClone\n  _customRootEntity: Entity = null;\n\n  @deepClone\n  private _positions: Vector3[] = [new Vector3(), new Vector3(), new Vector3(), new Vector3()];\n  @assignmentClone\n  private _sprite: Sprite = null;\n  @deepClone\n  private _color: Color = new Color(1, 1, 1, 1);\n  @assignmentClone\n  private _flipX: boolean = false;\n  @assignmentClone\n  private _flipY: boolean = false;\n  @assignmentClone\n  private _cacheFlipX: boolean = false;\n  @assignmentClone\n  private _cacheFlipY: boolean = false;\n  @ignoreClone\n  private _dirtyFlag: number = DirtyFlag.All;\n  @ignoreClone\n  private _isWorldMatrixDirty: UpdateFlag;\n  @assignmentClone\n  private _maskInteraction: SpriteMaskInteraction = SpriteMaskInteraction.None;\n  @assignmentClone\n  private _maskLayer: number = SpriteMaskLayer.Layer0;\n\n  /**\n   * The Sprite to render.\n   */\n  get sprite(): Sprite {\n    return this._sprite;\n  }\n\n  set sprite(value: Sprite | null) {\n    if (this._sprite !== value) {\n      this._sprite = value;\n      this._setDirtyFlagTrue(DirtyFlag.Sprite);\n    }\n  }\n\n  /**\n   * Rendering color for the Sprite graphic.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    if (this._color !== value) {\n      value.cloneTo(this._color);\n    }\n  }\n\n  /**\n   * Flips the sprite on the X axis.\n   */\n  get flipX(): boolean {\n    return this._flipX;\n  }\n\n  set flipX(value: boolean) {\n    if (this._flipX !== value) {\n      this._flipX = value;\n      this._setDirtyFlagTrue(DirtyFlag.Flip);\n    }\n  }\n\n  /**\n   * Flips the sprite on the Y axis.\n   */\n  get flipY(): boolean {\n    return this._flipY;\n  }\n\n  set flipY(value: boolean) {\n    if (this._flipY !== value) {\n      this._flipY = value;\n      this._setDirtyFlagTrue(DirtyFlag.Flip);\n    }\n  }\n\n  /**\n   * Interacts with the masks.\n   */\n  get maskInteraction(): SpriteMaskInteraction {\n    return this._maskInteraction;\n  }\n\n  set maskInteraction(value: SpriteMaskInteraction) {\n    if (this._maskInteraction !== value) {\n      this._maskInteraction = value;\n      this._setDirtyFlagTrue(DirtyFlag.MaskInteraction);\n    }\n  }\n\n  /**\n   * The mask layer the sprite renderer belongs to.\n   */\n  get maskLayer(): number {\n    return this._maskLayer;\n  }\n\n  set maskLayer(value: number) {\n    this._maskLayer = value;\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n    this._isWorldMatrixDirty = entity.transform.registerWorldChangeFlag();\n    this.setMaterial(this._engine._spriteDefaultMaterial);\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    const { sprite } = this;\n    if (!sprite) {\n      return;\n    }\n    const { texture } = sprite;\n    if (!texture) {\n      return;\n    }\n\n    const { _positions } = this;\n    const { transform } = this.entity;\n\n    // Update sprite data.\n    const localDirty = sprite._updateMeshData();\n\n    if (this._isWorldMatrixDirty.flag || localDirty || this._isContainDirtyFlag(DirtyFlag.Sprite)) {\n      const localPositions = sprite._positions;\n      const localVertexPos = SpriteRenderer._tempVec3;\n      const worldMatrix = transform.worldMatrix;\n      const { flipX, flipY } = this;\n\n      for (let i = 0, n = _positions.length; i < n; i++) {\n        const curVertexPos = localPositions[i];\n        localVertexPos.setValue(flipX ? -curVertexPos.x : curVertexPos.x, flipY ? -curVertexPos.y : curVertexPos.y, 0);\n        Vector3.transformToVec3(localVertexPos, worldMatrix, _positions[i]);\n      }\n\n      this._setDirtyFlagFalse(DirtyFlag.Flip);\n      this._setDirtyFlagFalse(DirtyFlag.Sprite);\n      this._isWorldMatrixDirty.flag = false;\n      this._cacheFlipX = flipX;\n      this._cacheFlipY = flipY;\n    } else if (this._isContainDirtyFlag(DirtyFlag.Flip)) {\n      const { flipX, flipY } = this;\n      const flipXChange = this._cacheFlipX !== flipX;\n      const flipYChange = this._cacheFlipY !== flipY;\n\n      if (flipXChange || flipYChange) {\n        const { x, y } = transform.worldPosition;\n\n        for (let i = 0, n = _positions.length; i < n; i++) {\n          const curPos = _positions[i];\n\n          if (flipXChange) {\n            curPos.x = x * 2 - curPos.x;\n          }\n          if (flipYChange) {\n            curPos.y = y * 2 - curPos.y;\n          }\n        }\n      }\n\n      this._setDirtyFlagFalse(DirtyFlag.Flip);\n      this._cacheFlipX = flipX;\n      this._cacheFlipY = flipY;\n    }\n\n    if (this._isContainDirtyFlag(DirtyFlag.MaskInteraction)) {\n      this._updateStencilState();\n      this._setDirtyFlagFalse(DirtyFlag.MaskInteraction);\n    }\n\n    this.shaderData.setTexture(SpriteRenderer._textureProperty, texture);\n    const material = this.getMaterial();\n\n    const spriteElementPool = this._engine._spriteElementPool;\n    const spriteElement = spriteElementPool.getFromPool();\n    spriteElement.setValue(this, _positions, sprite._uv, sprite._triangles, this.color, material, camera);\n    camera._renderPipeline.pushPrimitive(spriteElement);\n  }\n\n  /**\n   * @internal\n   */\n  _onDestroy(): void {\n    this._isWorldMatrixDirty.destroy();\n    super._onDestroy();\n  }\n\n  private _isContainDirtyFlag(type: number): boolean {\n    return (this._dirtyFlag & type) != 0;\n  }\n\n  private _setDirtyFlagTrue(type: number): void {\n    this._dirtyFlag |= type;\n  }\n\n  private _setDirtyFlagFalse(type: number): void {\n    this._dirtyFlag &= ~type;\n  }\n\n  /**\n   * @override\n   */\n  protected _updateBounds(worldBounds: BoundingBox): void {\n    const sprite = this._sprite;\n    if (sprite) {\n      if (this._customLocalBounds && this._customRootEntity) {\n        const worldMatrix = this._customRootEntity.transform.worldMatrix;\n        BoundingBox.transform(this._customLocalBounds, worldMatrix, worldBounds);\n      } else {\n        const localBounds = sprite.bounds;\n        const worldMatrix = this._entity.transform.worldMatrix;\n        BoundingBox.transform(localBounds, worldMatrix, worldBounds);\n      }\n    } else {\n      worldBounds.min.setValue(0, 0, 0);\n      worldBounds.max.setValue(0, 0, 0);\n    }\n  }\n\n  private _updateStencilState(): void {\n    // Update stencil.\n    const material = this.getInstanceMaterial();\n    const stencilState = material.renderState.stencilState;\n    const maskInteraction = this._maskInteraction;\n\n    if (maskInteraction === SpriteMaskInteraction.None) {\n      stencilState.enabled = false;\n      stencilState.writeMask = 0xff;\n      stencilState.referenceValue = 0;\n      stencilState.compareFunctionFront = stencilState.compareFunctionBack = CompareFunction.Always;\n    } else {\n      stencilState.enabled = true;\n      stencilState.writeMask = 0x00;\n      stencilState.referenceValue = 1;\n      const compare =\n        maskInteraction === SpriteMaskInteraction.VisibleInsideMask\n          ? CompareFunction.LessEqual\n          : CompareFunction.Greater;\n      stencilState.compareFunctionFront = compare;\n      stencilState.compareFunctionBack = compare;\n    }\n  }\n}\n\nenum DirtyFlag {\n  Flip = 0x1,\n  Sprite = 0x2,\n  All = 0x3,\n  MaskInteraction = 0x4\n}\n","import { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { Entity } from \"../Entity\";\nimport { Component } from \"../Component\";\nimport { AnimationCurve } from \"./AnimationCurve\";\n\n/**\n * Associate AnimationCurve and the Entity\n */\nexport class AnimationClipCurveBinding {\n  /** Path to the entity this curve applies to. The relativePath is formatted similar to a pathname,\n   * e.g. \"root/spine/leftArm\". If relativePath is empty it refers to the entity the animation clip is attached to. */\n  relativePath: string;\n  /** The class type of the component that is animated. */\n  type: new (entity: Entity) => Component;\n  /** The name or path to the property being animated. */\n  property: AnimationProperty;\n  /** The animation curve. */\n  curve: AnimationCurve;\n}\n","export enum AnimationProperty {\n  Position,\n  Rotation,\n  Scale,\n  BlendShapeWeights\n}\n","/**\n * Base class for AnimationClips and BlendTrees.\n */\nexport class Motion {}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Transform } from \"../Transform\";\nimport { AnimationClipCurveBinding } from \"./AnimationClipCurveBinding\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { AnimationEvent } from \"./AnimationEvent\";\nimport { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { Motion } from \"./Motion\";\n\n/**\n * Stores keyframe based animations.\n */\nexport class AnimationClip extends Motion {\n  /** @internal */\n  _curveBindings: AnimationClipCurveBinding[] = [];\n\n  private _length: number = 0;\n  private _events: AnimationEvent[] = [];\n\n  /**\n   * Animation events for this animation clip.\n   */\n  get events(): Readonly<AnimationEvent[]> {\n    return this._events;\n  }\n\n  /**\n   * Animation curve bindings for this animation clip.\n   */\n  get curveBindings(): Readonly<AnimationClipCurveBinding[]> {\n    return this._curveBindings;\n  }\n\n  /**\n   * Animation length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * @param name - The AnimationClip's name\n   */\n  constructor (public readonly name: string) {\n    super();\n  }\n\n  /**\n   * Adds an animation event to the clip.\n   * @param event - The animation event\n   */\n  addEvent(event: AnimationEvent): void {\n    this._events.push(event);\n    this._events.sort((a, b) => a.time - b.time);\n  }\n\n  /**\n   * Clears all events from the clip.\n   */\n  clearEvents(): void {\n    this._events.length = 0;\n  }\n\n  /**\n   * Add curve binding for the clip.\n   * @param relativePath - Path to the game object this curve applies to. The relativePath is formatted similar to a pathname, e.g. \"/root/spine/leftArm\"\n   * @param type- The class type of the component that is animated\n   * @param propertyName - The name to the property being animated\n   * @param curve - The animation curve\n   */\n  addCurveBinding<T extends Component>(\n    relativePath: string,\n    type: new (entity: Entity) => T,\n    propertyName: string,\n    curve: AnimationCurve\n  ): void {\n    let property: AnimationProperty;\n    switch (propertyName) {\n      case \"position\":\n        property = AnimationProperty.Position;\n        break;\n      case \"rotation\":\n        property = AnimationProperty.Rotation;\n        break;\n      case \"scale\":\n        property = AnimationProperty.Scale;\n        break;\n      case \"blendShapeWeights\":\n        property = AnimationProperty.BlendShapeWeights;\n        break;\n      default:\n    }\n    const curveBinding = new AnimationClipCurveBinding();\n    curveBinding.relativePath = relativePath;\n    curveBinding.type = type;\n    curveBinding.property = property;\n    curveBinding.curve = curve;\n    if (curve.length > this._length) {\n      this._length = curve.length;\n    }\n    this._curveBindings.push(curveBinding);\n  }\n\n  /**\n   * Clears all curve bindings from the clip.\n   */\n  clearCurveBindings(): void {\n    this._curveBindings.length = 0;\n    this._length = 0;\n  }\n\n  /**\n   * @internal\n   * Samples an animation at a given time.\n   * @param entity - The animated entity\n   * @param time - The time to sample an animation\n   */\n  _sampleAnimation(entity: Entity, time: number): void {\n    const { length } = this._curveBindings;\n    for (let i = length - 1; i >= 0; i--) {\n      const curveData = this._curveBindings[i];\n      const { curve, property, relativePath, type } = curveData;\n      const val = curve.evaluate(time);\n      const target = entity.findByName(relativePath);\n      const transform = (<Entity>target).transform;\n      if (type === Transform) {\n        switch (property) {\n          case AnimationProperty.Position:\n            transform.position = val as Vector3;\n            break;\n          case AnimationProperty.Rotation:\n            transform.rotationQuaternion = val as Quaternion;\n            break;\n          case AnimationProperty.Scale:\n            transform.scale = val as Vector3;\n            break;\n        }\n      }\n    }\n  }\n}\n","import { Vector3, Quaternion } from \"@oasis-engine/math\";\n\n/**\n * @internal\n */\nexport class AnimatorUtils {\n  private static _tempVector30: Vector3 = new Vector3();\n  private static _tempVector31: Vector3 = new Vector3();\n\n  static scaleWeight(s: Vector3, w: number, out: Vector3): void {\n    const sX = s.x;\n    const sY = s.y;\n    const sZ = s.z;\n    out.x = sX > 0 ? Math.pow(Math.abs(sX), w) : -Math.pow(Math.abs(sX), w);\n    out.y = sY > 0 ? Math.pow(Math.abs(sY), w) : -Math.pow(Math.abs(sY), w);\n    out.z = sZ > 0 ? Math.pow(Math.abs(sZ), w) : -Math.pow(Math.abs(sZ), w);\n  }\n\n  static scaleBlend(sa: Vector3, sb: Vector3, w: number, out: Vector3): void {\n    const saw = AnimatorUtils._tempVector30;\n    const sbw = AnimatorUtils._tempVector31;\n    AnimatorUtils.scaleWeight(sa, 1.0 - w, saw);\n    AnimatorUtils.scaleWeight(sb, w, sbw);\n    const sng = w > 0.5 ? sb : sa;\n    out.x = sng.x > 0 ? Math.abs(saw.x * sbw.x) : -Math.abs(saw.x * sbw.x);\n    out.y = sng.y > 0 ? Math.abs(saw.y * sbw.y) : -Math.abs(saw.y * sbw.y);\n    out.z = sng.z > 0 ? Math.abs(saw.z * sbw.z) : -Math.abs(saw.z * sbw.z);\n  }\n\n  static quaternionWeight(s: Quaternion, w: number, out: Quaternion) {\n    out.x = s.x * w;\n    out.y = s.y * w;\n    out.z = s.z * w;\n    out.w = s.w;\n  }\n}\n","export enum AnimatorLayerBlendingMode {\n  Override,\n  Additive\n}\n","/**\n * Layer state.\n */\nexport enum LayerState {\n  /** Standby state. */\n  Standby,//CM: Standby 优化\n  /** Playing state. */\n  Playing,\n  /** CrossFading state. */\n  CrossFading,\n  /** FixedCrossFading state. */\n  FixedCrossFading\n}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Component } from \"../../Component\";\nimport { Entity } from \"../../Entity\";\nimport { SkinnedMeshRenderer } from \"../../mesh/SkinnedMeshRenderer\";\nimport { AnimationProperty } from \"../enums/AnimationProperty\";\nimport { InterpolableValue } from \"../KeyFrame\";\n\n/**\n * @internal\n */\nexport class AnimationCurveOwner {\n  crossCurveMark: number = 0;\n  crossCurveIndex: number;\n\n  readonly target: Entity;\n  readonly type: new (entity: Entity) => Component;\n  readonly property: AnimationProperty;\n  readonly component: Component;\n  readonly defaultValue: InterpolableValue;\n  readonly fixedPoseValue: InterpolableValue;\n\n  constructor(target: Entity, type: new (entity: Entity) => Component, property: AnimationProperty) {\n    this.target = target;\n    this.type = type;\n    this.property = property;\n    switch (property) {\n      case AnimationProperty.Position:\n        this.defaultValue = new Vector3();\n        this.fixedPoseValue = new Vector3();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.Rotation:\n        this.defaultValue = new Quaternion();\n        this.fixedPoseValue = new Quaternion();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.Scale:\n        this.defaultValue = new Vector3();\n        this.fixedPoseValue = new Vector3();\n        this.component = target.transform;\n        break;\n      case AnimationProperty.BlendShapeWeights:\n        this.defaultValue = new Float32Array(4);\n        this.fixedPoseValue = new Float32Array(4);\n        this.component = target.getComponent(SkinnedMeshRenderer);\n        break;\n    }\n  }\n\n  saveDefaultValue(): void {\n    switch (this.property) {\n      case AnimationProperty.Position:\n        this.target.transform.position.cloneTo(<Vector3>this.defaultValue);\n        break;\n      case AnimationProperty.Rotation:\n        this.target.transform.rotationQuaternion.cloneTo(<Quaternion>this.defaultValue);\n        break;\n      case AnimationProperty.Scale:\n        this.target.transform.scale.cloneTo(<Vector3>this.defaultValue);\n        break;\n    }\n  }\n\n  saveFixedPoseValue(): void {\n    switch (this.property) {\n      case AnimationProperty.Position:\n        this.target.transform.position.cloneTo(<Vector3>this.fixedPoseValue);\n        break;\n      case AnimationProperty.Rotation:\n        this.target.transform.rotationQuaternion.cloneTo(<Quaternion>this.fixedPoseValue);\n        break;\n      case AnimationProperty.Scale:\n        this.target.transform.scale.cloneTo(<Vector3>this.fixedPoseValue);\n        break;\n    }\n  }\n}\n","import { AnimationEvent } from \"../AnimationEvent\";\n/**\n * @internal\n */\nexport class AnimationEventHandler {\n  event: AnimationEvent;\n  handlers: Function[] = [];\n}\n","import { AnimatorState } from \"./AnimatorState\";\n\n/**\n * Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry.\n */\nexport class AnimatorStateTransition {\n  /** The duration of the transition. This is represented in normalized time. */\n  duration: number = 0;\n  /** The time at which the destination state will start. This is represented in normalized time. */\n  offset: number = 0;\n  /** ExitTime represents the exact time at which the transition can take effect. This is represented in normalized time. */\n  exitTime: number = 1;\n  /** The destination state of the transition. */\n  destinationState: AnimatorState;\n}\n","/**\n * Animation wrap mode.\n */\nexport enum WrapMode {\n  /** Play once */\n  Once = 0,\n  /** Loop play */\n  Loop = 1\n}\n","import { AnimatorState } from \"../AnimatorState\";\nimport { WrapMode } from \"../enums/WrapMode\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\n\n/**\n * @internal\n */\nexport class AnimatorStatePlayData {\n  state: AnimatorState;\n  stateData: AnimatorStateData;\n  frameTime: number;\n  finished: boolean;\n  clipTime: number;\n  currentEventIndex: number;\n\n  reset(state: AnimatorState, stateData: AnimatorStateData, offsetFrameTime: number): void {\n    this.state = state;\n    this.frameTime = offsetFrameTime;\n    this.stateData = stateData;\n    this.finished = false;\n    this.clipTime = this.state.clipStartTime;\n    this.currentEventIndex = 0;\n  }\n\n  update(): void {\n    const state = this.state;\n    let time = this.frameTime;\n    const duration = state.clipEndTime - state.clipStartTime;\n    if (time > duration) {\n      if (state.wrapMode === WrapMode.Loop) {\n        time = time % duration;\n      } else {\n        time = duration;\n        this.finished = true;\n      }\n    }\n    this.clipTime = time + this.state.clipStartTime;\n  }\n}\n","import { AnimatorStateTransition } from \"../AnimatorTransition\";\nimport { LayerState } from \"../enums/LayerState\";\nimport { AnimatorStateData } from \"./AnimatorStateData\";\nimport { AnimatorStatePlayData } from \"./AnimatorStatePlayData\";\n\n/**\n * @internal\n */\nexport class AnimatorLayerData {\n  animatorStateDataMap: Record<string, AnimatorStateData> = {};\n  srcPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  destPlayData: AnimatorStatePlayData = new AnimatorStatePlayData();\n  layerState: LayerState = LayerState.Standby;\n  crossCurveMark: number = 0;\n  manuallyTransition: AnimatorStateTransition = new AnimatorStateTransition();\n  crossFadeTransition: AnimatorStateTransition;\n\n  switchPlayData(): void {\n    const srcPlayData = this.destPlayData;\n    const switchTemp = this.srcPlayData;\n    this.srcPlayData = srcPlayData;\n    this.destPlayData = switchTemp;\n  }\n}\n","import { AnimationEventHandler } from \"./AnimationEventHandler\";\nimport { AnimationCurveOwner } from \"./AnimationCurveOwner\";\n\n/**\n * @internal\n */\nexport class AnimatorStateData {\n  curveOwners: AnimationCurveOwner[] = [];\n  eventHandlers: AnimationEventHandler[] = [];\n}\n","import { AnimatorState } from \"../AnimatorState\";\n\n/**\n * @internal\n */\nexport class AnimatorStateInfo {\n  layerIndex: number;\n  state: AnimatorState;\n}\n","import { AnimationCurveOwner } from \"./AnimationCurveOwner\";\n/**\n * @internal\n */\nexport class CrossCurveData {\n  curveOwner: AnimationCurveOwner;\n  srcCurveIndex: number;\n  destCurveIndex: number;\n}\n","import { Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { assignmentClone, ignoreClone } from \"../clone/CloneManager\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { SkinnedMeshRenderer } from \"../mesh\";\nimport { ClassPool } from \"../RenderPipeline/ClassPool\";\nimport { Transform } from \"../Transform\";\nimport { UpdateFlag } from \"../UpdateFlag\";\nimport { AnimationCurve } from \"./AnimationCurve\";\nimport { AnimatorController } from \"./AnimatorController\";\nimport { AnimatorState } from \"./AnimatorState\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { AnimatorUtils } from \"./AnimatorUtils\";\nimport { AnimationProperty } from \"./enums/AnimationProperty\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\nimport { LayerState } from \"./enums/LayerState\";\nimport { AnimationCurveOwner } from \"./internal/AnimationCurveOwner\";\nimport { AnimationEventHandler } from \"./internal/AnimationEventHandler\";\nimport { AnimatorLayerData } from \"./internal/AnimatorLayerData\";\nimport { AnimatorStateData } from \"./internal/AnimatorStateData\";\nimport { AnimatorStateInfo } from \"./internal/AnimatorStateInfo\";\nimport { AnimatorStatePlayData } from \"./internal/AnimatorStatePlayData\";\nimport { CrossCurveData } from \"./internal/CrossCurveData\";\nimport { InterpolableValue, UnionInterpolableKeyframe } from \"./KeyFrame\";\n\n/**\n * The controller of the animation system.\n */\nexport class Animator extends Component {\n  private static _tempVector3: Vector3 = new Vector3();\n  private static _tempQuaternion: Quaternion = new Quaternion();\n  private static _animatorInfo: AnimatorStateInfo = new AnimatorStateInfo();\n\n  protected _animatorController: AnimatorController;\n  @assignmentClone\n  protected _speed: number = 1.0;\n  @ignoreClone\n  protected _controllerUpdateFlag: UpdateFlag;\n\n  @ignoreClone\n  private _animatorLayersData: AnimatorLayerData[] = [];\n  @ignoreClone\n  private _crossCurveDataCollection: CrossCurveData[] = [];\n  @ignoreClone\n  private _animationCurveOwners: AnimationCurveOwner[][] = [];\n  @ignoreClone\n  private _crossCurveDataPool: ClassPool<CrossCurveData> = new ClassPool(CrossCurveData);\n  @ignoreClone\n  private _animationEventHandlerPool: ClassPool<AnimationEventHandler> = new ClassPool(AnimationEventHandler);\n\n  /**\n   * The playback speed of the Animator, 1.0 is normal playback speed.\n   */\n  get speed(): number {\n    return this._speed;\n  }\n\n  set speed(value: number) {\n    this._speed = value;\n  }\n\n  /**\n   * All layers from the AnimatorController which belongs this Animator.\n   */\n  get animatorController(): AnimatorController {\n    return this._animatorController;\n  }\n\n  set animatorController(animatorController: AnimatorController) {\n    if (animatorController !== this._animatorController) {\n      this._controllerUpdateFlag && this._controllerUpdateFlag.destroy();\n      this._controllerUpdateFlag = animatorController && animatorController._registerChangeFlag();\n      this._animatorController = animatorController;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  constructor(entity: Entity) {\n    super(entity);\n  }\n\n  /**\n   * Play a state by name.\n   * @param stateName - The state name\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  play(stateName: string, layerIndex: number = -1, normalizedTimeOffset: number = 0): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._clearPlayData();\n    }\n\n    const animatorInfo = this._getAnimatorStateInfo(stateName, layerIndex, Animator._animatorInfo);\n    const { state } = animatorInfo;\n\n    if (!state) {\n      return;\n    }\n    if (!state.clip) {\n      console.warn(`The state named ${stateName} has no AnimationClip data.`);\n      return;\n    }\n    const animatorLayerData = this._getAnimatorLayerData(animatorInfo.layerIndex);\n    const { srcPlayData } = animatorLayerData;\n    const { state: curState } = srcPlayData;\n    if (curState && curState !== state) {\n      this._revertDefaultValue(srcPlayData);\n    }\n\n    //CM: Not consider same stateName, but different animation\n    const animatorStateData = this._getAnimatorStateData(stateName, state, animatorLayerData);\n\n    animatorLayerData.layerState = LayerState.Playing;\n    srcPlayData.reset(state, animatorStateData, state._getDuration() * normalizedTimeOffset);\n\n    this._saveDefaultValues(animatorStateData);\n  }\n\n  /**\n   * Create a cross fade from the current state to another state.\n   * @param stateName - The state name\n   * @param normalizedTransitionDuration - The duration of the transition (normalized)\n   * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name\n   * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)\n   */\n  crossFade(\n    stateName: string,\n    normalizedTransitionDuration: number,\n    layerIndex: number = -1,\n    normalizedTimeOffset: number = 0\n  ): void {\n    if (this._controllerUpdateFlag?.flag) {\n      this._clearPlayData();\n    }\n\n    const { state } = this._getAnimatorStateInfo(stateName, layerIndex, Animator._animatorInfo);\n    const { manuallyTransition } = this._getAnimatorLayerData(layerIndex);\n    manuallyTransition.duration = normalizedTransitionDuration;\n    manuallyTransition.offset = normalizedTimeOffset;\n    manuallyTransition.destinationState = state;\n    this._crossFadeByTransition(manuallyTransition, layerIndex);\n  }\n\n  /**\n   * Evaluates the animator component based on deltaTime.\n   * @param deltaTime - The deltaTime when the animation update\n   */\n  update(deltaTime: number): void {\n    if (this.speed === 0) {\n      return;\n    }\n\n    const { _animatorController: animatorController } = this;\n    if (!animatorController) {\n      return;\n    }\n    if (this._controllerUpdateFlag?.flag) {\n      return;\n    }\n    deltaTime *= this.speed;\n    for (let i = 0, n = animatorController.layers.length; i < n; i++) {\n      const animatorLayerData = this._getAnimatorLayerData(i);\n      if (animatorLayerData.layerState === LayerState.Standby) {\n        continue;\n      }\n\n      this._updateLayer(i, i === 0, deltaTime / 1000);\n    }\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onDisable(): void {\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n\n  private _getAnimatorStateInfo(stateName: string, layerIndex: number, out: AnimatorStateInfo): AnimatorStateInfo {\n    let state: AnimatorState = null;\n    const { _animatorController: animatorController } = this;\n    if (animatorController) {\n      const layers = animatorController.layers;\n      if (layerIndex === -1) {\n        for (let i = 0, n = layers.length; i < n; i++) {\n          state = layers[i].stateMachine.findStateByName(stateName);\n          if (state) {\n            layerIndex = i;\n            break;\n          }\n        }\n      } else {\n        state = layers[layerIndex].stateMachine.findStateByName(stateName);\n      }\n    }\n    out.layerIndex = layerIndex;\n    out.state = state;\n    return out;\n  }\n\n  private _saveDefaultValues(stateData: AnimatorStateData): void {\n    const { curveOwners } = stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      curveOwners[i].saveDefaultValue();\n    }\n  }\n\n  private _getAnimatorStateData(\n    stateName: string,\n    animatorState: AnimatorState,\n    animatorLayerData: AnimatorLayerData\n  ): AnimatorStateData {\n    const { animatorStateDataMap: animatorStateDataCollection } = animatorLayerData;\n    let animatorStateData = animatorStateDataCollection[stateName];\n    if (!animatorStateData) {\n      animatorStateData = new AnimatorStateData();\n      animatorStateDataCollection[stateName] = animatorStateData;\n      this._saveAnimatorStateData(animatorState, animatorStateData);\n      this._saveAnimatorEventHandlers(animatorState, animatorStateData);\n    }\n    return animatorStateData;\n  }\n\n  private _saveAnimatorStateData(animatorState: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const { entity, _animationCurveOwners: animationCureOwners } = this;\n    const { curveOwners } = animatorStateData;\n    const { _curveBindings: curves } = animatorState.clip;\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const curve = curves[i];\n      const targetEntity = curve.relativePath === \"\" ? entity : entity.findByPath(curve.relativePath);\n      const { property } = curve;\n      const { instanceId } = targetEntity;\n      const propertyOwners = animationCureOwners[instanceId] || (animationCureOwners[instanceId] = []);\n      curveOwners[i] =\n        propertyOwners[property] ||\n        (propertyOwners[property] = new AnimationCurveOwner(targetEntity, curve.type, property));\n    }\n  }\n\n  private _saveAnimatorEventHandlers(state: AnimatorState, animatorStateData: AnimatorStateData): void {\n    const eventHandlerPool = this._animationEventHandlerPool;\n    const scripts = this._entity._scripts;\n    const scriptCount = scripts.length;\n    const { eventHandlers } = animatorStateData;\n    const { events } = state.clip;\n\n    eventHandlerPool.resetPool();\n    eventHandlers.length = 0;\n    for (let i = 0, n = events.length; i < n; i++) {\n      const event = events[i];\n      const eventHandler = eventHandlerPool.getFromPool();\n      const funcName = event.functionName;\n      const { handlers } = eventHandler;\n\n      eventHandler.event = event;\n      handlers.length = 0;\n      for (let j = scriptCount - 1; j >= 0; j--) {\n        const handler = <Function>scripts.get(j)[funcName];\n        handler && handlers.push(handler);\n      }\n      eventHandlers.push(eventHandler);\n    }\n  }\n\n  private _clearCrossData(animatorLayerData: AnimatorLayerData): void {\n    animatorLayerData.crossCurveMark++;\n    this._crossCurveDataCollection.length = 0;\n    this._crossCurveDataPool.resetPool();\n  }\n\n  private _addCrossCurveData(\n    crossCurveData: CrossCurveData[],\n    owner: AnimationCurveOwner,\n    curCurveIndex: number,\n    nextCurveIndex: number\n  ): void {\n    const dataItem = this._crossCurveDataPool.getFromPool();\n    dataItem.curveOwner = owner;\n    dataItem.srcCurveIndex = curCurveIndex;\n    dataItem.destCurveIndex = nextCurveIndex;\n    crossCurveData.push(dataItem);\n  }\n\n  private _prepareCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n    const { crossCurveMark } = animatorLayerData;\n\n    // Add src cross curve data.\n    this._prepareSrcCrossData(crossCurveData, animatorLayerData.srcPlayData, crossCurveMark, false);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, false);\n  }\n\n  private _prepareStandbyCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n    const { srcPlayData, crossCurveMark } = animatorLayerData;\n\n    // Standby have two sub state, one is never play, one is finished, never play srcPlayData is null.\n    srcPlayData && this._prepareSrcCrossData(crossCurveData, srcPlayData, crossCurveMark, true);\n    // Add dest cross curve data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, crossCurveMark, true);\n  }\n\n  private _prepareFixedPoseCrossFading(animatorLayerData: AnimatorLayerData): void {\n    const crossCurveData = this._crossCurveDataCollection;\n\n    // Save current cross curve data owner fixed pose.\n    for (let i = crossCurveData.length - 1; i >= 0; i--) {\n      const item = crossCurveData[i];\n      item.curveOwner.saveFixedPoseValue();\n      // Reset destCurveIndex When fixed pose crossFading again.\n      item.destCurveIndex = -1;\n    }\n    // prepare dest AnimatorState cross data.\n    this._prepareDestCrossData(crossCurveData, animatorLayerData.destPlayData, animatorLayerData.crossCurveMark, true);\n  }\n\n  private _prepareSrcCrossData(\n    crossCurveData: CrossCurveData[],\n    srcPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = srcPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      owner.crossCurveMark = crossCurveMark;\n      owner.crossCurveIndex = crossCurveData.length;\n      saveFixed && owner.saveFixedPoseValue();\n      this._addCrossCurveData(crossCurveData, owner, i, -1);\n    }\n  }\n\n  private _prepareDestCrossData(\n    crossCurveData: CrossCurveData[],\n    destPlayData: AnimatorStatePlayData,\n    crossCurveMark: number,\n    saveFixed: boolean\n  ): void {\n    const { curveOwners } = destPlayData.stateData;\n    for (let i = curveOwners.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      // Not include in previous AnimatorState.\n      if (owner.crossCurveMark === crossCurveMark) {\n        crossCurveData[owner.crossCurveIndex].destCurveIndex = i;\n      } else {\n        saveFixed && owner.saveFixedPoseValue();\n        owner.crossCurveMark = crossCurveMark;\n        owner.crossCurveIndex = crossCurveData.length;\n        this._addCrossCurveData(crossCurveData, owner, -1, i);\n      }\n    }\n  }\n\n  private _evaluateCurve(\n    property: AnimationProperty,\n    curve: AnimationCurve,\n    time: number,\n    additive: boolean\n  ): InterpolableValue {\n    const value = curve.evaluate(time);\n\n    if (additive) {\n      const baseValue = (<UnionInterpolableKeyframe>curve.keys[0]).value;\n      switch (property) {\n        case AnimationProperty.Position:\n          const pos = Animator._tempVector3;\n          Vector3.subtract(<Vector3>value, <Vector3>baseValue, pos);\n          return pos;\n        case AnimationProperty.Rotation:\n          const rot = Animator._tempQuaternion;\n          Quaternion.conjugate(<Quaternion>baseValue, rot);\n          Quaternion.multiply(rot, <Quaternion>value, <Quaternion>rot);\n          return rot;\n        case AnimationProperty.Scale:\n          const scale = Animator._tempVector3;\n          Vector3.divide(<Vector3>value, <Vector3>baseValue, <Vector3>scale);\n          return scale;\n      }\n    }\n    return value;\n  }\n\n  private _getAnimatorLayerData(layerIndex: number): AnimatorLayerData {\n    let animatorLayerData = this._animatorLayersData[layerIndex];\n    animatorLayerData || (this._animatorLayersData[layerIndex] = animatorLayerData = new AnimatorLayerData());\n    return animatorLayerData;\n  }\n\n  private _updateLayer(layerIndex: number, firstLayer: boolean, deltaTime: number): void {\n    const { blendingMode, weight } = this._animatorController.layers[layerIndex];\n    const animLayerData = this._animatorLayersData[layerIndex];\n    const { srcPlayData, destPlayData, crossFadeTransition: crossFadeTransitionInfo } = animLayerData;\n    const layerAdditive = blendingMode === AnimatorLayerBlendingMode.Additive;\n    const layerWeight = firstLayer ? 1.0 : weight;\n    this._checkTransition(srcPlayData, crossFadeTransitionInfo, layerIndex);\n    switch (animLayerData.layerState) {\n      case LayerState.Playing:\n        this._updatePlayingState(srcPlayData, animLayerData, layerWeight, deltaTime, layerAdditive);\n        break;\n      case LayerState.FixedCrossFading:\n        this._updateCrossFadeFromPose(destPlayData, animLayerData, layerWeight, deltaTime, layerAdditive);\n        break;\n      case LayerState.CrossFading:\n        this._updateCrossFade(srcPlayData, destPlayData, animLayerData, layerWeight, deltaTime, layerAdditive);\n        break;\n    }\n  }\n\n  private _updatePlayingState(\n    playData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ): void {\n    const { curveOwners, eventHandlers } = playData.stateData;\n    const { state } = playData;\n    const { _curveBindings: curves } = state.clip;\n    const lastClipTime = playData.clipTime;\n\n    playData.update();\n\n    const clipTime = playData.clipTime;\n\n    eventHandlers.length && this._fireAnimationEvents(playData, eventHandlers, lastClipTime, clipTime);\n\n    for (let i = curves.length - 1; i >= 0; i--) {\n      const owner = curveOwners[i];\n      const value = this._evaluateCurve(owner.property, curves[i].curve, clipTime, additive);\n      if (additive) {\n        this._applyClipValueAdditive(owner, value, weight);\n      } else {\n        this._applyClipValue(owner, value, weight);\n      }\n    }\n    playData.frameTime += state.speed * delta;\n\n    if (playData.finished) {\n      layerData.layerState = LayerState.Standby;\n    }\n  }\n\n  private _updateCrossFade(\n    srcPlayData: AnimatorStatePlayData,\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ) {\n    const crossCurveDataCollection = this._crossCurveDataCollection;\n    const srcCurves = srcPlayData.state.clip._curveBindings;\n    const { state: destState } = destPlayData;\n    const destCurves = destState.clip._curveBindings;\n\n    let crossWeight = destPlayData.frameTime / (destState._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n    srcPlayData.update();\n    destPlayData.update();\n\n    const srcClipTime = srcPlayData.clipTime;\n    const destClipTime = destPlayData.clipTime;\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const { curveOwner, srcCurveIndex, destCurveIndex } = crossCurveDataCollection[i];\n      const { property, defaultValue } = curveOwner;\n\n      const srcValue =\n        srcCurveIndex >= 0\n          ? this._evaluateCurve(property, srcCurves[srcCurveIndex].curve, srcClipTime, additive)\n          : defaultValue;\n      const destValue =\n        destCurveIndex >= 0\n          ? this._evaluateCurve(property, destCurves[destCurveIndex].curve, destClipTime, additive)\n          : defaultValue;\n\n      this._applyCrossClipValue(curveOwner, srcValue, destValue, crossWeight, weight, additive);\n    }\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, false);\n  }\n\n  private _updateCrossFadeFromPose(\n    destPlayData: AnimatorStatePlayData,\n    layerData: AnimatorLayerData,\n    weight: number,\n    delta: number,\n    additive: boolean\n  ) {\n    const crossCurveDataCollection = this._crossCurveDataCollection;\n    const { state: destState } = destPlayData;\n    const curves = destState.clip._curveBindings;\n\n    let crossWeight = destPlayData.frameTime / (destState._getDuration() * layerData.crossFadeTransition.duration);\n    crossWeight >= 1.0 && (crossWeight = 1.0);\n    destPlayData.update();\n\n    const destClipTime = destPlayData.clipTime;\n    for (let i = crossCurveDataCollection.length - 1; i >= 0; i--) {\n      const { curveOwner, destCurveIndex } = crossCurveDataCollection[i];\n      const destValue =\n        destCurveIndex >= 0\n          ? this._evaluateCurve(curveOwner.property, curves[destCurveIndex].curve, destClipTime, additive)\n          : curveOwner.defaultValue;\n\n      this._applyCrossClipValue(curveOwner, curveOwner.fixedPoseValue, destValue, crossWeight, weight, additive);\n    }\n\n    this._updateCrossFadeData(layerData, crossWeight, delta, true);\n  }\n\n  private _updateCrossFadeData(layerData: AnimatorLayerData, crossWeight: number, delta: number, fixed: boolean): void {\n    const { destPlayData } = layerData;\n    destPlayData.frameTime += destPlayData.state.speed * delta;\n    if (crossWeight === 1.0) {\n      if (destPlayData.finished) {\n        layerData.layerState = LayerState.Standby;\n      } else {\n        layerData.layerState = LayerState.Playing;\n      }\n      layerData.switchPlayData();\n    } else {\n      fixed || (layerData.srcPlayData.frameTime += layerData.srcPlayData.state.speed * delta);\n    }\n  }\n\n  private _applyCrossClipValue(\n    owner: AnimationCurveOwner,\n    srcValue: InterpolableValue,\n    destValue: InterpolableValue,\n    crossWeight: number,\n    layerWeight: number,\n    additive: boolean\n  ): void {\n    let value: InterpolableValue;\n    if (owner.type === Transform) {\n      const transform = owner.target.transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          Vector3.lerp(srcValue as Vector3, destValue as Vector3, crossWeight, Animator._tempVector3);\n          value = Animator._tempVector3;\n          break;\n        case AnimationProperty.Rotation:\n          Quaternion.slerp(srcValue as Quaternion, destValue as Quaternion, crossWeight, Animator._tempQuaternion);\n          value = Animator._tempQuaternion;\n          break;\n        case AnimationProperty.Scale: {\n          const scale = transform.scale;\n          Vector3.lerp(srcValue as Vector3, destValue as Vector3, crossWeight, Animator._tempVector3);\n          transform.scale = scale;\n          value = Animator._tempVector3;\n          break;\n        }\n      }\n    }\n\n    if (additive) {\n      this._applyClipValueAdditive(owner, value, layerWeight);\n    } else {\n      this._applyClipValue(owner, value, layerWeight);\n    }\n  }\n\n  private _applyClipValue(owner: AnimationCurveOwner, value: InterpolableValue, weight: number): void {\n    if (owner.type === Transform) {\n      const transform = owner.target.transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          if (weight === 1.0) {\n            transform.position = <Vector3>value;\n          } else {\n            const position = transform.position;\n            Vector3.lerp(position, <Vector3>value, weight, position);\n            transform.position = position;\n          }\n          break;\n        case AnimationProperty.Rotation:\n          if (weight === 1.0) {\n            transform.rotationQuaternion = <Quaternion>value;\n          } else {\n            const rotationQuaternion = transform.rotationQuaternion;\n            Quaternion.slerp(rotationQuaternion, <Quaternion>value, weight, rotationQuaternion);\n            transform.rotationQuaternion = rotationQuaternion;\n          }\n          break;\n        case AnimationProperty.Scale:\n          if (weight === 1.0) {\n            transform.scale = <Vector3>value;\n          } else {\n            const scale = transform.scale;\n            Vector3.lerp(scale, <Vector3>value, weight, scale);\n            transform.scale = scale;\n          }\n          break;\n      }\n    } else if (owner.type === SkinnedMeshRenderer) {\n      switch (owner.property) {\n        case AnimationProperty.BlendShapeWeights:\n          (<SkinnedMeshRenderer>owner.component).blendShapeWeights = <Float32Array>value;\n          break;\n      }\n    }\n  }\n\n  private _applyClipValueAdditive(owner: AnimationCurveOwner, additiveValue: InterpolableValue, weight: number): void {\n    if (owner.type === Transform) {\n      const transform = (<Entity>owner.target).transform;\n      switch (owner.property) {\n        case AnimationProperty.Position:\n          const position = transform.position;\n          position.x += (<Vector3>additiveValue).x * weight;\n          position.y += (<Vector3>additiveValue).y * weight;\n          position.z += (<Vector3>additiveValue).z * weight;\n          transform.position = position;\n          break;\n        case AnimationProperty.Rotation:\n          const rotationQuaternion = transform.rotationQuaternion;\n          AnimatorUtils.quaternionWeight(<Quaternion>additiveValue, weight, <Quaternion>additiveValue);\n          (<Quaternion>additiveValue).normalize();\n          rotationQuaternion.multiply(<Quaternion>additiveValue);\n          transform.rotationQuaternion = rotationQuaternion;\n          break;\n        case AnimationProperty.Scale:\n          const scale = transform.scale;\n          AnimatorUtils.scaleWeight(scale, weight, scale);\n          Vector3.multiply(scale, <Vector3>additiveValue, scale);\n          transform.scale = scale;\n          break;\n      }\n    }\n  }\n\n  private _revertDefaultValue(playData: AnimatorStatePlayData) {\n    const { clip } = playData.state;\n    if (clip) {\n      const curves = clip._curveBindings;\n      const { curveOwners } = playData.stateData;\n      for (let i = curves.length - 1; i >= 0; i--) {\n        const owner = curveOwners[i];\n        const { transform } = owner.target;\n        switch (owner.property) {\n          case AnimationProperty.Position:\n            transform.position = <Vector3>owner.defaultValue;\n            break;\n          case AnimationProperty.Rotation:\n            transform.rotationQuaternion = <Quaternion>owner.defaultValue;\n            break;\n          case AnimationProperty.Scale:\n            transform.scale = <Vector3>owner.defaultValue;\n            break;\n        }\n      }\n    }\n  }\n\n  private _checkTransition(\n    stateData: AnimatorStatePlayData,\n    crossFadeTransition: AnimatorStateTransition,\n    layerIndex: number\n  ) {\n    const { state, clipTime } = stateData;\n    const duration = state._getDuration();\n    const { transitions } = state;\n    for (let i = 0, n = transitions.length; i < n; ++i) {\n      const transition = transitions[i];\n      if (duration * transition.exitTime <= clipTime) {\n        crossFadeTransition !== transition && this._crossFadeByTransition(transition, layerIndex);\n      }\n    }\n  }\n\n  private _crossFadeByTransition(transition: AnimatorStateTransition, layerIndex: number) {\n    const { name } = transition.destinationState;\n    const animatorStateInfo = this._getAnimatorStateInfo(name, layerIndex, Animator._animatorInfo);\n    const { state: crossState } = animatorStateInfo;\n    if (!crossState) {\n      return;\n    }\n    if (!crossState.clip) {\n      console.warn(`The state named ${name} has no AnimationClip data.`);\n      return;\n    }\n\n    const animatorLayerData = this._getAnimatorLayerData(animatorStateInfo.layerIndex);\n    const layerState = animatorLayerData.layerState;\n    const { destPlayData } = animatorLayerData;\n\n    const animatorStateData = this._getAnimatorStateData(name, crossState, animatorLayerData);\n    const duration = crossState._getDuration();\n    const offset = duration * transition.offset;\n    destPlayData.reset(crossState, animatorStateData, offset);\n\n    this._saveDefaultValues(animatorStateData);\n\n    switch (layerState) {\n      // Maybe not play, maybe end.\n      case LayerState.Standby:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareStandbyCrossFading(animatorLayerData);\n        break;\n      case LayerState.Playing:\n        animatorLayerData.layerState = LayerState.CrossFading;\n        this._clearCrossData(animatorLayerData);\n        this._prepareCrossFading(animatorLayerData);\n        break;\n      case LayerState.CrossFading:\n        animatorLayerData.layerState = LayerState.FixedCrossFading;\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n      case LayerState.FixedCrossFading:\n        this._prepareFixedPoseCrossFading(animatorLayerData);\n        break;\n    }\n\n    animatorLayerData.crossFadeTransition = transition;\n  }\n\n  private _fireAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    clipTime: number\n  ): void {\n    // TODO: If play backward, not work.\n    if (clipTime < lastClipTime) {\n      this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, playState.state.clipEndTime);\n      playState.currentEventIndex = 0;\n      this._fireSubAnimationEvents(playState, eventHandlers, playState.state.clipStartTime, clipTime);\n    } else {\n      this._fireSubAnimationEvents(playState, eventHandlers, lastClipTime, clipTime);\n    }\n  }\n\n  private _fireSubAnimationEvents(\n    playState: AnimatorStatePlayData,\n    eventHandlers: AnimationEventHandler[],\n    lastClipTime: number,\n    curClipTime: number\n  ): void {\n    for (let i = playState.currentEventIndex, n = eventHandlers.length; i < n; i++) {\n      const eventHandler = eventHandlers[i];\n      const { time, parameter } = eventHandler.event;\n\n      if (time > curClipTime) {\n        break;\n      }\n\n      const { handlers } = eventHandler;\n      if (time >= lastClipTime) {\n        for (let j = handlers.length - 1; j >= 0; j--) {\n          handlers[j](parameter);\n        }\n        playState.currentEventIndex = i + 1;\n      }\n    }\n  }\n\n  private _clearPlayData() {\n    this._animatorLayersData.length = 0;\n    this._crossCurveDataCollection.length = 0;\n    this._animationCurveOwners.length = 0;\n    this._controllerUpdateFlag.flag = false;\n  }\n}\n","import { UpdateFlag } from \"../UpdateFlag\";\nimport { UpdateFlagManager } from \"../UpdateFlagManager\";\nimport { AnimatorControllerLayer } from \"./AnimatorControllerLayer\";\n\n/**\n * Store the data for Animator playback.\n */\nexport class AnimatorController {\n  private _updateFlagManager: UpdateFlagManager = new UpdateFlagManager();\n  private _layers: AnimatorControllerLayer[] = [];\n  private _layersMap: Record<string, AnimatorControllerLayer> = {};\n\n  /**\n   * The layers in the controller.\n   */\n  get layers(): Readonly<AnimatorControllerLayer[]> {\n    return this._layers;\n  }\n\n  /**\n   * Get the layer by name.\n   * @param name - The layer's name.\n   */\n  findLayerByName(name: string): AnimatorControllerLayer {\n    return this._layersMap[name];\n  }\n\n  /**\n   * Add a layer to the controller.\n   * @param layer - The layer to add\n   */\n  addLayer(layer: AnimatorControllerLayer): void {\n    this._layers.push(layer);\n    this._layersMap[layer.name] = layer;\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * Remove a layer from the controller.\n   * @param layerIndex - The index of the AnimatorLayer\n   */\n  removeLayer(layerIndex: number): void {\n    const theLayer = this.layers[layerIndex];\n    this._layers.splice(layerIndex, 1);\n    delete this._layersMap[theLayer.name];\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * Clear layers.\n   */\n  clearLayers(): void {\n    this._layers.length = 0;\n    for (let name in this._layersMap) {\n      delete this._layersMap[name];\n    }\n    this._distributeUpdateFlag();\n  }\n\n  /**\n   * @internal\n   */\n  _registerChangeFlag(): UpdateFlag {\n    return this._updateFlagManager.register();\n  }\n\n  private _distributeUpdateFlag(): void {\n    this._updateFlagManager.distribute();\n  }\n}\n","import { AnimatorStateMachine } from \"./AnimatorStateMachine\";\nimport { AnimatorLayerBlendingMode } from \"./enums/AnimatorLayerBlendingMode\";\n\n/**\n * The Animation Layer contains a state machine that controls animations of a model or part of it.\n */\nexport class AnimatorControllerLayer {\n  /** The blending weight that the layers has. It is not taken into account for the first layer. */\n  weight: number = 1.0;\n  /** The blending mode used by the layer. It is not taken into account for the first layer. */\n  blendingMode: AnimatorLayerBlendingMode = AnimatorLayerBlendingMode.Override;\n  /** The state machine for the layer. */\n  stateMachine: AnimatorStateMachine;\n\n  /**\n   * @param name - The layer's name\n   */\n  constructor(public readonly name: string) {}\n}\n","import { AnimationClip } from \"./AnimationClip\";\nimport { AnimatorStateTransition } from \"./AnimatorTransition\";\nimport { WrapMode } from \"./enums/WrapMode\";\n\n/**\n * States are the basic building blocks of a state machine. Each state contains a AnimationClip which will play while the character is in that state.\n */\nexport class AnimatorState {\n  /** The speed of the clip. 1 is normal speed, default 1. */\n  speed: number = 1.0;\n  /** The wrap mode used in the state. */\n  wrapMode: WrapMode = WrapMode.Loop;\n\n  private _clipStartTime: number = 0;\n  private _clipEndTime: number = Infinity;\n  private _clip: AnimationClip;\n  private _transitions: AnimatorStateTransition[] = [];\n\n  /**\n   * The transitions that are going out of the state.\n   */\n  get transitions(): Readonly<AnimatorStateTransition[]> {\n    return this._transitions;\n  }\n\n  /**\n   * ƒThe clip that is being played by this animator state.\n   */\n  get clip(): AnimationClip {\n    return this._clip;\n  }\n\n  set clip(clip: AnimationClip) {\n    this._clip = clip;\n    this._clipEndTime = Math.min(this._clipEndTime, clip.length);\n  }\n\n  /**\n   * The clip start time the user set , default is 0.\n   */\n  get clipStartTime() {\n    return this._clipStartTime;\n  }\n\n  set clipStartTime(time: number) {\n    this._clipStartTime = time < 0 ? 0 : time;\n  }\n\n  /**\n   * The clip end time the user set , default is the clip duration.\n   */\n  get clipEndTime() {\n    return this._clipEndTime;\n  }\n\n  set clipEndTime(time: number) {\n    const clip = this._clip;\n    if (clip) {\n      this._clipEndTime = Math.min(time, clip.length);\n    }\n  }\n\n  /**\n   * @param name - The state's name\n   */\n  constructor(public readonly name: string) {}\n\n  /**\n   * Add an outgoing transition to the destination state.\n   * @param transition - The transition\n   */\n  addTransition(transition: AnimatorStateTransition): void {\n    this._transitions.push(transition);\n  }\n\n  /**\n   * Remove a transition from the state.\n   * @param transition - The transition\n   */\n  removeTransition(transition: AnimatorStateTransition): void {\n    const index = this._transitions.indexOf(transition);\n    index !== -1 && this._transitions.splice(index, 1);\n  }\n\n  /**\n   * Clears all transitions from the state.\n   */\n  clearTransitions(): void {\n    this._transitions.length = 0;\n  }\n\n  /**\n   * @internal\n   */\n  _getDuration(): number {\n    return this._clipEndTime - this._clipStartTime;\n  }\n}\n","import { AnimatorState } from \"./AnimatorState\";\nexport interface AnimatorStateMap {\n  [key: string]: AnimatorState;\n}\n\n/**\n * A graph controlling the interaction of states. Each state references a motion.\n */\nexport class AnimatorStateMachine {\n  /** The list of states. */\n  readonly states: AnimatorState[] = [];\n\n  /** @internal */\n  _statesMap: AnimatorStateMap = {};\n\n  /**\n   * Add a state to the state machine.\n   * @param name - The name of the new state\n   */\n  addState(name: string): AnimatorState {\n    let state = this.findStateByName(name);\n    if (!state) {\n      state = new AnimatorState(name);\n      this.states.push(state);\n      this._statesMap[name] = state;\n    } else {\n      console.warn(`The state named ${name} has existed.`);\n    }\n    return state;\n  }\n\n  /**\n   * Remove a state from the state machine.\n   * @param state - The state\n   */\n  removeState(state: AnimatorState): void {\n    const { name } = state;\n    const index = this.states.indexOf(state);\n    if (index > -1) {\n      this.states.splice(index, 1);\n    }\n    delete this._statesMap[name];\n  }\n\n  /**\n   * Get the state by name.\n   * @param name - The layer's name\n   */\n  findStateByName(name: string): AnimatorState {\n    return this._statesMap[name];\n  }\n\n  /**\n   * Makes a unique state name in the state machine.\n   * @param name - Desired name for the state.\n   * @returns Unique name.\n   */\n  makeUniqueStateName(name: string): string {\n    const { _statesMap } = this;\n    const originName = name;\n    let index = 0;\n    while (_statesMap[name]) {\n      name = `${originName} ${index}`;\n      index++;\n    }\n    return name;\n  }\n}\n","export enum InterpolableValueType {\n  Float,\n  FloatArray,\n  Vector2,\n  Vector3,\n  Vector4,\n  Quaternion\n}\n","/**\n * Animation interpolation method.\n */\nexport enum InterpolationType {\n  /** Linear interpolation */\n  Linear,\n  /** Cubic spline interpolation */\n  CubicSpine,\n  /** Stepped interpolation */\n  Step,\n  /** Hermite interpolation */\n  Hermite\n}\n","import { Quaternion, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { InterpolableValueType } from \"./enums/InterpolableValueType\";\nimport { InterpolationType } from \"./enums/InterpolationType\";\nimport {\n  FloatArrayKeyframe,\n  FloatKeyframe,\n  InterpolableValue,\n  QuaternionKeyframe,\n  UnionInterpolableKeyframe,\n  Vector2Keyframe,\n  Vector3Keyframe\n} from \"./KeyFrame\";\n\n/**\n * Store a collection of Keyframes that can be evaluated over time.\n */\nexport class AnimationCurve {\n  /** All keys defined in the animation curve. */\n  keys: UnionInterpolableKeyframe[] = [];\n  /** The interpolationType of the animation curve. */\n  interpolation: InterpolationType;\n\n  /** @internal */\n  _valueSize: number;\n  /** @internal */\n  _valueType: InterpolableValueType;\n\n  private _currentValue: InterpolableValue;\n  private _length: number = 0;\n  private _currentIndex: number = 0;\n\n  /**\n   * Animation curve length in seconds.\n   */\n  get length(): number {\n    return this._length;\n  }\n\n  /**\n   * Add a new key to the curve.\n   * @param key - The keyframe\n   */\n  addKey(key: UnionInterpolableKeyframe): void {\n    const { time } = key;\n    this.keys.push(key);\n    if (time > this._length) {\n      this._length = time;\n    }\n\n    if (!this._valueSize) {\n      //CM: It's not reasonable to write here.\n      if (typeof key.value == \"number\") {\n        this._valueSize = 1;\n        this._valueType = InterpolableValueType.Float;\n        this._currentValue = 0;\n      }\n      if (key.value instanceof Vector2) {\n        this._valueSize = 2;\n        this._valueType = InterpolableValueType.Vector2;\n        this._currentValue = new Vector2();\n      }\n      if (key.value instanceof Vector3) {\n        this._valueSize = 3;\n        this._valueType = InterpolableValueType.Vector3;\n        this._currentValue = new Vector3();\n      }\n      if (key.value instanceof Vector4) {\n        this._valueSize = 4;\n        this._valueType = InterpolableValueType.Vector4;\n        this._currentValue = new Vector4();\n      }\n      if (key.value instanceof Quaternion) {\n        this._valueSize = 4;\n        this._valueType = InterpolableValueType.Quaternion;\n        this._currentValue = new Quaternion();\n      }\n\n      if (key.value instanceof Float32Array) {\n        const size = key.value.length;\n        this._valueSize = size;\n        this._valueType = InterpolableValueType.FloatArray;\n        this._currentValue = new Float32Array(size);\n      }\n    }\n    this.keys.sort((a, b) => a.time - b.time);\n  }\n\n  /**\n   * Evaluate the curve at time.\n   * @param time - The time within the curve you want to evaluate\n   */\n  evaluate(time: number): InterpolableValue {\n    const { keys, interpolation } = this;\n    const { length } = this.keys;\n\n    // Compute curIndex and nextIndex.\n    let curIndex = this._currentIndex;\n\n    // Reset loop.\n    if (curIndex !== -1 && time < keys[curIndex].time) {\n      curIndex = -1;\n    }\n\n    let nextIndex = curIndex + 1;\n    while (nextIndex < length) {\n      if (time < keys[nextIndex].time) {\n        break;\n      }\n      curIndex++;\n      nextIndex++;\n    }\n    this._currentIndex = curIndex;\n    // Evaluate value.\n    let value: InterpolableValue;\n    if (curIndex === -1) {\n      value = (<UnionInterpolableKeyframe>keys[0]).value;\n    } else if (nextIndex === length) {\n      value = (<UnionInterpolableKeyframe>keys[curIndex]).value;\n    } else {\n      // Time between first frame and end frame.\n      const curFrameTime = keys[curIndex].time;\n      const duration = keys[nextIndex].time - curFrameTime;\n      const t = (time - curFrameTime) / duration;\n      const dur = duration;\n\n      switch (interpolation) {\n        case InterpolationType.Linear:\n          value = this._evaluateLinear(curIndex, nextIndex, t);\n          break;\n        case InterpolationType.Step:\n          value = this._evaluateStep(nextIndex);\n          break;\n        case InterpolationType.CubicSpine:\n        case InterpolationType.Hermite:\n          value = this._evaluateHermite(curIndex, nextIndex, t, dur);\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Removes the keyframe at index and inserts key.\n   * @param index - The index of the key to move\n   * @param key - The key to insert\n   */\n  moveKey(index: number, key: UnionInterpolableKeyframe): void {\n    this.keys[index] = key;\n  }\n\n  /**\n   * Removes a key.\n   * @param index - The index of the key to remove\n   */\n  removeKey(index: number): void {\n    this.keys.splice(index, 1);\n    const { keys } = this;\n    const count = this.keys.length;\n    let newLength = 0;\n    for (let i = count - 1; i >= 0; i--) {\n      if (keys[i].time > length) {\n        newLength = keys[i].time;\n      }\n    }\n    this._length = newLength;\n  }\n\n  private _evaluateLinear(frameIndex: number, nextFrameIndex: number, t: number): InterpolableValue {\n    const { _valueType, keys } = this;\n    switch (_valueType) {\n      case InterpolableValueType.Float:\n        return (<FloatKeyframe>keys[frameIndex]).value * (1 - t) + (<FloatKeyframe>keys[nextFrameIndex]).value * t;\n      case InterpolableValueType.FloatArray:\n        const curValue = this._currentValue;\n        const value = (<FloatArrayKeyframe>keys[frameIndex]).value;\n        const nextValue = (<FloatArrayKeyframe>keys[nextFrameIndex]).value;\n        for (let i = 0, n = value.length; i < n; i++) {\n          curValue[i] = value[i] * (1 - t) + nextValue[i] * t;\n        }\n        return curValue;\n      case InterpolableValueType.Vector2:\n        Vector2.lerp(\n          (<Vector2Keyframe>keys[frameIndex]).value,\n          (<Vector2Keyframe>keys[nextFrameIndex]).value,\n          t,\n          <Vector2>this._currentValue\n        );\n        return this._currentValue;\n      case InterpolableValueType.Vector3:\n        Vector3.lerp(\n          (<Vector3Keyframe>keys[frameIndex]).value,\n          (<Vector3Keyframe>keys[nextFrameIndex]).value,\n          t,\n          <Vector3>this._currentValue\n        );\n        return this._currentValue;\n      case InterpolableValueType.Quaternion:\n        Quaternion.slerp(\n          (<QuaternionKeyframe>keys[frameIndex]).value,\n          (<QuaternionKeyframe>keys[nextFrameIndex]).value,\n          t,\n          <Quaternion>this._currentValue\n        );\n        return this._currentValue;\n    }\n  }\n\n  private _evaluateStep(nextFrameIndex: number): InterpolableValue {\n    const { _valueSize, keys } = this;\n    if (_valueSize === 1) {\n      return (<UnionInterpolableKeyframe>keys[nextFrameIndex]).value;\n    } else {\n      return (<UnionInterpolableKeyframe>keys[nextFrameIndex]).value;\n    }\n  }\n\n  private _evaluateHermite(frameIndex: number, nextFrameIndex: number, t: number, dur: number): InterpolableValue {\n    const { _valueSize, keys } = this;\n    const curKey = keys[frameIndex];\n    const nextKey = keys[nextFrameIndex];\n    switch (_valueSize) {\n      case 1: {\n        const t0 = (<FloatKeyframe>curKey).outTangent,\n          t1 = (<FloatKeyframe>nextKey).inTangent,\n          p0 = (<FloatKeyframe>curKey).value,\n          p1 = (<FloatKeyframe>nextKey).value;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          const t2 = t * t;\n          const t3 = t2 * t;\n          const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n          const b = t3 - 2.0 * t2 + t;\n          const c = t3 - t2;\n          const d = -2.0 * t3 + 3.0 * t2;\n          return a * p0 + b * t0 * dur + c * t1 * dur + d * p1;\n        } else {\n          return (<FloatKeyframe>curKey).value;\n        }\n      }\n      case 2: {\n        const p0 = (<Vector2Keyframe>curKey).value;\n        const tan0 = (<Vector2Keyframe>curKey).outTangent;\n        const p1 = (<Vector2Keyframe>nextKey).value;\n        const tan1 = (<Vector2Keyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector2>this._currentValue).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Vector2>this._currentValue).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1))\n          (<Vector2>this._currentValue).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        else {\n          (<Vector2>this._currentValue).y = p0.y;\n        }\n        return this._currentValue;\n      }\n      case 3: {\n        const p0 = (<Vector3Keyframe>curKey).value;\n        const tan0 = (<Vector3Keyframe>curKey).outTangent;\n        const p1 = (<Vector3Keyframe>nextKey).value;\n        const tan1 = (<Vector3Keyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>this._currentValue).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Vector3>this._currentValue).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>this._currentValue).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        } else {\n          (<Vector3>this._currentValue).y = p0.y;\n        }\n\n        (t0 = tan0.z), (t1 = tan1.z);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Vector3>this._currentValue).z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n        } else {\n          (<Vector3>this._currentValue).z = p0.z;\n        }\n        return <Vector3>this._currentValue;\n      }\n      case 4: {\n        const p0 = (<QuaternionKeyframe>curKey).value;\n        const tan0 = (<QuaternionKeyframe>curKey).outTangent;\n        const p1 = (<QuaternionKeyframe>nextKey).value;\n        const tan1 = (<QuaternionKeyframe>nextKey).inTangent;\n\n        const t2 = t * t;\n        const t3 = t2 * t;\n        const a = 2.0 * t3 - 3.0 * t2 + 1.0;\n        const b = t3 - 2.0 * t2 + t;\n        const c = t3 - t2;\n        const d = -2.0 * t3 + 3.0 * t2;\n\n        let t0 = tan0.x,\n          t1 = tan1.x;\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).x = a * p0.x + b * t0 * dur + c * t1 * dur + d * p1.x;\n        } else {\n          (<Quaternion>this._currentValue).x = p0.x;\n        }\n\n        (t0 = tan0.y), (t1 = tan1.y);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).y = a * p0.y + b * t0 * dur + c * t1 * dur + d * p1.y;\n        } else {\n          (<Quaternion>this._currentValue).y = p0.y;\n        }\n\n        (t0 = tan0.z), (t1 = tan1.z);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).z = a * p0.z + b * t0 * dur + c * t1 * dur + d * p1.z;\n        } else {\n          (<Quaternion>this._currentValue).z = p0.z;\n        }\n\n        (t0 = tan0.w), (t1 = tan1.w);\n        if (Number.isFinite(t0) && Number.isFinite(t1)) {\n          (<Quaternion>this._currentValue).w = a * p0.w + b * t0 * dur + c * t1 * dur + d * p1.w;\n        } else {\n          (<Quaternion>this._currentValue).w = p0.w;\n        }\n        return <Quaternion>this._currentValue;\n      }\n    }\n  }\n}\n","import { Vector2, Vector3, Vector4, Quaternion } from \"@oasis-engine/math\";\n\n/**\n * Keyframe.\n * @typeParam V - Type of Keyframe value\n */\nexport class Keyframe<V> {\n  /** The time of the Keyframe. */\n  time: number;\n  /** The value of the Keyframe. */\n  value: V;\n}\n\n/**\n * InterpolableKeyframe.\n * @typeParam T - Type of Tangent value\n * @typeParam V - Type of Keyframe value\n */\nexport class InterpolableKeyframe<T, V> extends Keyframe<V> {\n  /** Sets the incoming tangent for this key. The incoming tangent affects the slope of the curve from the previous key to this key. */\n  inTangent?: T;\n  /** Sets the outgoing tangent for this key. The outgoing tangent affects the slope of the curve from this key to the next key. */\n  outTangent?: T;\n}\n\nexport type ObjectKeyframe = Keyframe<Object>;\nexport type FloatKeyframe = InterpolableKeyframe<number, number>;\nexport type FloatArrayKeyframe = InterpolableKeyframe<Float32Array, Float32Array>;\nexport type Vector2Keyframe = InterpolableKeyframe<Vector2, Vector2>;\nexport type Vector3Keyframe = InterpolableKeyframe<Vector3, Vector3>;\nexport type Vector4Keyframe = InterpolableKeyframe<Vector4, Vector4>;\nexport type QuaternionKeyframe = InterpolableKeyframe<Vector4, Quaternion>;\n\nexport type UnionInterpolableKeyframe =\n  | FloatKeyframe\n  | FloatArrayKeyframe\n  | Vector2Keyframe\n  | Vector3Keyframe\n  | Vector4Keyframe\n  | QuaternionKeyframe;\n\nexport type InterpolableValue = number | Vector2 | Vector3 | Vector4 | Quaternion | Float32Array | Object;\n","/**\n * AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.\n */\nexport class AnimationEvent {\n  /** The time when the event be triggered. */\n  time: number;\n  /** The name of the method called in the script. */\n  functionName: string;\n  /** The parameter that is stored in the event and will be sent to the function. */\n  parameter: Object;\n}\n","export enum AnimatorConditionMode {\n  If,\n  IfNot,\n  Greater,\n  Less,\n  Equals,\n  NotEquals\n}\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { CullMode } from \"../shader/enums/CullMode\";\nimport { Shader } from \"../shader/Shader\";\nimport { TextureCubeMap } from \"../texture\";\n\n/**\n * SkyboxMaterial\n */\nexport class SkyBoxMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"skybox\"));\n\n    this.renderState.rasterState.cullMode = CullMode.Off;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n  }\n\n  /** Texture cube map of the sky box material. */\n  get textureCubeMap(): TextureCubeMap {\n    return this.shaderData.getTexture(\"u_cube\") as TextureCubeMap;\n  }\n\n  set textureCubeMap(v: TextureCubeMap) {\n    this.shaderData.setTexture(\"u_cube\", v);\n  }\n}\n","import { MathUtil, Vector3, Color } from \"@oasis-engine/math\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferBindFlag } from \"../graphic/enums/BufferBindFlag\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { IndexFormat } from \"../graphic/enums/IndexFormat\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { RenderQueueType } from \"../material/enums/RenderQueueType\";\nimport { Shader, CullMode } from \"../shader\";\nimport { Texture } from \"../texture\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { GLCapabilityType } from \"../base/Constant\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\n\nenum DirtyFlagType {\n  Position = 0x1,\n  Velocity = 0x2,\n  Acceleration = 0x4,\n  Color = 0x8,\n  Alpha = 0x10,\n  Size = 0x20,\n  StartAngle = 0x40,\n  StartTime = 0x80,\n  LifeTime = 0x100,\n  RotateVelocity = 0x200,\n  Scale = 0x400,\n  Everything = 0xffffffff\n}\n\n/**\n * Blend mode enums of the particle renderer's material.\n */\nexport enum ParticleRendererBlendMode {\n  Transparent = 0,\n  Additive = 1\n}\n\n/**\n * Particle Renderer Component.\n */\nexport class ParticleRenderer extends MeshRenderer {\n  /** The max number of indices that Uint16Array can support. */\n  private static _uint16VertexLimit: number = 65535;\n\n  private static _getRandom(): number {\n    return Math.random() - 0.5;\n  }\n\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _maxCount: number = 1000;\n  private _position: Vector3 = new Vector3();\n  private _positionRandomness: Vector3 = new Vector3();\n  private _positionArray: Vector3[];\n  private _velocity: Vector3 = new Vector3();\n  private _velocityRandomness: Vector3 = new Vector3();\n  private _acceleration: Vector3 = new Vector3();\n  private _accelerationRandomness: Vector3 = new Vector3();\n  private _color: Color = new Color(1, 1, 1, 1);\n  private _colorRandomness: number = 0;\n  private _size: number = 1;\n  private _sizeRandomness: number = 0;\n  private _alpha: number = 1;\n  private _alphaRandomness: number = 0;\n  private _startAngle: number = 0;\n  private _startAngleRandomness: number = 0;\n  private _rotateVelocity: number = 0;\n  private _rotateVelocityRandomness: number = 0;\n  private _lifetime: number = 5;\n  private _startTimeRandomness: number = 0;\n  private _scale: number = 1;\n  private _isOnce: boolean = false;\n  private _onceTime: number = 0;\n  private _time: number = 0;\n  private _isInit: boolean = false;\n  private _isStart: boolean = false;\n  private _updateDirtyFlag: number = DirtyFlagType.Everything;\n  private _isRotateToVelocity: boolean = false;\n  private _isUseOriginColor: boolean = false;\n  private _isScaleByLifetime: boolean = false;\n  private _is2d: boolean = true;\n  private _isFadeIn: boolean = false;\n  private _isFadeOut: boolean = false;\n  private _playOnEnable: boolean = true;\n  private _blendMode: ParticleRendererBlendMode = ParticleRendererBlendMode.Transparent;\n\n  /**\n   * Sprite sheet of texture.\n   */\n  public spriteSheet: { x: number; y: number; w: number; h: number }[];\n\n  /**\n   * Texture of particle.\n   */\n  get texture(): Texture {\n    return this.getMaterial().shaderData.getTexture(\"u_texture\");\n  }\n\n  set texture(texture: Texture) {\n    if (texture) {\n      this.shaderData.enableMacro(\"particleTexture\");\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    } else {\n      this.shaderData.disableMacro(\"particleTexture\");\n    }\n  }\n\n  /**\n   * Position of particles.\n   */\n  get position(): Vector3 {\n    return this._position;\n  }\n\n  set position(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._position = value;\n  }\n\n  /**\n   * Random range of positions.\n   */\n  get positionRandomness(): Vector3 {\n    return this._positionRandomness;\n  }\n\n  set positionRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionRandomness = value;\n  }\n\n  /**\n   * Array of fixed positions.\n   */\n  get positionArray(): Vector3[] {\n    return this._positionArray;\n  }\n\n  set positionArray(value: Vector3[]) {\n    this._updateDirtyFlag |= DirtyFlagType.Position;\n    this._positionArray = value;\n  }\n\n  /**\n   * Velocity of particles.\n   */\n  get velocity(): Vector3 {\n    return this._velocity;\n  }\n\n  set velocity(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocity = value;\n  }\n\n  /**\n   * Random range of velocity.\n   */\n  get velocityRandomness(): Vector3 {\n    return this._velocityRandomness;\n  }\n\n  set velocityRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Velocity;\n    this._velocityRandomness = value;\n  }\n\n  /**\n   * Acceleration of particles.\n   */\n  get acceleration(): Vector3 {\n    return this._acceleration;\n  }\n\n  set acceleration(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._acceleration = value;\n  }\n\n  /**\n   * Random range of acceleration.\n   */\n  get accelerationRandomness(): Vector3 {\n    return this._accelerationRandomness;\n  }\n\n  set accelerationRandomness(value: Vector3) {\n    this._updateDirtyFlag |= DirtyFlagType.Acceleration;\n    this._accelerationRandomness = value;\n  }\n\n  /**\n   * Color of particles.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._color = value;\n  }\n\n  /**\n   * Random range of color.\n   */\n  get colorRandomness(): number {\n    return this._colorRandomness;\n  }\n\n  set colorRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Color;\n    this._colorRandomness = value;\n  }\n\n  /**\n   * Size of particles.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  set size(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._size = value;\n  }\n\n  /**\n   * Random range of size.\n   */\n  get sizeRandomness(): number {\n    return this._sizeRandomness;\n  }\n\n  set sizeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Size;\n    this._sizeRandomness = value;\n  }\n\n  /**\n   * Alpha of particles.\n   */\n  get alpha(): number {\n    return this._alpha;\n  }\n\n  set alpha(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alpha = value;\n  }\n\n  /**\n   * Random range of alpha.\n   */\n  get alphaRandomness(): number {\n    return this._alphaRandomness;\n  }\n\n  set alphaRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Alpha;\n    this._alphaRandomness = value;\n  }\n\n  /**\n   * Angle of particles.\n   */\n  get angle(): number {\n    return this._startAngle;\n  }\n\n  set angle(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngle = value;\n  }\n\n  /**\n   * Random range of angle.\n   */\n  get angleRandomness(): number {\n    return this._startAngleRandomness;\n  }\n\n  set angleRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartAngle;\n    this._startAngleRandomness = value;\n  }\n\n  /**\n   * Rotate velocity of particles.\n   */\n  get rotateVelocity(): number {\n    return this._rotateVelocity;\n  }\n\n  set rotateVelocity(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocity = value;\n  }\n\n  /**\n   * Random range of rotate velocity.\n   */\n  get rotateVelocityRandomness(): number {\n    return this._rotateVelocityRandomness;\n  }\n\n  set rotateVelocityRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.RotateVelocity;\n    this._rotateVelocityRandomness = value;\n  }\n\n  /**\n   * Lifetime of particles.\n   */\n  get lifetime(): number {\n    return this._lifetime;\n  }\n\n  set lifetime(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.LifeTime;\n    this._lifetime = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Random range of start time.\n   */\n  get startTimeRandomness(): number {\n    return this._startTimeRandomness;\n  }\n\n  set startTimeRandomness(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.StartTime;\n    this._startTimeRandomness = value;\n    this._onceTime = 0;\n  }\n\n  /**\n   * Scale factor of particles.\n   */\n  get scale(): number {\n    return this._scale;\n  }\n\n  set scale(value: number) {\n    this._updateDirtyFlag |= DirtyFlagType.Scale;\n    this._scale = value;\n  }\n\n  /**\n   * Max count of particles.\n   */\n  get maxCount(): number {\n    return this._maxCount;\n  }\n\n  set maxCount(value: number) {\n    this._isStart = false;\n    this._isInit = false;\n    this._maxCount = value;\n    this._updateDirtyFlag = DirtyFlagType.Everything;\n    this.mesh = this._createMesh();\n\n    this._updateBuffer();\n\n    this._isInit = true;\n    this.shaderData.setFloat(\"u_time\", 0);\n  }\n\n  /**\n   * Whether play once.\n   */\n  get isOnce(): boolean {\n    return this._isOnce;\n  }\n\n  set isOnce(value: boolean) {\n    this._time = 0;\n    this.shaderData.setInt(\"u_once\", value ? 1 : 0);\n    this._isOnce = value;\n  }\n\n  /**\n   * Whether follow the direction of velocity.\n   */\n  get isRotateToVelocity(): boolean {\n    return this._isRotateToVelocity;\n  }\n\n  set isRotateToVelocity(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"rotateToVelocity\");\n    } else {\n      this.shaderData.disableMacro(\"rotateToVelocity\");\n    }\n\n    this._isRotateToVelocity = value;\n  }\n\n  /**\n   * Whether use origin color.\n   */\n  get isUseOriginColor(): boolean {\n    return this._isUseOriginColor;\n  }\n\n  set isUseOriginColor(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"useOriginColor\");\n    } else {\n      this.shaderData.disableMacro(\"useOriginColor\");\n    }\n\n    this._isUseOriginColor = value;\n  }\n\n  /**\n   * Whether scale by lifetime.\n   */\n  get isScaleByLifetime(): boolean {\n    return this._isScaleByLifetime;\n  }\n\n  set isScaleByLifetime(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"isScaleByLifetime\");\n    } else {\n      this.shaderData.disableMacro(\"isScaleByLifetime\");\n    }\n\n    this._isScaleByLifetime = value;\n  }\n\n  /**\n   * Whether 2D rendering.\n   */\n  get is2d(): boolean {\n    return this._is2d;\n  }\n\n  set is2d(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"is2d\");\n    } else {\n      this.shaderData.disableMacro(\"is2d\");\n      this.getMaterial().renderState.rasterState.cullMode = CullMode.Off;\n    }\n\n    this._is2d = value;\n  }\n\n  /**\n   * Whether fade in.\n   */\n  get isFadeIn(): boolean {\n    return this._isFadeIn;\n  }\n\n  set isFadeIn(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeIn\");\n    } else {\n      this.shaderData.disableMacro(\"fadeIn\");\n    }\n\n    this._isFadeIn = value;\n  }\n\n  /**\n   * Whether fade out.\n   */\n  get isFadeOut(): boolean {\n    return this._isFadeOut;\n  }\n\n  set isFadeOut(value: boolean) {\n    if (value) {\n      this.shaderData.enableMacro(\"fadeOut\");\n    } else {\n      this.shaderData.disableMacro(\"fadeOut\");\n    }\n\n    this._isFadeOut = value;\n  }\n\n  /**\n   * Whether play on enable.\n   */\n  get playOnEnable(): boolean {\n    return this._playOnEnable;\n  }\n\n  set playOnEnable(value: boolean) {\n    this._playOnEnable = value;\n\n    if (value) {\n      this.start();\n    } else {\n      this.stop();\n    }\n  }\n\n  /**\n   * Blend mode of the particle renderer's material.\n   */\n  get blendMode(): ParticleRendererBlendMode {\n    return this._blendMode;\n  }\n\n  set blendMode(value: ParticleRendererBlendMode) {\n    const blendState = this.getMaterial().renderState.blendState;\n    const target = blendState.targetBlendState;\n\n    if (value === ParticleRendererBlendMode.Transparent) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    } else if (value === ParticleRendererBlendMode.Additive) {\n      target.enabled = true;\n      target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n      target.destinationColorBlendFactor = BlendFactor.One;\n      target.sourceAlphaBlendFactor = BlendFactor.One;\n      target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    }\n\n    this._blendMode = value;\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.setMaterial(this._createMaterial());\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  update(deltaTime: number): void {\n    if (!this._isInit || !this._isStart) {\n      return;\n    }\n\n    // Stop after play once\n    if (this._isOnce && this._time > this._onceTime) {\n      return this.stop();\n    }\n\n    if (this._updateDirtyFlag) {\n      this._updateBuffer();\n      this._updateDirtyFlag = 0;\n    }\n\n    this._time += deltaTime / 1000;\n    this.shaderData.setFloat(\"u_time\", this._time);\n  }\n\n  /**\n   * @override\n   * @internal\n   */\n  _onEnable(): void {\n    super._onEnable();\n\n    if (this._playOnEnable) {\n      this.start();\n    }\n  }\n\n  /**\n   * Start emitting.\n   */\n  start(): void {\n    this._isStart = true;\n    this._time = 0;\n  }\n\n  /**\n   * Stop emitting.\n   */\n  stop(): void {\n    this._isStart = false;\n  }\n\n  private _createMaterial(): Material {\n    const material = new Material(this.engine, Shader.find(\"particle-shader\"));\n    const { renderState } = material;\n    const target = renderState.blendState.targetBlendState;\n\n    target.enabled = true;\n    target.sourceColorBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = BlendFactor.OneMinusSourceAlpha;\n    target.sourceAlphaBlendFactor = BlendFactor.One;\n    target.destinationAlphaBlendFactor = BlendFactor.OneMinusSourceAlpha;\n\n    renderState.depthState.writeEnabled = false;\n\n    material.renderQueueType = RenderQueueType.Transparent;\n\n    this.isUseOriginColor = true;\n    this.is2d = true;\n    this.isFadeOut = true;\n\n    return material;\n  }\n\n  private _createMesh(): BufferMesh {\n    const mesh = new BufferMesh(this._entity.engine, \"particleMesh\");\n    const vertexStride = 96;\n    const vertexCount = this._maxCount * 4;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    let indices: Uint16Array | Uint32Array = null;\n    let useUint32: boolean = false;\n    if (vertexCount > ParticleRenderer._uint16VertexLimit) {\n      if (this.engine._hardwareRenderer.canIUse(GLCapabilityType.elementIndexUint)) {\n        useUint32 = true;\n        indices = new Uint32Array(6 * this._maxCount);\n      } else {\n        throw Error(\"The vertex count is over limit.\");\n      }\n    } else {\n      indices = new Uint16Array(6 * this._maxCount);\n    }\n\n    for (let i = 0, idx = 0; i < this._maxCount; ++i) {\n      let startIndex = i * 4;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 1;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex;\n      indices[idx++] = startIndex + 2;\n      indices[idx++] = startIndex + 3;\n    }\n\n    const vertexElements = [\n      new VertexElement(\"a_position\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_velocity\", 12, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_acceleration\", 24, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_color\", 36, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_lifeAndSize\", 52, VertexElementFormat.Vector4, 0),\n      new VertexElement(\"a_rotation\", 68, VertexElementFormat.Vector2, 0),\n      new VertexElement(\"a_uv\", 76, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"a_normalizedUv\", 88, VertexElementFormat.Vector2, 0)\n    ];\n\n    const vertexBuffer = new Buffer(\n      this.engine,\n      BufferBindFlag.VertexBuffer,\n      vertexFloatCount * 4,\n      BufferUsage.Dynamic\n    );\n\n    const indexBuffer = new Buffer(this.engine, BufferBindFlag.IndexBuffer, indices, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setIndexBufferBinding(indexBuffer, useUint32 ? IndexFormat.UInt32 : IndexFormat.UInt16);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, indices.length);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride / 4;\n    this._vertices = vertices;\n    return mesh;\n  }\n\n  private _updateBuffer(): void {\n    for (let x = 0; x < this._maxCount; x++) {\n      this._updateSingleBuffer(x);\n    }\n\n    this._vertexBuffer.setData(this._vertices);\n  }\n\n  private _updateSingleBuffer(i: number): void {\n    const { _updateDirtyFlag, _vertices: vertices, _vertexStride: vertexStride } = this;\n    const { _getRandom: getRandom } = ParticleRenderer;\n    const offset = i * 4;\n\n    const k0 = offset * vertexStride;\n    const k1 = (offset + 1) * vertexStride;\n    const k2 = (offset + 2) * vertexStride;\n    const k3 = (offset + 3) * vertexStride;\n\n    if (_updateDirtyFlag & DirtyFlagType.Position) {\n      let { x, y, z } = this._position;\n      const { _positionArray, _positionRandomness } = this;\n\n      if (_positionArray) {\n        if (_positionArray.length !== this._maxCount) {\n          throw Error(\"The length of positionArray must be equal to maxCount.\");\n        }\n        const pos = _positionArray[i];\n\n        x += pos.x;\n        y += pos.y;\n        z += pos.z;\n      } else {\n        x += getRandom() * _positionRandomness.x;\n        y += getRandom() * _positionRandomness.y;\n        z += getRandom() * _positionRandomness.z;\n      }\n\n      vertices[k0] = vertices[k1] = vertices[k2] = vertices[k3] = x;\n      vertices[k0 + 1] = vertices[k1 + 1] = vertices[k2 + 1] = vertices[k3 + 1] = y;\n      vertices[k0 + 2] = vertices[k1 + 2] = vertices[k2 + 2] = vertices[k3 + 2] = z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Velocity) {\n      const { _velocity, _velocityRandomness } = this;\n\n      vertices[k0 + 3] =\n        vertices[k1 + 3] =\n        vertices[k2 + 3] =\n        vertices[k3 + 3] =\n          _velocity.x + getRandom() * _velocityRandomness.x;\n      vertices[k0 + 4] =\n        vertices[k1 + 4] =\n        vertices[k2 + 4] =\n        vertices[k3 + 4] =\n          _velocity.y + getRandom() * _velocityRandomness.y;\n      vertices[k0 + 5] =\n        vertices[k1 + 5] =\n        vertices[k2 + 5] =\n        vertices[k3 + 5] =\n          _velocity.z + getRandom() * _velocityRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Acceleration) {\n      const { _acceleration, _accelerationRandomness } = this;\n\n      vertices[k0 + 6] =\n        vertices[k1 + 6] =\n        vertices[k2 + 6] =\n        vertices[k3 + 6] =\n          _acceleration.x + getRandom() * _accelerationRandomness.x;\n      vertices[k0 + 7] =\n        vertices[k1 + 7] =\n        vertices[k2 + 7] =\n        vertices[k3 + 7] =\n          _acceleration.y + getRandom() * _accelerationRandomness.y;\n      vertices[k0 + 8] =\n        vertices[k1 + 8] =\n        vertices[k2 + 8] =\n        vertices[k3 + 8] =\n          _acceleration.z + getRandom() * _accelerationRandomness.z;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Color) {\n      const { _color, _colorRandomness } = this;\n\n      vertices[k0 + 9] =\n        vertices[k1 + 9] =\n        vertices[k2 + 9] =\n        vertices[k3 + 9] =\n          MathUtil.clamp(_color.r + getRandom() * _colorRandomness, 0, 1);\n\n      vertices[k0 + 10] =\n        vertices[k1 + 10] =\n        vertices[k2 + 10] =\n        vertices[k3 + 10] =\n          MathUtil.clamp(_color.g + getRandom() * _colorRandomness, 0, 1);\n      vertices[k0 + 11] =\n        vertices[k1 + 11] =\n        vertices[k2 + 11] =\n        vertices[k3 + 11] =\n          MathUtil.clamp(_color.b + getRandom() * _colorRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Alpha) {\n      vertices[k0 + 12] =\n        vertices[k1 + 12] =\n        vertices[k2 + 12] =\n        vertices[k3 + 12] =\n          MathUtil.clamp(this._alpha + getRandom() * this._alphaRandomness, 0, 1);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartTime) {\n      vertices[k0 + 13] =\n        vertices[k1 + 13] =\n        vertices[k2 + 13] =\n        vertices[k3 + 13] =\n          Math.random() * this._startTimeRandomness;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.LifeTime) {\n      const { _lifetime } = this;\n\n      vertices[k0 + 14] =\n        vertices[k1 + 14] =\n        vertices[k2 + 14] =\n        vertices[k3 + 14] =\n          _lifetime + getRandom() * _lifetime;\n    }\n\n    // Update the duration of play once when startTime or lifetime changes.\n    if (_updateDirtyFlag & DirtyFlagType.StartTime || _updateDirtyFlag & DirtyFlagType.LifeTime) {\n      this._onceTime = Math.max(this._onceTime, vertices[k0 + 13] + vertices[k0 + 14]);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Size) {\n      const { _size } = this;\n\n      vertices[k0 + 15] =\n        vertices[k1 + 15] =\n        vertices[k2 + 15] =\n        vertices[k3 + 15] =\n          Math.max(_size + getRandom() * this._sizeRandomness * _size * 2, 0);\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.Scale) {\n      vertices[k0 + 16] = vertices[k1 + 16] = vertices[k2 + 16] = vertices[k3 + 16] = this._scale;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.StartAngle) {\n      vertices[k0 + 17] =\n        vertices[k1 + 17] =\n        vertices[k2 + 17] =\n        vertices[k3 + 17] =\n          this._startAngle + getRandom() * Math.PI * this._startAngleRandomness * 2;\n    }\n\n    if (_updateDirtyFlag & DirtyFlagType.RotateVelocity) {\n      vertices[k0 + 18] =\n        vertices[k1 + 18] =\n        vertices[k2 + 18] =\n        vertices[k3 + 18] =\n          this._rotateVelocity + getRandom() * this._rotateVelocityRandomness;\n    }\n\n    this._updateSingleUv(i, k0, k1, k2, k3);\n  }\n\n  private _updateSingleUv(i: number, k0: number, k1: number, k2: number, k3: number): void {\n    const { spriteSheet } = this;\n    const texture = this.getMaterial().shaderData.getTexture(\"u_texture\");\n    const vertices = this._vertices;\n\n    if (texture) {\n      const width = texture.width;\n      const height = texture.height;\n\n      if (spriteSheet) {\n        const { x, y, w, h } = spriteSheet[i % spriteSheet.length];\n\n        const u = x / width;\n        const v = y / height;\n        const p = u + w / width;\n        const q = v + h / height;\n        const ratio = h / w;\n\n        // left bottom\n        vertices[k0 + 19] = u;\n        vertices[k0 + 20] = q;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = p;\n        vertices[k1 + 20] = q;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = p;\n        vertices[k2 + 20] = v;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = u;\n        vertices[k3 + 20] = v;\n        vertices[k3 + 21] = ratio;\n      } else {\n        const ratio = height / width;\n\n        // left bottom\n        vertices[k0 + 19] = 0;\n        vertices[k0 + 20] = 1;\n        vertices[k0 + 21] = ratio;\n\n        // right bottom\n        vertices[k1 + 19] = 1;\n        vertices[k1 + 20] = 1;\n        vertices[k1 + 21] = ratio;\n\n        // right top\n        vertices[k2 + 19] = 1;\n        vertices[k2 + 20] = 0;\n        vertices[k2 + 21] = ratio;\n\n        // left top\n        vertices[k3 + 19] = 0;\n        vertices[k3 + 20] = 0;\n        vertices[k3 + 21] = ratio;\n      }\n    } else {\n      // left bottom\n      vertices[k0 + 19] = 0;\n      vertices[k0 + 20] = 0;\n      vertices[k0 + 21] = 1;\n\n      // right bottom\n      vertices[k1 + 19] = 1;\n      vertices[k1 + 20] = 0;\n      vertices[k1 + 21] = 1;\n\n      // right top\n      vertices[k2 + 19] = 1;\n      vertices[k2 + 20] = 1;\n      vertices[k2 + 21] = 1;\n\n      // left top\n      vertices[k3 + 19] = 0;\n      vertices[k3 + 20] = 1;\n      vertices[k3 + 21] = 1;\n    }\n\n    vertices[k0 + 22] = -0.5;\n    vertices[k0 + 23] = -0.5;\n    vertices[k1 + 22] = 0.5;\n    vertices[k1 + 23] = -0.5;\n    vertices[k2 + 22] = 0.5;\n    vertices[k2 + 23] = 0.5;\n    vertices[k3 + 22] = -0.5;\n    vertices[k3 + 23] = 0.5;\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor, Shader } from \"../shader\";\nimport FRAG_SHADER from \"./trail.fs.glsl\";\nimport VERT_SHADER from \"./trail.vs.glsl\";\n\nShader.create(\"trail\", VERT_SHADER, FRAG_SHADER);\n\nexport class TrailMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"trail\"));\n\n    const target = this.renderState.blendState.targetBlendState;\n    target.enabled = true;\n    target.sourceColorBlendFactor = target.sourceAlphaBlendFactor = BlendFactor.SourceAlpha;\n    target.destinationColorBlendFactor = target.destinationAlphaBlendFactor = BlendFactor.One;\n\n    this.renderState.depthState.writeEnabled = false;\n  }\n}\n","import { Matrix, Quaternion, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Entity } from \"../Entity\";\nimport { Buffer } from \"../graphic/Buffer\";\nimport { BufferUsage } from \"../graphic/enums/BufferUsage\";\nimport { MeshTopology } from \"../graphic/enums/MeshTopology\";\nimport { VertexElementFormat } from \"../graphic/enums/VertexElementFormat\";\nimport { VertexElement } from \"../graphic/VertexElement\";\nimport { BufferMesh } from \"../mesh/BufferMesh\";\nimport { MeshRenderer } from \"../mesh/MeshRenderer\";\nimport { Texture2D } from \"../texture\";\nimport { TrailMaterial } from \"./TrailMaterial\";\n\nconst _tempVector3 = new Vector3();\n\n/**\n * @deprecated\n */\nexport class TrailRenderer extends MeshRenderer {\n  private _vertexStride: number;\n  private _vertices: Float32Array;\n  private _vertexBuffer: Buffer;\n  private _stroke;\n  private _minSeg;\n  private _lifetime;\n  private _maxPointNum;\n  private _points: Array<Vector3>;\n  private _pointStates: Array<number>;\n  private _strapPoints: Array<Vector3>;\n  private _curPointNum;\n  private _prePointsNum;\n  /**\n   * @deprecated\n   */\n  constructor(entity: Entity, props: any) {\n    super(entity);\n\n    this._stroke = props.stroke || 0.2;\n    this._minSeg = props.minSeg || 0.02;\n    this._lifetime = props.lifetime || 1000;\n    this._maxPointNum = (this._lifetime / 1000.0) * entity.engine.targetFrameRate;\n\n    this._points = [];\n    this._pointStates = [];\n    this._strapPoints = [];\n    for (let i = 0; i < this._maxPointNum; i++) {\n      this._points.push(new Vector3());\n      this._pointStates.push(this._lifetime);\n\n      this._strapPoints.push(new Vector3());\n      this._strapPoints.push(new Vector3());\n    }\n    this._curPointNum = 0;\n\n    const mtl = props.material || new TrailMaterial(this.engine);\n    this.setMaterial(mtl);\n\n    this.setTexture(props.texture);\n    this._initGeometry();\n  }\n\n  /**\n   * @internal\n   */\n  update(deltaTime: number) {\n    let mov = 0,\n      newIdx = 0;\n    for (let i = 0; i < this._curPointNum; i++) {\n      this._pointStates[i] -= deltaTime;\n      if (this._pointStates[i] < 0) {\n        mov++;\n      } else if (mov > 0) {\n        newIdx = i - mov;\n\n        // Move data\n        this._pointStates[newIdx] = this._pointStates[i];\n\n        // Move point\n        this._points[i].cloneTo(this._points[newIdx]);\n      }\n    }\n    this._curPointNum -= mov;\n\n    let appendNewPoint = true;\n    if (this._curPointNum === this._maxPointNum) {\n      appendNewPoint = false;\n    } else if (this._curPointNum > 0) {\n      const lastPoint = this._points[this._points.length - 1];\n      if (Vector3.distance(this.entity.worldPosition, lastPoint) < this._minSeg) {\n        appendNewPoint = false;\n      } else {\n        // debugger\n      }\n    }\n\n    if (appendNewPoint) {\n      this._pointStates[this._curPointNum] = this._lifetime;\n      this.entity.worldPosition.cloneTo(this._points[this._curPointNum]);\n\n      this._curPointNum++;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _render(camera: Camera): void {\n    this._updateStrapVertices(camera, this._points);\n    this._updateStrapCoords();\n    this._vertexBuffer.setData(this._vertices);\n\n    super._render(camera);\n  }\n\n  /**\n   * @deprecated\n   * Set trail texture.\n   * @param texture\n   */\n  setTexture(texture: Texture2D) {\n    if (texture) {\n      this.getMaterial().shaderData.setTexture(\"u_texture\", texture);\n    }\n  }\n\n  private _initGeometry() {\n    const mesh = new BufferMesh(this._entity.engine);\n\n    const vertexStride = 20;\n    const vertexCount = this._maxPointNum * 2;\n    const vertexFloatCount = vertexCount * vertexStride;\n    const vertices = new Float32Array(vertexFloatCount);\n    const vertexElements = [\n      new VertexElement(\"POSITION\", 0, VertexElementFormat.Vector3, 0),\n      new VertexElement(\"TEXCOORD_0\", 12, VertexElementFormat.Vector2, 0)\n    ];\n    const vertexBuffer = new Buffer(this.engine, vertexFloatCount * 4, BufferUsage.Dynamic);\n\n    mesh.setVertexBufferBinding(vertexBuffer, vertexStride);\n    mesh.setVertexElements(vertexElements);\n    mesh.addSubMesh(0, vertexCount, MeshTopology.TriangleStrip);\n\n    this._vertexBuffer = vertexBuffer;\n    this._vertexStride = vertexStride;\n    this._vertices = vertices;\n    this.mesh = mesh;\n  }\n\n  private _updateStrapVertices(camera, points: Array<Vector3>) {\n    const m: Matrix = camera.viewMatrix;\n    const e = m.elements;\n    const vx = new Vector3(e[0], e[4], e[8]);\n    const vy = new Vector3(e[1], e[5], e[9]);\n    const vz = new Vector3(e[2], e[6], e[10]);\n    const s = this._stroke;\n\n    vy.scale(s);\n\n    const up = new Vector3();\n    const down = new Vector3();\n\n    const rotation = new Quaternion();\n\n    Vector3.transformByQuat(vx, rotation, vx);\n    Vector3.transformByQuat(vy, rotation, vy);\n\n    const dy = new Vector3();\n    const cross = new Vector3();\n    const perpVector = new Vector3();\n\n    vx.normalize();\n\n    const vertices = this._vertices;\n    //-- quad pos\n    for (let i = 0; i < this._maxPointNum; i++) {\n      //-- center pos\n      if (i < this._curPointNum) {\n        const p = points[i];\n\n        if (i === this._curPointNum - 1 && i !== 0) {\n          Vector3.subtract(p, points[i - 1], perpVector);\n        } else {\n          Vector3.subtract(points[i + 1], p, perpVector);\n        }\n\n        this._projectOnPlane(perpVector, vz, perpVector);\n        perpVector.normalize();\n\n        // Calculate angle between vectors\n        let angle = Math.acos(Vector3.dot(vx, perpVector));\n        Vector3.cross(vx, perpVector, cross);\n        if (Vector3.dot(cross, vz) <= 0) {\n          angle = Math.PI * 2 - angle;\n        }\n        Quaternion.rotationAxisAngle(vz, angle, rotation);\n        Vector3.transformByQuat(vy, rotation, dy);\n\n        Vector3.add(p, dy, up);\n        Vector3.subtract(p, dy, down);\n      }\n\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n      vertices[p0] = up.x;\n      vertices[p0 + 1] = up.y;\n      vertices[p0 + 2] = up.z;\n\n      vertices[p1] = down.x;\n      vertices[p1 + 1] = down.y;\n      vertices[p1 + 2] = down.z;\n    }\n  }\n\n  private _updateStrapCoords() {\n    if (this._prePointsNum === this._curPointNum) {\n      return;\n    }\n\n    this._prePointsNum = this._curPointNum;\n\n    const count = this._curPointNum;\n    const texDelta = 1.0 / count;\n    const vertices = this._vertices;\n    for (let i = 0; i < count; i++) {\n      const d = 1.0 - i * texDelta;\n      const p0 = (i * 2 * this._vertexStride) / 4;\n      const p1 = ((i * 2 + 1) * this._vertexStride) / 4;\n\n      vertices[p0] = 0;\n      vertices[p0 + 1] = d;\n\n      vertices[p1] = 1.0;\n      vertices[p1 + 1] = d;\n    }\n  }\n\n  private _projectOnVector(a: Vector3, p: Vector3, out: Vector3): void {\n    const n_p = p.clone();\n    Vector3.normalize(n_p, n_p);\n    const cosine = Vector3.dot(a, n_p);\n    out.x = n_p.x * cosine;\n    out.y = n_p.y * cosine;\n    out.z = n_p.z * cosine;\n  }\n\n  private _projectOnPlane(a: Vector3, n: Vector3, out: Vector3) {\n    this._projectOnVector(a, n, _tempVector3);\n    Vector3.subtract(a, _tempVector3, out);\n  }\n}\n","import { Vector3 } from \"@oasis-engine/math\";\n\n/**\n * AABBox = {\n *  min: [-1,-1,-1],\n *  max: [1,1,1]\n * };\n *\n * Sphere = {\n *  center: [0,0,0],\n *  radius: 1\n * };\n */\n\n/**\n * Check whether the boxes intersect.\n * @param boxA - The first box to check\n * @param boxB - The second box to check\n * @returns True if the boxes intersect, false otherwise\n */\nexport function intersectBox2Box(boxA, boxB) {\n  return (\n    boxA.min.x <= boxB.max.x &&\n    boxA.max.x >= boxB.min.x &&\n    boxA.min.y <= boxB.max.y &&\n    boxA.max.y >= boxB.min.y &&\n    boxA.min.z <= boxB.max.z &&\n    boxA.max.z >= boxB.min.z\n  );\n}\n\n/**\n * Check whether the spheres intersect.\n * @param sphereA - The first sphere to check\n * @param sphereB - The second sphere to check\n * @returns True if the spheres intersect, false otherwise\n */\nexport function intersectSphere2Sphere(sphereA, sphereB) {\n  const distance = Vector3.distance(sphereA.center, sphereB.center);\n  return distance < sphereA.radius + sphereA.radius;\n}\n\n/**\n * Check whether the sphere and the box intersect.\n * @param sphere - The sphere to check\n * @param box - The box to check\n * @returns True if the sphere and the box intersect, false otherwise\n */\nexport function intersectSphere2Box(sphere, box) {\n  const center: Vector3 = sphere.center;\n\n  const closestPoint: Vector3 = new Vector3(\n    Math.max(box.min.x, Math.min(center.x, box.max.x)),\n    Math.max(box.min.y, Math.min(center.y, box.max.y)),\n    Math.max(box.min.z, Math.min(center.z, box.max.z))\n  );\n\n  const distance = Vector3.distance(center, closestPoint);\n  return distance < sphere.radius;\n}\n","import { BoundingBox, Vector3 } from \"@oasis-engine/math\";\nimport { ACollider, ABoxCollider, ASphereCollider, ColliderFeature } from \"../collider\";\nimport { Script } from \"../Script\";\nimport { intersectBox2Box, intersectSphere2Box, intersectSphere2Sphere } from \"./intersect\";\n\n/**\n * Detect collisions between the Collider on the current entity and other Colliders in the scene.\n */\nexport class CollisionDetection extends Script {\n  private static _tempBox1: BoundingBox = new BoundingBox();\n  private static _tempBox2: BoundingBox = new BoundingBox();\n\n  private _colliderManager;\n  private _myCollider;\n  private _overlappedCollider;\n  private _sphere;\n  private _box: BoundingBox = new BoundingBox();\n\n  /**\n   * Constructor of the collision detection.\n   * @param entity - Entity to which the collision detection belong\n   */\n  constructor(entity) {\n    super(entity);\n  }\n\n  /**\n   * The collider that intersects with the collider on the current Entity.\n   */\n  get overlappedCollider() {\n    return this._overlappedCollider;\n  }\n\n  /**\n   * When every frame is updated, calculate the collision with other collider.\n   */\n  onUpdate(deltaTime) {\n    super.onUpdate(deltaTime);\n\n    let overlappedCollider = null;\n\n    if (this._colliderManager && this._myCollider) {\n      const colliders = this._colliderManager.colliders;\n\n      if (this._myCollider instanceof ABoxCollider) {\n        this._updateWorldBox(this._myCollider, this._box);\n        for (let i = 0, len = colliders.length; i < len; i++) {\n          const collider = colliders[i];\n          if (collider != this._myCollider && this._boxCollision(collider)) {\n            overlappedCollider = collider;\n            let scripts = this.entity._scripts;\n            for (let i = 0, len = scripts.length; i < len; i++) {\n              scripts.get(i).onTriggerStay(collider);\n            }\n          }\n        } // end of for\n      } else if (this._myCollider instanceof ASphereCollider) {\n        this._sphere = this._getWorldSphere(this._myCollider);\n        for (let i = 0, len = colliders.length; i < len; i++) {\n          const collider = colliders[i];\n          if (collider != this._myCollider && this._sphereCollision(collider)) {\n            overlappedCollider = collider;\n            let scripts = this.entity._scripts;\n            for (let i = 0, len = scripts.length; i < len; i++) {\n              scripts.get(i).onTriggerStay(collider);\n            }\n          }\n        } // end of for\n      }\n    } // end of if\n\n    //-- overlap events\n    if (overlappedCollider != null && this._overlappedCollider != overlappedCollider) {\n      let scripts = this.entity._scripts;\n      for (let i = 0, len = scripts.length; i < len; i++) {\n        scripts.get(i).onTriggerEnter(overlappedCollider);\n      }\n    }\n\n    if (this._overlappedCollider != null && this._overlappedCollider != overlappedCollider) {\n      let scripts = this.entity._scripts;\n      for (let i = 0, len = scripts.length; i < len; i++) {\n        scripts.get(i).onTriggerExit(this._overlappedCollider);\n      }\n    }\n\n    this._overlappedCollider = overlappedCollider;\n  }\n\n  /**\n   * Calculate the boundingbox in world space from boxCollider.\n   * @param boxCollider - The boxCollider to calculate\n   * @param out - The calculated boundingBox\n   */\n  _updateWorldBox(boxCollider, out: BoundingBox): void {\n    const mat = boxCollider.entity.transform.worldMatrix;\n    const source = CollisionDetection._tempBox1;\n    boxCollider.boxMax.cloneTo(source.max);\n    boxCollider.boxMin.cloneTo(source.min);\n    BoundingBox.transform(source, mat, out);\n  }\n\n  /**\n   * Get the sphere info of the given sphere collider in world space.\n   * @param sphereCollider - The given sphere collider\n   */\n  _getWorldSphere(sphereCollider) {\n    const center: Vector3 = new Vector3();\n    Vector3.transformCoordinate(sphereCollider.center, sphereCollider.entity.transform.worldMatrix, center);\n    return {\n      radius: sphereCollider.radius,\n      center\n    };\n  }\n\n  /**\n   * Collider and another collider do collision detection.\n   * @param other - The another collider to collision detection\n   */\n  _boxCollision(other) {\n    if (other instanceof ABoxCollider) {\n      const box = CollisionDetection._tempBox2;\n      this._updateWorldBox(other, box);\n      return intersectBox2Box(box, this._box);\n    } else if (other instanceof ASphereCollider) {\n      const sphere = this._getWorldSphere(other);\n      return intersectSphere2Box(sphere, this._box);\n    }\n    return false;\n  }\n\n  /**\n   * Collider and another collider do collision detection.\n   * @param other - The another collider to collision detection\n   */\n  _sphereCollision(other) {\n    if (other instanceof ABoxCollider) {\n      const box = CollisionDetection._tempBox2;\n      this._updateWorldBox(other, box);\n      return intersectSphere2Box(this._sphere, box);\n    } else if (other instanceof ASphereCollider) {\n      const sphere = this._getWorldSphere(other);\n      return intersectSphere2Sphere(sphere, this._sphere);\n    }\n    return false;\n  }\n\n  onAwake() {\n    this._colliderManager = this.scene.findFeature(ColliderFeature);\n    this._myCollider = this.entity.getComponent(ACollider);\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Component } from \"../Component\";\nimport { Entity } from \"../Entity\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Fog.\n */\nexport class Fog extends Component {\n  protected static _colorProperty = Shader.getPropertyByName(\"u_fogColor\");\n\n  /**\n   * Fog color.\n   */\n  get color(): Color {\n    return this._color;\n  }\n\n  set color(value: Color) {\n    this._color = value;\n    this.scene.shaderData.setColor(Fog._colorProperty, value);\n  }\n\n  private _color: Color = new Color(1, 0, 0, 1);\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.color = this._color;\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_HAS_FOG\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_HAS_FOG\");\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Exponential fog.\n */\nexport class EXP2Fog extends Fog {\n  private static _densityProperty = Shader.getPropertyByName(\"u_fogDensity\");\n\n  /**\n   * Density of fog.\n   */\n  get density(): number {\n    return this._density;\n  }\n\n  set density(value: number) {\n    this._density = value;\n    this.scene.shaderData.setFloat(EXP2Fog._densityProperty, value);\n  }\n\n  private _density: number = 0.0025;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.density = this._density;\n  }\n  /**\n   * @internal\n   * @override\n   */\n  _onEnable() {\n    this.scene.shaderData.enableMacro(\"O3_FOG_EXP2\");\n  }\n\n  /**\n   * @internal\n   * @override\n   */\n  _onDisable() {\n    this.scene.shaderData.disableMacro(\"O3_FOG_EXP2\");\n  }\n}\n","import { Entity } from \"../Entity\";\nimport { Shader } from \"../shader\";\nimport { Fog } from \"./Fog\";\n\n/**\n * Linear fog, according to the distance of the camera linear difference fog density.\n */\nexport class LinearFog extends Fog {\n  private static _nearProperty = Shader.getPropertyByName(\"u_fogNear\");\n  private static _farProperty = Shader.getPropertyByName(\"u_fogFar\");\n\n  /**\n   * Start of fog.\n   */\n  get near(): number {\n    return this._near;\n  }\n\n  set near(value: number) {\n    this._near = value;\n    this.scene.shaderData.setFloat(LinearFog._nearProperty, value);\n  }\n\n  /**\n   * End of fog.\n   */\n  get far(): number {\n    return this._far;\n  }\n\n  set far(value: number) {\n    this._far = value;\n    this.scene.shaderData.setFloat(LinearFog._farProperty, value);\n  }\n\n  private _near: number = 1;\n  private _far: number = 1000;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.near = this._near;\n    this.far = this._far;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Script } from \"../Script\";\nimport { RenderBufferDepthFormat } from \"../texture/enums/RenderBufferDepthFormat\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Environmental probes, providing necessary capabilities such as reflection and refraction.\n * @example\n * ```ts\n * const probe = cameraEntity.addComponent( CubeProbe )\n * probe.onTextureChange = cubeTexture => {\n *   envLight.specularTexture = cubeTexture;\n *   skybox.specularTexture = cubeTexture;\n * }\n * ```\n */\nexport abstract class Probe extends Script {\n  /**\n   * Probe's layer, render everything by default.\n   */\n  probeLayer: Layer = Layer.Everything;\n\n  /**\n   * The width of the probe rendering target.\n   */\n  width: number = 1024;\n\n  /**\n   * The height of the probe rendering target.\n   */\n  height: number = 1024;\n\n  /**\n   * When using WebGL2, you can turn on MSAA at the hardware layer.\n   */\n  antiAliasing: number = 1;\n\n  /**\n   * Whether the probe is rendered to the cube color texture.\n   */\n  protected readonly _isCube: boolean = false;\n\n  private _oriCameraRenderTarget: RenderTarget;\n  private _renderTarget: RenderTarget;\n  private _renderTargetSwap: RenderTarget;\n  private _activeRenderTarget: RenderTarget;\n  private _camera: Camera;\n  private _oriCameraCullingMask: Layer;\n\n  private get _texture(): RenderColorTexture {\n    return this._activeRenderTarget?.getColorTexture();\n  }\n\n  /**\n   * Provide hooks for users to exchange Texture.\n   * @remarks Prevent issue: Feedback Loops Between Textures and the Framebuffer.\n   */\n  onTextureChange(renderColorTexture: RenderColorTexture) {}\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    this._camera = camera;\n    this._oriCameraCullingMask = camera.cullingMask;\n    camera.cullingMask = this.probeLayer;\n    if (\n      !this._activeRenderTarget ||\n      this._activeRenderTarget.width !== this.width ||\n      this._activeRenderTarget.height !== this.height ||\n      this._activeRenderTarget.antiAliasing !== this.antiAliasing\n    ) {\n      this._renderTarget = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        new RenderColorTexture(this.engine, this.width, this.height, undefined, undefined, this._isCube),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._renderTargetSwap = new RenderTarget(\n        this.engine,\n        this.width,\n        this.height,\n        new RenderColorTexture(this.engine, this.width, this.height, undefined, undefined, this._isCube),\n        RenderBufferDepthFormat.Depth,\n        this.antiAliasing\n      );\n\n      this._activeRenderTarget = this._renderTarget;\n    }\n\n    this._oriCameraRenderTarget = camera.renderTarget;\n    camera.renderTarget = this._activeRenderTarget;\n  }\n\n  /**\n   * @override\n   */\n  onEndRender(camera: Camera): void {\n    if (!this.enabled) return;\n\n    this.onTextureChange && this.onTextureChange(this._texture);\n\n    this._activeRenderTarget =\n      this._activeRenderTarget === this._renderTarget ? this._renderTargetSwap : this._renderTarget;\n  }\n\n  protected _reset(): void {\n    if (!this.enabled) return;\n    this._camera.renderTarget = this._oriCameraRenderTarget;\n    this._camera.cullingMask = this._oriCameraCullingMask;\n  }\n}\n","import { Matrix, Vector3 } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { TextureCubeFace } from \"../texture\";\nimport { Probe } from \"./Probe\";\n\nconst cacheTarget: Vector3 = new Vector3();\nconst cacheUp: Vector3 = new Vector3();\nconst cacheDir: Vector3 = new Vector3();\n\n/**\n * Cube probe, generate cubeTexture, used for dynamic environment reflection and other effects.\n */\nexport class CubeProbe extends Probe {\n  /**\n   * The position of the probe can be set, the default is the origin [0,0,0].\n   */\n  position: Vector3 = new Vector3(0, 0, 0);\n\n  /**\n   * @override\n   */\n  protected readonly _isCube: boolean = true;\n\n  private oriViewMatrix = new Matrix();\n  private _oriFieldOfView: number;\n\n  /**\n   * @override\n   */\n  onBeginRender(camera: Camera): void {\n    if (!this.enabled) return;\n    super.onBeginRender(camera);\n    this._storeCamera(camera);\n\n    // Render 6 faces\n    for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n      // Change camera parameters\n      this._setCamera(faceIndex, camera);\n      camera.render(TextureCubeFace.PositiveX + faceIndex);\n    }\n\n    this._restoreCamera(camera);\n    super._reset();\n  }\n\n  /**\n   * Store original camera parameters.\n   */\n  private _storeCamera(camera: Camera) {\n    camera.viewMatrix.cloneTo(this.oriViewMatrix);\n    this._oriFieldOfView = camera.fieldOfView;\n  }\n\n  /**\n   * Restore camera parameters.\n   */\n  private _restoreCamera(camera: Camera) {\n    this.oriViewMatrix.cloneTo(camera.viewMatrix);\n    camera.fieldOfView = this._oriFieldOfView;\n  }\n\n  /**\n   * Set camera parameters according to the rendering surface.\n   */\n  private _setCamera(faceIndex: number, camera: Camera) {\n    switch (faceIndex) {\n      // positive_x\n      case 0:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(1, 0, 0);\n        break;\n      // negative_x\n      case 1:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(-1, 0, 0);\n        break;\n      // positive_y\n      case 2:\n        cacheUp.setValue(0, 0, 1);\n        cacheDir.setValue(0, 1, 0);\n        break;\n      // negative_y\n      case 3:\n        cacheUp.setValue(0, 0, -1);\n        cacheDir.setValue(0, -1, 0);\n        break;\n      // positive_z\n      case 4:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, 1);\n        break;\n      // negative_z\n      case 5:\n        cacheUp.setValue(0, -1, 0);\n        cacheDir.setValue(0, 0, -1);\n        break;\n    }\n\n    Vector3.add(this.position, cacheDir, cacheTarget);\n    Matrix.lookAt(this.position, cacheTarget, cacheUp, camera.viewMatrix);\n    camera.fieldOfView = 90;\n  }\n}\n","import { MathUtil, Matrix, Vector2 } from \"@oasis-engine/math\";\nimport { DirectLight } from \"../lighting/DirectLight\";\nimport { Light } from \"../lighting/Light\";\nimport { PointLight } from \"../lighting/PointLight\";\nimport { SpotLight } from \"../lighting/SpotLight\";\nimport { Shader } from \"../shader/Shader\";\nimport { ShaderData } from \"../shader/ShaderData\";\nimport { RenderColorTexture } from \"../texture/RenderColorTexture\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * Shadow manager.\n */\nexport class LightShadow {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n  private static _shadowBiasProperty = Shader.getPropertyByName(\"u_shadowBias\");\n  private static _shadowIntensityProperty = Shader.getPropertyByName(\"u_shadowIntensity\");\n  private static _shadowRadiusProperty = Shader.getPropertyByName(\"u_shadowRadius\");\n  private static _shadowMapSizeProperty = Shader.getPropertyByName(\"u_shadowMapSize\");\n  private static _shadowMapsProperty = Shader.getPropertyByName(\"u_shadowMaps\");\n\n  /**\n   * @internal\n   */\n  static _updateShaderData(shaderData: ShaderData) {\n    const data = LightShadow._combinedData;\n\n    shaderData.setFloatArray(LightShadow._viewMatFromLightProperty, data.viewMatrix);\n    shaderData.setFloatArray(LightShadow._projMatFromLightProperty, data.projectionMatrix);\n    shaderData.setFloatArray(LightShadow._shadowBiasProperty, data.bias);\n    shaderData.setFloatArray(LightShadow._shadowIntensityProperty, data.intensity);\n    shaderData.setFloatArray(LightShadow._shadowRadiusProperty, data.radius);\n    shaderData.setFloatArray(LightShadow._shadowMapSizeProperty, data.mapSize);\n    shaderData.setTextureArray(LightShadow._shadowMapsProperty, data.map);\n  }\n\n  /**\n   * Clear all shadow maps.\n   */\n  static clearMap() {\n    LightShadow._combinedData.map.length = 0;\n  }\n\n  private static _maxLight = 3;\n\n  private static _combinedData = {\n    viewMatrix: new Float32Array(16 * LightShadow._maxLight),\n    projectionMatrix: new Float32Array(16 * LightShadow._maxLight),\n    bias: new Float32Array(LightShadow._maxLight),\n    intensity: new Float32Array(LightShadow._maxLight),\n    radius: new Float32Array(LightShadow._maxLight),\n    mapSize: new Float32Array(2 * LightShadow._maxLight),\n    map: []\n  };\n\n  private _mapSize: Vector2;\n  private _renderTarget: RenderTarget;\n\n  /**\n   * Shadow's light.\n   */\n  readonly light: Light;\n\n  /**\n   * Shadow bias.\n   */\n  bias: number = 0.005;\n\n  /**\n   * Shadow intensity, the larger the value, the clearer and darker the shadow.\n   */\n  intensity: number = 0.2;\n\n  /**\n   * Pixel range used for shadow PCF interpolation.\n   */\n  radius: number = 1;\n\n  /**\n   * Generate the projection matrix used by the shadow map.\n   */\n  projectionMatrix: Matrix = new Matrix();\n\n  constructor(light: Light, props = { engine: null, width: 512, height: 512 }) {\n    this.light = light;\n    const { engine, width, height } = props;\n\n    this._mapSize = new Vector2(width, height);\n    this._renderTarget = new RenderTarget(engine, width, height, new RenderColorTexture(engine, width, height));\n  }\n\n  /**\n   * The RenderTarget corresponding to the shadow map.\n   */\n  get renderTarget(): RenderTarget {\n    return this._renderTarget;\n  }\n\n  /**\n   * Shadow map's color render texture.\n   */\n  get map(): RenderColorTexture {\n    return this._renderTarget.getColorTexture();\n  }\n\n  /**\n   * Shadow map size.\n   */\n  get mapSize(): Vector2 {\n    return this._mapSize;\n  }\n\n  /**\n   * Initialize the projection matrix for lighting.\n   * @param light - The light to generate shadow\n   */\n  initShadowProjectionMatrix(light: Light) {\n    /**\n     * Directional light projection matrix, the default coverage area is left: -5, right: 5, bottom: -5, up: 5, near: 0.5, far: 50.\n     */\n    if (light instanceof DirectLight) {\n      Matrix.ortho(-5, 5, -5, 5, 0.1, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Point light projection matrix, default configuration: fov: 50, aspect: 1, near: 0.5, far: 50.\n     */\n    if (light instanceof PointLight) {\n      Matrix.perspective(MathUtil.degreeToRadian(50), 1, 0.5, 50, this.projectionMatrix);\n    }\n\n    /**\n     * Spotlight projection matrix, the default configuration: fov: this.angle * 2 * Math.sqrt(2), aspect: 1, near: 0.1, far: this.distance + 5\n     */\n    if (light instanceof SpotLight) {\n      const fov = Math.min(Math.PI / 2, light.angle * 2 * Math.sqrt(2));\n      Matrix.perspective(fov, 1, 0.1, light.distance + 5, this.projectionMatrix);\n    }\n  }\n\n  appendData(lightIndex: number): void {\n    const viewStart = lightIndex * 16;\n    const projectionStart = lightIndex * 16;\n    const biasStart = lightIndex;\n    const intensityStart = lightIndex;\n    const radiusStart = lightIndex;\n    const mapSizeStart = lightIndex * 2;\n    const mapStart = lightIndex;\n\n    const data = LightShadow._combinedData;\n\n    data.viewMatrix.set(this.light.viewMatrix.elements, viewStart);\n    data.projectionMatrix.set(this.projectionMatrix.elements, projectionStart);\n    data.bias[biasStart] = this.bias;\n    data.intensity[intensityStart] = this.intensity;\n    data.radius[radiusStart] = this.radius;\n    data.mapSize[mapSizeStart] = this.mapSize.x;\n    data.mapSize[mapSizeStart + 1] = this.mapSize.y;\n    data.map[mapStart] = this.map;\n  }\n}\n","import { Logger } from \"../base/Logger\";\nimport { AmbientLight } from \"../lighting/AmbientLight\";\nimport { Light } from \"../lighting/Light\";\nimport { LightShadow } from \"./LightShadow\";\nimport { Component } from \"../Component\";\n\n/**\n * Set whether the light to generate shadows.\n */\nObject.defineProperty(Light.prototype, \"enableShadow\", {\n  get: function () {\n    return this._enableShadow;\n  },\n  set: function (enabled) {\n    this._enableShadow = enabled;\n\n    if (this._enableShadow) {\n      if (this instanceof AmbientLight) {\n        this._enableShadow = false;\n        Logger.warn(\"Has no shadow!\");\n        return;\n      }\n\n      this.shadow = this.shadow || new LightShadow(this, { engine: this.engine, width: 512, height: 512 });\n      this.shadow.initShadowProjectionMatrix(this);\n    }\n  }\n});\n\n/**\n * Set whether the renderer to receive shadows.\n */\nObject.defineProperty(Component.prototype, \"receiveShadow\", {\n  get: function () {\n    return this._recieveShadow;\n  },\n  set: function (enabled) {\n    this._recieveShadow = enabled;\n  }\n});\n\n/**\n * Set whether the renderer to cast shadows.\n */\nObject.defineProperty(Component.prototype, \"castShadow\", {\n  get: function () {\n    return this._castShadow;\n  },\n  set: function (enabled) {\n    this._castShadow = enabled;\n  }\n});\n","import { Engine } from \"../Engine\";\nimport { Material } from \"../material/Material\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow Map material.\n */\nexport class ShadowMapMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow-map\"));\n    this.shaderData.enableMacro(\"O3_GENERATE_SHADOW_MAP\");\n  }\n}\n","import { Color } from \"@oasis-engine/math\";\nimport { Camera } from \"../Camera\";\nimport { Layer } from \"../Layer\";\nimport { Light } from \"../lighting/Light\";\nimport { Material } from \"../material/Material\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Shader } from \"../shader/Shader\";\nimport { RenderTarget } from \"../texture/RenderTarget\";\n\n/**\n * RenderPass for rendering shadow map.\n */\nexport class ShadowMapPass extends RenderPass {\n  private static _viewMatFromLightProperty = Shader.getPropertyByName(\"u_viewMatFromLight\");\n  private static _projMatFromLightProperty = Shader.getPropertyByName(\"u_projMatFromLight\");\n\n  readonly light: Light;\n\n  /**\n   * Constructor.\n   * @param light  - The light that the shadow belongs to\n   */\n  constructor(\n    name: string,\n    priority: number,\n    renderTarget: RenderTarget,\n    replaceMaterial: Material,\n    mask: Layer,\n    light: Light\n  ) {\n    super(name, priority, renderTarget, replaceMaterial, mask);\n    this.light = light;\n    this.clearColor = new Color(1, 1, 1, 1);\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    // The viewProjection matrix from the light.\n    const shaderData = this.replaceMaterial.shaderData;\n    shaderData.setMatrix(ShadowMapPass._viewMatFromLightProperty, this.light.viewMatrix);\n    shaderData.setMatrix(ShadowMapPass._projMatFromLightProperty, (this.light as any).shadow.projectionMatrix);\n  }\n}\n","import { Engine } from \"../Engine\";\nimport { RenderQueueType } from \"../material\";\nimport { Material } from \"../material/Material\";\nimport { BlendFactor } from \"../shader/enums/BlendFactor\";\nimport { CompareFunction } from \"../shader/enums/CompareFunction\";\nimport { Shader } from \"../shader/Shader\";\n\n/**\n * Shadow material.\n */\nexport class ShadowMaterial extends Material {\n  constructor(engine: Engine) {\n    super(engine, Shader.find(\"shadow\"));\n\n    const targetBlendState = this.renderState.blendState.targetBlendState;\n    targetBlendState.enabled = true;\n    targetBlendState.sourceColorBlendFactor = targetBlendState.sourceAlphaBlendFactor = BlendFactor.DestinationColor;\n    targetBlendState.destinationColorBlendFactor = targetBlendState.destinationAlphaBlendFactor = BlendFactor.Zero;\n    this.renderState.depthState.compareFunction = CompareFunction.LessEqual;\n\n    this.renderQueueType = RenderQueueType.Transparent;\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { CameraClearFlags } from \"../enums/CameraClearFlags\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderPass } from \"../RenderPipeline/RenderPass\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { LightShadow } from \"./LightShadow\";\n\n/**\n * RenderPass for rendering shadow.\n */\nexport class ShadowPass extends RenderPass {\n  constructor(...args) {\n    super(...args);\n    this.clearFlags = CameraClearFlags.None;\n  }\n\n  /**\n   * @override\n   */\n  preRender(camera: Camera, queue: RenderQueue) {\n    this.enabled = false;\n    const lightMgr = camera.scene.findFeature(LightFeature);\n    const lights = lightMgr.visibleLights;\n    const shaderData = this.replaceMaterial.shaderData;\n\n    // keep render based on default render pass\n    const pass = camera._renderPipeline.defaultRenderPass;\n    this.renderTarget = pass.renderTarget;\n\n    let shadowMapCount = 0;\n\n    LightShadow.clearMap();\n    for (let i = 0, len = lights.length; i < len; i++) {\n      const lgt: any = lights[i];\n      if (lgt.enableShadow) {\n        lgt.shadow.appendData(shadowMapCount++);\n      }\n    }\n\n    if (shadowMapCount) {\n      this.enabled = true;\n      LightShadow._updateShaderData(shaderData);\n      shaderData.enableMacro(\"O3_SHADOW_MAP_COUNT\", shadowMapCount.toString());\n    } else {\n      shaderData.disableMacro(\"O3_SHADOW_MAP_COUNT\");\n    }\n  }\n}\n","import { Camera } from \"../Camera\";\nimport { Component } from \"../Component\";\nimport { Layer } from \"../Layer\";\nimport { LightFeature } from \"../lighting/LightFeature\";\nimport { RenderQueue } from \"../RenderPipeline/RenderQueue\";\nimport { Scene } from \"../Scene\";\nimport { SceneFeature } from \"../SceneFeature\";\nimport { ShadowMapMaterial } from \"./ShadowMapMaterial\";\nimport { ShadowMapPass } from \"./ShadowMapPass\";\nimport { ShadowMaterial } from \"./ShadowMaterial\";\nimport { ShadowPass } from \"./ShadowPass\";\n\n/**\n * Shadow plug-in.\n */\nexport class ShadowFeature extends SceneFeature {\n  private _shadowPass: ShadowPass;\n  private _shadowMapMaterial: ShadowMapMaterial;\n\n  /**\n   * @override\n   */\n  preRender(scene: Scene, camera: Camera) {\n    const lights = scene.findFeature(LightFeature).visibleLights;\n\n    if (lights.length > 0) {\n      // Check RenderPass for rendering shadows.\n      if (!this._shadowPass) {\n        this.addShadowPass(camera);\n      }\n\n      // Check RenderPass for rendering shadow map.\n      const renderPipeline = camera._renderPipeline;\n\n      for (let i = 0, len = lights.length; i < len; i++) {\n        const lgt: any = lights[i];\n        if (lgt.enableShadow && !lgt.shadowMapPass) {\n          lgt.shadowMapPass = this.addShadowMapPass(camera, lgt);\n        } else if (!lgt.enableShadow && lgt.shadowMapPass) {\n          renderPipeline.removeRenderPass(lgt.shadowMapPass);\n          lgt.shadowMapPass = null;\n        }\n      }\n\n      this.updatePassRenderFlag(renderPipeline._opaqueQueue);\n      this.updatePassRenderFlag(renderPipeline._alphaTestQueue);\n      this.updatePassRenderFlag(renderPipeline._transparentQueue);\n    }\n  }\n\n  /**\n   * Add RenderPass for rendering shadows.\n   * @param camera - The camera for rendering\n   */\n  addShadowPass(camera: Camera) {\n    const shadowMaterial = new ShadowMaterial(camera.engine);\n    this._shadowPass = new ShadowPass(\"ShadowPass\", 1, null, shadowMaterial, Layer.Layer30); // SHADOW\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(this._shadowPass);\n  }\n\n  /**\n   * Add RenderPass for rendering shadow map.\n   * @param camera - The camera for rendering\n   * @param light - The light that the shadow belongs to\n   */\n  addShadowMapPass(camera: Camera, light) {\n    // Share shadow map material.\n    this._shadowMapMaterial = this._shadowMapMaterial || new ShadowMapMaterial(camera.engine);\n\n    const shadowMapPass = new ShadowMapPass(\n      \"ShadowMapPass\",\n      -1,\n      light.shadow.renderTarget,\n      this._shadowMapMaterial,\n      Layer.Layer31, // SHADOW_MAP\n      light\n    );\n    const renderer = camera._renderPipeline;\n    renderer.addRenderPass(shadowMapPass);\n\n    return shadowMapPass;\n  }\n\n  /**\n   * Update the renderPassFlag state of renderers in the scene.\n   * @param renderQueue - Render queue\n   */\n  updatePassRenderFlag(renderQueue: RenderQueue) {\n    const items = renderQueue.items;\n    for (let i = 0, len = items.length; i < len; i++) {\n      const item = items[i];\n      const ability: Component = item.component;\n\n      const receiveShadow = (ability as any).recieveShadow;\n      const castShadow = (ability as any).castShadow;\n      if (receiveShadow === true) {\n        ability.entity.layer |= Layer.Layer30; //SHADOW;\n      } else if (receiveShadow === false) {\n        ability.entity.layer &= ~Layer.Layer30; //SHADOW;\n      }\n\n      if (castShadow === true) {\n        ability.entity.layer |= Layer.Layer31; //SHADOW_MAP;\n      } else if (castShadow === false) {\n        ability.entity.layer &= ~Layer.Layer31; //SHADOW_MAP;\n      }\n    }\n  }\n}\n","import \"./Extension\";\nimport { ShadowFeature } from \"./ShadowFeature\";\nimport { Scene } from \"../Scene\";\n\nScene.registerFeature(ShadowFeature);\n","export { Engine } from \"./Engine\";\nexport { SystemInfo } from \"./SystemInfo\";\nexport type { Canvas } from \"./Canvas\";\nexport { EngineFeature } from \"./EngineFeature\";\n\nexport { Scene } from \"./Scene\";\nexport { SceneFeature } from \"./SceneFeature\";\nexport { SceneManager } from \"./SceneManager\";\n\nexport { Entity } from \"./Entity\";\nexport { Component } from \"./Component\";\nexport { Script } from \"./Script\";\nexport { Renderer } from \"./Renderer\";\nexport { dependencies } from \"./ComponentsDependencies\";\nexport { Camera } from \"./Camera\";\nexport { Transform } from \"./Transform\";\nexport { UpdateFlag } from \"./UpdateFlag\";\nexport { request } from \"./asset/request\";\nexport { Loader } from \"./asset/Loader\";\nexport { ResourceManager, resourceLoader } from \"./asset/ResourceManager\";\nexport { AssetPromise, AssetPromiseStatus } from \"./asset/AssetPromise\";\nexport type { LoadItem } from \"./asset/LoadItem\";\nexport { AssetType } from \"./asset/AssetType\";\nexport { RefObject } from \"./asset/RefObject\";\n\nexport { BasicRenderPipeline } from \"./RenderPipeline/BasicRenderPipeline\";\nexport { RenderQueue } from \"./RenderPipeline/RenderQueue\";\nexport { RenderPass } from \"./RenderPipeline/RenderPass\";\nexport { RenderElement } from \"./RenderPipeline/RenderElement\";\nexport { SpriteElement } from \"./RenderPipeline/SpriteElement\";\nexport * from \"./base\";\n\n// Lighting\nimport { LightFeature, hasLight } from \"./lighting/LightFeature\";\nimport { Scene } from \"./Scene\";\nScene.registerFeature(LightFeature);\n(Scene.prototype as any).hasLight = hasLight;\n\nexport { PhysicsManager } from \"./PhysicsManager\";\nexport { HitResult } from \"./HitResult\";\n\nexport { Background } from \"./Background\";\nexport { BackgroundMode } from \"./enums/BackgroundMode\";\nexport { CameraClearFlags } from \"./enums/CameraClearFlags\";\nexport * from \"./lighting/index\";\nexport * from \"./material/index\";\nexport * from \"./texture/index\";\nexport * from \"./graphic/index\";\nexport * from \"./2d/index\";\nexport * from \"./shaderlib/index\";\nexport * from \"./animation/index\";\nexport * from \"./mesh/index\";\nexport * from \"./sky/index\";\nexport * from \"./particle/index\";\nexport * from \"./trail/index\";\nexport * from \"./collider/index\";\nexport * from \"./collision/index\";\nexport * from \"./fog/index\";\nexport * from \"./env-probe/index\";\nexport * from \"./shadow/index\";\nexport * from \"./shader/index\";\nexport * from \"./Layer\";\nexport * from \"./clone/CloneManager\";\nexport * from \"./renderingHardwareInterface/index\";\n"],"names":["AssetPromiseStatus","AssetPromise","all","promises","resolve","reject","setProgress","Array","isArray","completed","total","length","results","forEach","value","index","Promise","then","result","catch","err","onProgress","callback","_listeners","add","cancel","_status","Pending","_reject","executor","newReject","progress","_progress","listener","reason","Failed","Success","Set","Util","toString","call","isArrayLike","x","clone","obj","rst","slice","i","l","k","hasOwnProperty","downloadBlob","blob","fileName","navigator","msSaveBlob","url","window","URL","createObjectURL","a","document","createElement","body","appendChild","style","display","href","download","addEventListener","parentElement","removeChild","click","revokeObjectURL","removeFromArray","array","item","indexOf","last","end","ObjectValues","Object","keys","map","key","ResourceManager","_addLoader","type","loader","extnames","_loaders","len","_extTypeMapping","_getTypeByUrl","path","split","substring","lastIndexOf","engine","retryCount","retryInterval","timeout","_assetPool","create","_assetUrlPool","_refObjectPool","_loadingPromises","load","assetInfo","_loadSingleItem","cancelNotLoaded","promise","p","gc","objects","isGCIgnored","destroy","getAssetPath","instanceId","_addAsset","asset","_deleteAsset","id","_addRefObject","_deleteRefObject","_assignDefaultOptions","undefined","urls","join","info","res","useCache","resourceLoader","assetType","Target","Event","target","data","bubbles","_timeStamp","_target","_currentTarget","_bubbles","_propagationStopped","_type","Date","getTime","stopPropagation","t","CloneMode","ignoreClone","propertyKey","CloneManager","registerCloneMode","Ignore","assignmentClone","Assignment","shallowClone","Shallow","deepClone","Deep","mode","targetMap","_subCloneModeMap","get","constructor","set","getCloneMode","cloneModes","_cloneModeMap","objectType","_objectType","cloneModeMap","subCloneModes","getPrototypeOf","deepCloneObject","source","Uint8Array","Uint16Array","Uint32Array","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","n","_deepCloneObjectItem","customSource","cloneTo","sourceItem","itemType","sourceTypeArrayItem","targetTypeArrayItem","sourceArrayItem","targetArrayItem","sourceCustomItem","targetCustomItem","targetItem","Map","EngineObject","_engine","_instanceIdCounter","EventDispatcher","_evtCount","hasEvent","event","_evts","eventNames","listenerCount","listeners","fn","dispatch","once","removeEventListener","on","events","push","off","_clearEvent","temp","removeAllEventListeners","trigger","e","noop","message","debug","console","log","bind","warn","error","Logger","isEnabled","enable","disable","Time","_clock","_timeScale","_deltaTime","_startTime","_lastTickTime","performance","now","reset","tick","nowTime","s","DataType","GLCapabilityType","DisorderedArray","count","_elements","element","delete","deleteByIndex","elements","lastIndex","garbageCollection","ShaderMacroCollection","_mask","_length","unionCollection","left","right","out","outMask","minSize","maxSize","minMask","maxMask","macro","_index","size","mask","maskStart","_value","endIndex","newValue","macroCollection","addMask","addSize","maskSize","complementaryCollection","removeMask","Math","min","intersectionCollection","unionMask","isEnable","clear","ComponentsManager","_onStartScripts","_onUpdateScripts","_onLateUpdateScripts","_destroyComponents","_onUpdateAnimations","_renderers","_onUpdateRenderers","_componentsContainerPool","addRenderer","renderer","_rendererIndex","removeRenderer","replaced","addOnStartScript","script","_onStartIndex","removeOnStartScript","addOnUpdateScript","_onUpdateIndex","removeOnUpdateScript","addOnLateUpdateScript","_onLateUpdateIndex","removeOnLateUpdateScript","addOnUpdateAnimations","animation","removeOnUpdateAnimations","addOnUpdateRenderers","removeOnUpdateRenderers","addDestroyComponent","component","callScriptOnStart","onStartScripts","_started","onStart","callScriptOnUpdate","deltaTime","onUpdate","callScriptOnLateUpdate","onLateUpdate","callAnimationUpdate","update","callRendererOnUpdate","callRender","context","camera","_camera","cullingMask","_entity","layer","enableFrustumCulling","isCulled","_frustum","intersectsBox","bounds","transform","entity","position","worldPosition","center","getCenter","_tempVector0","isOrthographic","forward","getWorldForward","_tempVector1","Vector3","subtract","_distanceForSort","dot","distanceSquared","_updateShaderData","_render","_globalShaderMacro","shaderData","_macroCollection","callComponentDestroy","destroyComponents","onDestroy","callCameraOnBeginRender","camComps","_components","camComp","onBeginRender","callCameraOnEndRender","onEndRender","getActiveChangedTempList","pop","putActiveChangedTempList","componentContainer","ComponentCloner","cloneComponent","cloneMode","sourcePropS","tarProp","sourcePropD","_cloneTo","ComponentsDependencies","register","currentComponent","dependentComponent","_addDependency","_dependenciesMap","_invDependenciesMap","_addCheck","dependencies","getComponent","_removeCheck","invDependencies","components","abilityClass","ability","Layer","Component","_destroyed","_removeComponent","isActiveInHierarchy","_enabled","_onDisable","_onInActive","_onDestroy","_onAwake","_onEnable","_onActive","_setActive","_awoken","_isActiveInHierarchy","scene","UpdateFlag","_flags","flag","flags","UpdateFlagManager","_updateFlags","distribute","updateFlags","Transform","_dirtyFlag","TransformFlag","WmWpWeWqWs","setPosition","y","z","_position","setValue","setRotation","_rotation","rotation","setRotationQuaternion","w","_rotationQuaternion","rotationQuaternion","setScale","_scale","scale","setWorldPosition","_worldPosition","setWorldRotation","_worldRotation","worldRotation","setWorldRotationQuaternion","_worldRotationQuaternion","worldRotationQuaternion","worldMatrix","normalize","getWorldRight","getWorldUp","up","translate","translationOrX","relativeToLocalOrY","relativeToLocal","_tempVec3","_translate","rotate","rotationOrX","_rotateXYZ","rotateByAxis","axis","angle","rad","MathUtil","degreeToRadFactor","Quaternion","rotationAxisAngle","_tempQuat0","_rotateByQuat","lookAt","worldUp","EPSILON","zeroTolerance","abs","rotMat","_tempMat43","Matrix","getRotation","invert","registerWorldChangeFlag","_updateFlagManager","_parentChange","_isParentDirty","_updateAllWorldFlag","_updateWorldPositionFlag","_isContainDirtyFlags","WmWp","_worldAssociatedChange","nodeChildren","_children","_updateWorldRotationFlag","WmWeWq","_updateWorldPositionAndRotationFlag","WmWpWeWq","_updateWorldScaleFlag","WmWs","_updateWorldPositionAndScaleFlag","WmWpWs","_getParentTransform","_parentTransformCache","parentCache","parent","_getScaleMatrix","invRotation","invRotationMat","_tempMat30","worldRotScaMat","_tempMat31","scaMat","_tempMat32","setValueByMatrix","Matrix3x3","multiply","targetDirtyFlags","_isContainDirtyFlag","_setDirtyFlagTrue","_setDirtyFlagFalse","rotateQuat","translation","radFactor","rotQuat","rotationEuler","LocalMatrix","WorldPosition","getTranslation","_tempMat41","transformCoordinate","LocalEuler","toEuler","radToDegreeFactor","LocalQuat","WorldEuler","degreeToRadian","WorldQuat","WorldScale","scaleMat","_lossyWorldScale","affineTransformation","_localMatrix","decompose","WorldMatrix","localMatrix","_worldMatrix","_tempMat42","_tempMat40","Entity","_findChildByName","root","name","children","child","_traverseSetOwnerScene","_scene","childCount","Layer0","_scripts","_isRoot","_isActive","_parent","_activeChangedComponents","_invModelMatrix","_inverseWorldMatFlag","addComponent","getComponents","getComponentsIncludeChildren","_getComponentsInChildren","addChild","getChild","findByName","grandson","findByPath","splits","createChild","clearChildren","_processInActive","cloneEntity","sourceComp","targetComp","abilityArray","parentChildren","splice","_addScript","_entityCacheIndex","_removeScript","_removeFromParent","oldParent","oldParentChildren","_processActive","_componentsManager","_setActiveInHierarchy","_setActiveComponents","_setInActiveInHierarchy","isActive","activeChangedComponents","_setTransformDirty","getInvModelMatrix","_isActiveInEngine","newParent","parentScene","val","FeatureManager","_features","_objects","registerFeature","IFeature","featureArray","objectArray","features","addObject","callFeatureMethod","method","args","feature","apply","findFeature","RenderQueueType","RefObject","_refCount","resourceManager","force","refCount","_getRefCount","_addRefCount","_addToResourceManager","ShaderDataGroup","Texture","_platformTexture","_mipmap","_width","_height","_mipmapCount","_wrapModeU","_wrapModeV","_filterMode","_anisoLevel","generateMipmaps","_getMaxMiplevel","floor","log2","_getMipmapCount","max","wrapModeU","wrapModeV","filterMode","_hardwareRenderer","capability","maxAnisoLevel","anisoLevel","pbr_common_frag_define","pbr_util_frag_define","pbr_envmap_light_frag_define","pbr_base_frag_define","pbr_texture_frag_define","pbr_runtime_frag_define","pbr_brdf_cook_torrance_frag_define","pbr_direct_irradiance_frag_define","pbr_ibl_specular_frag_define","pbr_ibl_diffuse_frag_define","pbr_begin_frag","pbr_direct_irradiance_frag","pbr_ibl_diffuse_frag","pbr_ibl_specular_frag","pbr_end_frag","ShaderLib","common","common_vert","common_frag","color_share","normal_share","uv_share","worldpos_share","shadow_share","fog_share","begin_normal_vert","begin_position_vert","position_vert","color_vert","normal_vert","skinning_vert","blendShape_input","blendShape_vert","uv_vert","worldpos_vert","shadow_vert","fog_vert","direct_light_frag","point_light_frag","spot_light_frag","mobile_material_frag","fog_frag","begin_mobile_frag","begin_viewdir_frag","mobile_blinnphong_frag","noise_common","noise_cellular_2D","noise_cellular_2x2","noise_cellular_2x2x2","noise_cellular_3D","noise_cellular","noise_perlin_2D","noise_perlin_3D","noise_perlin_4D","noise_perlin","noise_psrd_2D","noise_simplex_2D","noise_simplex_3D_grad","noise_simplex_3D","noise_simplex_4D","noise_simplex","gamma_frag","PBRShaderLib","normal_get","ShaderFactory","parseCustomMacros","macros","m","parseIncludes","src","regex","replace","match","trim","parseExtension","extensions","convertTo300","shader","isFrag","isMRT","test","_replaceMRTShader","declaration","mrtIndexSet","ShaderMacro","ShaderUniform","propertyId","location","applyFunc","cacheValue","textureIndex","textureDefault","_rhi","_gl","rhi","gl","upload1f","shaderUniform","uniform1f","upload1fv","uniform1fv","upload2f","r","g","uniform2f","upload2fv","uniform2fv","upload3f","b","uniform3f","upload3fv","uniform3fv","upload4f","uniform4f","upload4fv","uniform4fv","upload1i","uniform1i","upload1iv","uniform1iv","upload2i","uniform2i","upload2iv","uniform2iv","upload3i","uniform3i","upload3iv","uniform3iv","upload4i","uniform4i","upload4iv","uniform4iv","uploadMat4","uniformMatrix4fv","uploadMat4v","uploadTexture","activeTexture","bindTexture","uploadTextureArray","textureIndices","texture","ShaderUniformBlock","constUniforms","textureUniforms","ShaderProgram","_addLineNum","str","lines","limitLength","prefix","line","vertexSource","fragmentSource","sceneUniformBlock","cameraUniformBlock","rendererUniformBlock","materialUniformBlock","otherUniformBlock","_uploadRenderCount","_uploadCamera","_uploadRenderer","_uploadMaterial","attributeLocation","_isValid","_vertexShader","_fragmentShader","_glProgram","_activeTextureUint","_createProgram","_recordLocation","_counter","uploadAll","uniformBlock","uploadUniforms","uploadTextures","properties","_properties","uniform","uploadUngroupTextures","groupingOtherUniformBlock","_groupingSubOtherUniforms","_currentBind","useProgram","deleteShader","deleteProgram","uniforms","isTexture","group","Shader","_getShaderPropertyGroup","_groupingUniform","Scene","Camera","Renderer","Material","vertexShader","_createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","validateProgram","isContextLost","getProgramParameter","LINK_STATUS","getProgramInfoLog","shaderType","shaderSource","createShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","uniformInfos","_getUniformInfos","attributeInfos","_getAttributeInfos","substr","getUniformLocation","getPropertyByName","_uniqueId","FLOAT","FLOAT_VEC2","Vector2","FLOAT_VEC3","FLOAT_VEC4","Vector4","BOOL","INT","BOOL_VEC2","INT_VEC2","BOOL_VEC3","INT_VEC3","BOOL_VEC4","INT_VEC4","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","defaultTexture","_whiteTexture2D","_whiteTextureCube","defaultTextures","glTextureIndices","TEXTURE0","getAttribLocation","uniformCount","ACTIVE_UNIFORMS","getActiveUniform","attributeCount","ACTIVE_ATTRIBUTES","getActiveAttrib","ShaderProperty","_group","_propertyNameCounter","shaderMap","_shaderMap","find","getMacroByName","_macroMap","maskMap","_macroMaskMap","counter","_macroCounter","bit","propertyNameMap","_propertyNameMap","property","propertyName","shaderProperty","_getNamesByMacros","subMaskMap","subMask","j","_shaderId","_vertexSource","_fragmentSource","_shaderCounter","compileVariant","compileMacros","_compileMacros","_getShaderProgram","isValid","shaderProgramPool","_getShaderProgramPool","shaderProgram","isWebGL2","macroNameList","macroNameStr","versionStr","precisionStr","canIUse","shaderTextureLod","standardDerivatives","_shaderExtension","cache","ShaderData","_variableMacros","getFloat","_getData","setFloat","_setData","getInt","setInt","getFloatArray","setFloatArray","getIntArray","setIntArray","getVector2","setVector2","getVector3","setVector3","getVector4","setVector4","getMatrix","setMatrix","getColor","setColor","getTexture","setTexture","lastValue","getTextureArray","setTextureArray","enableMacro","_enableVariableMacro","disableMacro","variableValue","_disableVariableMacro","targetProperties","targetProperty","variableMacro","oldMacro","BlendFactor","BlendOperation","ColorWriteMask","RenderTargetBlendState","enabled","colorBlendOperation","Add","alphaBlendOperation","sourceColorBlendFactor","One","sourceAlphaBlendFactor","destinationColorBlendFactor","Zero","destinationAlphaBlendFactor","colorWriteMask","All","BlendState","targetBlendState","blendColor","Color","alphaToCoverage","_getGLBlendFactor","blendFactor","ZERO","ONE","SourceColor","SRC_COLOR","OneMinusSourceColor","ONE_MINUS_SRC_COLOR","DestinationColor","DST_COLOR","OneMinusDestinationColor","ONE_MINUS_DST_COLOR","SourceAlpha","SRC_ALPHA","OneMinusSourceAlpha","ONE_MINUS_SRC_ALPHA","DestinationAlpha","DST_ALPHA","OneMinusDestinationAlpha","ONE_MINUS_DST_ALPHA","SourceAlphaSaturate","SRC_ALPHA_SATURATE","BlendColor","CONSTANT_COLOR","OneMinusBlendColor","ONE_MINUS_CONSTANT_COLOR","_getGLBlendOperation","blendOperation","FUNC_ADD","Subtract","FUNC_SUBTRACT","ReverseSubtract","FUNC_REVERSE_SUBTRACT","Min","blendMinMax","Error","MIN","Max","MAX","_apply","hardwareRenderer","lastRenderState","_platformApply","blendState","lastState","lastTargetBlendState","BLEND","blendFuncSeparate","blendEquationSeparate","equals","colorMask","Red","Green","Blue","Alpha","SAMPLE_ALPHA_TO_COVERAGE","CompareFunction","DepthState","writeEnabled","compareFunction","Less","_getGLCompareFunction","Never","NEVER","LESS","Equal","EQUAL","LessEqual","LEQUAL","Greater","GREATER","NotEqual","NOTEQUAL","GreaterEqual","GEQUAL","Always","ALWAYS","depthState","DEPTH_TEST","depthFunc","depthMask","CullMode","RasterState","cullMode","Back","depthBias","slopeScaledDepthBias","_cullFaceEnable","rasterState","cullFaceEnable","Off","CULL_FACE","cullFace","BACK","FRONT","POLYGON_OFFSET_FILL","polygonOffset","StencilOperation","StencilState","referenceValue","writeMask","compareFunctionFront","compareFunctionBack","passOperationFront","Keep","passOperationBack","failOperationFront","failOperationBack","zFailOperationFront","zFailOperationBack","_getGLStencilOperation","KEEP","Replace","REPLACE","IncrementSaturate","INCR","DecrementSaturate","DECR","Invert","INVERT","IncrementWrap","INCR_WRAP","DecrementWrap","DECR_WRAP","stencilState","STENCIL_TEST","referenceOrMaskChange","stencilFuncSeparate","stencilOpSeparate","stencilMask","RenderState","_lastRenderState","renderQueueType","Opaque","renderState","dest","_preRender","renderElement","ClassPool","_elementPoolIndex","_elementPool","getFromPool","pool","resetPool","RenderContext","_viewProjectMatrix","_setContext","projectionMatrix","viewMatrix","RenderElement","mesh","subMesh","material","SpriteElement","positions","uv","triangles","color","SpriteMaskElement","isAdd","SpriteMaskInteraction","prototype","_overrideUpdate","_transformChangeFlag","getInstanceMaterial","materials","_materials","_materialsInstanced","_createInstanceMaterial","getMaterial","setMaterial","indexOrMaterial","materialsInstance","internalMaterial","getInstanceMaterials","getMaterials","setMaterials","internalMaterials","materialsInstanced","mvMatrix","_mvMatrix","mvpMatrix","_mvpMatrix","mvInvMatrix","_mvInvMatrix","normalMatrix","_normalMatrix","transpose","_localMatrixProperty","_worldMatrixProperty","_mvMatrixProperty","_mvpMatrixProperty","_mvInvMatrixProperty","_normalMatrixProperty","componentsManager","_updateBounds","worldBounds","insMaterial","changeFlag","_bounds","BoundingBox","SpriteMaskLayer","SpriteMask","_maskElement","_worldMatrixDirtyFlag","_spriteMaskDefaultMaterial","_alphaCutoffProperty","_alphaCutoff","sprite","_positions","localDirty","_updateMeshData","_isSpriteDirty","localPositions","localVertexPos","curVertexPos","transformToVec3","_textureProperty","spriteMaskElementPool","_spriteMaskElementPool","maskElement","_uv","_triangles","_renderPipeline","_allSpriteMasks","_sprite","Everything","VertexElementFormat","BufferUsage","IndexFormat","BufferUtil","_getGLBufferUsage","bufferUsage","Static","STATIC_DRAW","Dynamic","DYNAMIC_DRAW","Stream","STREAM_DRAW","_getGLIndexType","indexFormat","UInt8","UNSIGNED_BYTE","UInt16","UNSIGNED_SHORT","UInt32","UNSIGNED_INT","_getGLIndexByteCount","_getElementInfo","format","normalized","Float","Byte4","BYTE","UByte4","NormalizedByte4","NormalizedUByte4","Short2","SHORT","UShort2","NormalizedShort2","NormalizedUShort2","Short4","UShort4","NormalizedShort4","NormalizedUShort4","VertexElement","semantic","offset","bindingIndex","instanceStepRate","_glElementInfo","_semantic","_offset","_format","_bindingIndex","_instanceStepRate","BufferBindFlag","SetDataOptions","Buffer","byteLengthOrData","_glBindTarget","_glBufferUsage","_nativeBuffer","_byteLength","_bufferUsage","glBufferUsage","glBindTarget","VertexBuffer","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","createBuffer","bufferData","byteLength","bindBuffer","setData","bufferByteOffset","dataOffset","dataLength","options","None","Discard","byteSize","BYTES_PER_ELEMENT","dataByteLength","isArrayBufferView","byteOffset","bufferSubData","subData","buffer","getData","getBufferSubData","deleteBuffer","resize","MeshTopology","IndexBufferBinding","_buffer","SubMesh","start","topology","Triangles","Mesh","_vertexElementMap","_glIndexType","_glIndexByteCount","_platformPrimitive","_instanceCount","_vertexBufferBindings","_indexBufferBinding","_vertexElements","_subMeshes","createPlatformPrimitive","addSubMesh","startOrSubMesh","removeSubMesh","subMeshes","clearSubMesh","registerUpdateFlag","_draw","draw","vertexBufferBindings","_setVertexElements","_clearVertexElements","_addVertexElement","_setVertexBufferBinding","binding","lastBinding","_setIndexBufferBinding","vertexElementMap","VertexBufferBinding","stride","_stride","TextureFilterMode","TextureFormat","TextureWrapMode","Texture2D","width","height","mipmap","R8G8B8A8","createPlatformTexture2D","Bilinear","Repeat","setPixelBuffer","colorBuffer","mipLevel","setImageSource","imageSource","flipY","premultiplyAlpha","getPixelBuffer","RenderBufferColorFormat","RenderBufferDepthFormat","TextureCubeFace","TextureCubeMap","createPlatformTextureCubeMap","Clamp","face","RenderDepthTexture","isCube","Depth","_autoMipmap","_isCube","createPlatformRenderDepthTexture","RenderTarget","renderTexture","depth","antiAliasing","_platformRenderTarget","_colorTextures","_depth","_antiAliasing","_depthTexture","createPlatformRenderTarget","getColorTexture","colorTextureCount","autoGenerateMipmaps","colorTexture","_setRenderTargetFace","faceIndex","setRenderTargetFace","_blitRenderTarget","blitRenderTarget","RenderColorTexture","createPlatformRenderColorTexture","ModelMesh","_hasBlendShape","_useBlendShapeNormal","_useBlendShapeTangent","_blendShapeTexture","_vertexCount","_accessible","_verticesFloat32","_verticesUint8","_indices","_indicesFormat","_vertexSlotChanged","_vertexChangeFlag","_indicesChangeFlag","_elementCount","_vertexElementsCache","_normals","_colors","_tangents","_uv1","_uv2","_uv3","_uv4","_uv5","_uv6","_uv7","_boneWeights","_boneIndices","_blendShapes","_blendShapeUpdateFlags","setPositions","ValueChanged","Position","getPositions","setNormals","normals","Normal","getNormals","setColors","colors","getColors","setBoneWeights","boneWeights","BoneWeight","getBoneWeights","setBoneIndices","boneIndices","BoneIndex","getBoneIndices","setTangents","tangents","Tangent","getTangents","setUVs","channelIndex","UV","UV1","UV2","UV3","UV4","UV5","UV6","UV7","getUVs","setIndices","indices","getIndices","addBlendShape","blendShape","BlendShape","_registerChangeFlag","clearBlendShapes","blendShapeUpdateFlags","uploadData","noLongerAccessible","vertexElements","_updateVertexElements","elementCount","vertexBuffer","vertexFloatCount","vertices","_updateVertices","newVertexBuffer","indexBuffer","newIndexBuffer","IndexBuffer","_releaseCache","POSITION_VERTEX_ELEMENT","blendShapeCount","normal","weight","joint","internalStart","tangent","blendShapes","blendShapeUpdateFlag","frames","frameCount","endFrame","deltaPositions","deltaPosition","deltaNormals","deltaNormal","deltaTangents","deltaTangent","Skin","inverseBindMatrices","joints","skeleton","MeshRenderer","_mesh","_meshUpdateFlag","_uvMacro","_normalMacro","_tangentMacro","_vertexColorMacro","renderPipeline","renderElementPool","_renderElementPool","pushPrimitive","destroyed","localBounds","lastMesh","SkinnedMeshRenderer","_skin","_blendShapeWeights","_mat","_useJointTexture","matrixPalette","_jointMatrixProperty","_blendShapeWeightsProperty","_blendShapeMacro","_blendShapeNormalMacro","_blendShapeTangentMacro","_initJoints","skin","jointNodes","findByNodeName","maxAttribUniformVec4","renderStates","getParameter","MAX_VERTEX_UNIFORM_VECTORS","maxJoints","jointCount","_jointCountProperty","canIUseMoreJoints","_maxJoints","nodeName","_hasInitJoints","ibms","worldToLocal","mat","identity","createJointTexture","jointTexture","R32G32B32A32","Point","_jointSamplerProperty","PrimitiveMesh","createSphere","radius","segments","vertexCount","rectangleCount","_generateIndices","thetaRange","PI","alphaRange","countReciprocal","segmentsReciprocal","uvs","u","v","alphaDelta","thetaDelta","sinTheta","sin","posX","cos","posY","posZ","c","d","_initialize","createCuboid","halfWidth","halfHeight","halfDepth","createPlane","horizontalSegments","verticalSegments","horizontalCount","verticalCount","gridWidth","gridHeight","horizontalCountReciprocal","horizontalSegmentsReciprocal","verticalSegmentsReciprocal","createCylinder","radiusTop","radiusBottom","radialSegments","heightSegments","radialCount","unitHeight","torsoVertexCount","torsoRectangleCount","capTriangleCount","totalVertexCount","radialCountReciprocal","radialSegmentsReciprocal","heightSegmentsReciprocal","indicesOffset","thetaStart","radiusDiff","slope","radiusSlope","theta","cosTheta","diameterTopReciprocal","diameterBottomReciprocal","positionStride","curPosBottom","curPosX","curPosZ","curPosTop","topCapIndex","bottomIndiceIndex","topIndiceIndex","firstStride","secondStride","radiusMax","createTorus","tubeRadius","tubularSegments","arc","cosV","sinV","cosU","sinU","centerX","centerY","outerRadius","createCone","curRadius","curPos","indexCount","elementIndexUint","BufferMesh","setVertexElements","setVertexBufferBinding","bufferOrBinding","strideOrFirstIndex","isBinding","bindings","setVertexBufferBindings","firstIndex","needLength","setIndexBufferBinding","BlendShapeFrame","_frames","addFrame","frameOrWeight","frame","_addFrame","clearFrames","Basic2DBatcher","_subMeshPool","_batchedQueue","_meshes","_meshCount","_vertexBuffers","_indiceBuffers","_vertices","_flushId","MAX_VERTEX_COUNT","_createMesh","drawElement","flush","batchedQueue","_updateData","drawBatches","_canUploadSameBuffer","meshes","vertexBuffers","indiceBuffers","vertexStride","createVertexElements","vertexIndex","indiceIndex","vertexStartIndex","curIndiceStartIndex","curMeshIndex","preElement","curElement","updateVertices","triangleNum","canBatch","_getSubMeshFromPool","SpriteMaskBatcher","preShaderData","curShaderData","textureProperty","alphaCutoffProperty","verticesNum","curUV","spriteMaskElement","op","drawPrimitive","SpriteMaskManager","_batcher","_preMaskLayer","preRender","maskInteraction","_processMasksDiff","postRender","maskLayer","preMaskLayer","curMaskLayer","allMasks","commonLayer","addLayer","reduceLayer","allMaskElements","influenceLayers","maskRenderElement","BackgroundMode","BackgroundTextureFillMode","Sky","_matrix","Background","SolidColor","solidColor","sky","_textureFillMode","AspectFitHeight","_texture","_resizeBackgroundTexture","canvas","_backgroundTextureMesh","Fill","AspectFitWidth","fitWidthScale","fitHeightScale","_backgroundTextureMaterial","DiffuseMode","AmbientLight","_diffuseSphericalHarmonics","_diffuseSolidColor","_diffuseIntensity","_specularReflection","_specularIntensity","_diffuseMode","_shArray","_diffuseColorProperty","_diffuseIntensityProperty","_specularIntensityProperty","_preComputeSH","sh","coefficients","SphericalHarmonics","_shMacro","_diffuseSHProperty","_specularTextureProperty","_mipLevelProperty","mipmapCount","_specularMacro","SceneFeature","preUpdate","postUpdate","Light","_viewMat","_inverseViewMat","LightFeature","attachRenderLight","detachRenderLight","_maxLight","DirectLight","intensity","_forward","_lightColor","_reverseDirection","_combinedData","_colorProperty","_directionProperty","direction","_appendData","lightIndex","colorStart","directionStart","lightColor","PointLight","distance","_positionProperty","_distanceProperty","positionStart","distanceStart","lightPosition","SpotLight","penumbra","_inverseDirection","_angleCosProperty","angleCos","_penumbraCosProperty","penumbraCos","penumbraCosStart","angleCosStart","hasLight","visibleLights","light","directLightCount","pointLightCount","spotLightCount","lights","background","ambientLight","_activeCameras","_rootEntities","sceneFeatureManager","createRootEntity","addRootEntity","isRoot","oldScene","_removeEntity","removeRootEntity","getRootEntity","findEntityByName","findEntityByPath","filter","Boolean","rootEntitiesCount","findEntity","sceneManager","activeScene","_attachRenderCamera","_detachRenderCamera","active","rootEntities","lightMgr","oldRootEntities","Feature","SceneManager","_activeScene","loadScene","destroyOldScene","scenePromise","mergeScenes","sourceScene","destScene","ShaderPool","init","blinnPhongVs","blinnPhongFs","pbrVs","pbrFs","unlitVs","unlitFs","shadowMapVs","shadowMapFs","shadowFs","skyboxVs","skyboxFs","particleVs","particleFs","spriteMaskVs","spriteMaskFs","spriteVs","spriteFs","backgroundTextureVs","backgroundTextureFs","ShaderProgramPool","_cacheHierarchy","_cacheMap","_lastQueryMap","_lastQueryKey","cacheMap","maskLength","_resizeCacheMapHierarchy","maxEndIndex","subCacheShaders","cacheKey","hierarchy","resizeLength","ColliderFeature","colliders","attachCollider","collider","detachCollider","Collider","_updateHitResult","ray","outHit","origin","isWorldRay","getPoint","point","_getLocalRay","outRay","_ray","transformNormal","_raycast","hit","Ray","ABoxCollider","boxMin","boxMax","_corners","_cornerFlag","setBoxMinMax","setBoxCenterSize","halfSize","getCorners","minX","minY","minZ","h","localRay","boundingBox","_tempBox","intersect","intersectBox","PlaneCollider","planePoint","setPlane","boundingPlane","_tempPlane","intersectPlane","Plane","ASphereCollider","setSphere","boundingSphere","_tempSphere","lossyScale","lossyWorldScale","intersectSphere","BoundingSphere","BoxCollider","_center","_size","isShowCollider","SphereCollider","__center","__radius","_radius","HitResult","PhysicsManager","raycast","distanceOrResult","layerMaskOrResult","outHitResult","cf","hitResult","Number","MAX_VALUE","layerMask","isHit","curHit","_currentHit","engineFeatureManager","Engine","physicsManager","_spriteElementPool","_spriteDefaultMaterial","_renderContext","_renderCount","_shaderProgramPools","_spriteMaskManager","_canvas","_resourceManager","_sceneManager","_vSyncCount","_targetFrameRate","_time","_isPaused","_requestId","_timeoutId","_vSyncCounter","_targetFrameInterval","_animate","requestAnimationFrame","setTimeout","_createSpriteMaterial","_createSpriteMaskMaterial","whitePixel","whiteTexture2D","whiteTextureCube","PositiveX","NegativeX","PositiveY","NegativeY","PositiveZ","NegativeZ","createEntity","pause","cancelAnimationFrame","clearTimeout","resume","time","run","shaderProgramPools","cameras","sort","camera1","camera2","priority","cameraEntity","render","Transparent","SystemInfo","_isIos","ua","userAgent","toLocaleLowerCase","devicePixelRatio","EngineFeature","preLoad","preTick","currentScene","postTick","shutdown","Script","onAwake","onEnable","onTriggerEnter","other","onTriggerStay","onTriggerExit","onPointerDown","onPointerUp","onPointerClick","onPointerEnter","onPointerExit","onPointerDrag","onDisable","CameraClearFlags","passNum","RenderPass","renderTarget","replaceMaterial","renderOverride","clearFlags","clearColor","opaqueQueue","alphaTestQueue","transparentQueue","SpriteBatcher","preRenderer","curRenderer","checkBatchWithMask","leftMaskInteraction","maskManager","spriteElement","RenderQueue","_compareFromNearToFar","_renderSortId","_compareFromFarToNear","items","_spriteBatcher","renderCount","sceneData","cameraData","renderPassFlag","rendererData","materialData","switchProgram","switchRenderCount","compareFunc","_quickSort","from","to","_insertionSort","third_index","v0","v1","v2","c01","tmp","c02","c12","pivot","low_end","high_start","partition","order","top_elem","BasicRenderPipeline","_opaqueQueue","_transparentQueue","_alphaTestQueue","_defaultPass","_renderPassArray","_lastCanvasSize","addRenderPass","nameOrPass","renderPass","p1","p2","removeRenderPass","pass","getRenderPass","idx","cubeFace","_drawRenderPass","activeRenderTarget","clearRenderTarget","_drawSky","_drawBackgroundTexture","AlphaTest","MathTemp","tempMat4","tempVec4","tempVec3","tempVec2","DepthColor","_isOrthographic","_isProjMatSetting","_nearClipPlane","_farClipPlane","_fieldOfView","_orthographicSize","_isProjectionDirty","_isInvProjMatDirty","_isFrustumProjectDirty","_customAspectRatio","_renderTarget","_transform","_isViewMatrixDirty","_isInvViewProjDirty","_frustumViewChangeFlag","resetProjectionMatrix","_projMatChange","resetAspectRatio","worldToViewportPoint","nx","ny","nz","viewportToWorldPoint","invViewProjMat","_innerViewportToWorldPoint","viewportPointToRay","clipPoint","farPoint","_invViewProjMat","screenToViewportPoint","viewport","viewportToScreenPoint","worldToScreenPoint","screenToWorldPoint","screenPointToRay","viewportPoint","calculateFromMatrix","invW","_viewMatrixProperty","_projectionMatrixProperty","_vpMatrixProperty","_inverseViewMatrixProperty","_inverseProjectionMatrixProperty","inverseProjectionMatrix","_cameraPositionProperty","_viewport","_viewMatrix","_lastAspectSize","_projectionMatrix","aspectRatio","perspective","ortho","_inverseProjectionMatrix","BoundingFrustum","mimeType","json","gltf","mtl","prefab","txt","bin","png","webp","jpg","defaultRetryCount","defaultTimeout","defaultInterval","request","config","getMimeTypeFromUrl","realRequest","requestImage","requestRes","lastError","MultiExecutor","stop","img","Image","onerror","onabort","timeoutId","onload","crossOrigin","xhr","XMLHttpRequest","status","response","responseText","ontimeout","onprogress","loaded","open","withCredentials","credentials","responseType","headers","setRequestHeader","send","extname","execFunc","totalCount","interval","_currentCount","done","exec","Loader","AssetType","RenderFace","BlendMode","BaseMaterial","_renderFace","Front","_isTransparent","_blendMode","blendMode","_alphaCutoffProp","_alphaCutoffMacro","Double","Additive","BlinnPhongMaterial","_diffuseColorProp","_specularColorProp","_emissiveColorProp","_tilingOffsetProp","_shininessProp","_normalIntensityProp","baseColor","_baseTextureProp","specularColor","_specularTextureProp","emissiveColor","_emissiveTextureProp","_normalTextureProp","tilingOffset","PBRBaseMaterial","_baseColorProp","_normalTextureIntensityProp","_occlusionTextureIntensityProp","_occlusionTextureProp","PBRMaterial","_metallicProp","_roughnessProp","_metallicRoughnessTextureProp","PBRSpecularMaterial","_glossinessProp","_specularGlossinessTextureProp","UnlitMaterial","SpriteAtlas","getSprite","_sprites","_spriteNamesToIndex","getSprites","outSprites","_addSprite","Sprite","region","pixelsPerUnit","_assetID","_pixelsPerUnit","_atlasRotated","_region","Rect","_pivot","_atlasRegion","_atlasRegionOffset","DirtyFlag","_rectangleTriangles","_updatePositionsAndBounds","atlasRegion","atlasRegionOffset","regionX","regionY","regionW","regionH","pPUReciprocal","lx","ty","rx","by","textureW","textureH","realRenderW","realRenderH","blankLeft","blankTop","blankRight","blankBottom","oriWidth","oriHeight","_updateMesh","top","bottom","atlasRegionW","atlasRegionH","atlasRegionX","atlasRegionY","clamp","SpriteRenderer","_isWorldMatrixDirty","flipX","Flip","_cacheFlipX","_cacheFlipY","flipXChange","flipYChange","MaskInteraction","_updateStencilState","spriteElementPool","_customLocalBounds","_customRootEntity","_maskInteraction","compare","VisibleInsideMask","_color","_flipX","_flipY","_maskLayer","AnimationClipCurveBinding","relativePath","curve","AnimationProperty","Motion","AnimationClip","_curveBindings","_events","addEvent","clearEvents","addCurveBinding","Rotation","Scale","BlendShapeWeights","curveBinding","clearCurveBindings","_sampleAnimation","curveData","evaluate","AnimatorUtils","scaleWeight","sX","sY","sZ","pow","scaleBlend","sa","sb","saw","_tempVector30","sbw","_tempVector31","sng","quaternionWeight","AnimatorLayerBlendingMode","LayerState","AnimationCurveOwner","crossCurveMark","crossCurveIndex","defaultValue","fixedPoseValue","saveDefaultValue","saveFixedPoseValue","AnimationEventHandler","handlers","AnimatorStateTransition","duration","exitTime","destinationState","WrapMode","AnimatorStatePlayData","state","stateData","frameTime","finished","clipTime","currentEventIndex","offsetFrameTime","clipStartTime","clipEndTime","wrapMode","Loop","AnimatorLayerData","animatorStateDataMap","srcPlayData","destPlayData","layerState","Standby","manuallyTransition","crossFadeTransition","switchPlayData","switchTemp","AnimatorStateData","curveOwners","eventHandlers","AnimatorStateInfo","layerIndex","CrossCurveData","curveOwner","srcCurveIndex","destCurveIndex","Animator","_animatorController","play","stateName","normalizedTimeOffset","_controllerUpdateFlag","_clearPlayData","animatorInfo","_getAnimatorStateInfo","_animatorInfo","clip","animatorLayerData","_getAnimatorLayerData","curState","_revertDefaultValue","animatorStateData","_getAnimatorStateData","Playing","_getDuration","_saveDefaultValues","crossFade","normalizedTransitionDuration","_crossFadeByTransition","speed","animatorController","layers","_updateLayer","stateMachine","findStateByName","animatorState","animatorStateDataCollection","_saveAnimatorStateData","_saveAnimatorEventHandlers","animationCureOwners","_animationCurveOwners","curves","targetEntity","propertyOwners","eventHandlerPool","_animationEventHandlerPool","scripts","scriptCount","eventHandler","funcName","functionName","handler","_clearCrossData","_crossCurveDataCollection","_crossCurveDataPool","_addCrossCurveData","crossCurveData","owner","curCurveIndex","nextCurveIndex","dataItem","_prepareCrossFading","_prepareSrcCrossData","_prepareDestCrossData","_prepareStandbyCrossFading","_prepareFixedPoseCrossFading","saveFixed","_evaluateCurve","additive","baseValue","pos","_tempVector3","rot","_tempQuaternion","conjugate","divide","_animatorLayersData","firstLayer","blendingMode","animLayerData","crossFadeTransitionInfo","layerAdditive","layerWeight","_checkTransition","_updatePlayingState","FixedCrossFading","_updateCrossFadeFromPose","CrossFading","_updateCrossFade","playData","layerData","delta","lastClipTime","_fireAnimationEvents","_applyClipValueAdditive","_applyClipValue","crossCurveDataCollection","srcCurves","destState","destCurves","crossWeight","srcClipTime","destClipTime","srcValue","destValue","_applyCrossClipValue","_updateCrossFadeData","fixed","lerp","slerp","blendShapeWeights","additiveValue","transitions","transition","animatorStateInfo","crossState","playState","_fireSubAnimationEvents","curClipTime","parameter","_speed","AnimatorController","_layers","_layersMap","findLayerByName","_distributeUpdateFlag","removeLayer","theLayer","clearLayers","AnimatorControllerLayer","Override","AnimatorState","_clipStartTime","_clipEndTime","Infinity","_clip","_transitions","addTransition","removeTransition","clearTransitions","AnimatorStateMachine","states","_statesMap","addState","removeState","makeUniqueStateName","originName","InterpolableValueType","InterpolationType","AnimationCurve","interpolation","_valueSize","_valueType","_currentValue","_currentIndex","addKey","FloatArray","curIndex","nextIndex","curFrameTime","dur","Linear","_evaluateLinear","Step","_evaluateStep","CubicSpine","Hermite","_evaluateHermite","moveKey","removeKey","newLength","frameIndex","nextFrameIndex","curValue","nextValue","curKey","nextKey","t0","outTangent","t1","inTangent","p0","isFinite","t2","t3","tan0","tan1","Keyframe","InterpolableKeyframe","AnimationEvent","AnimatorConditionMode","SkyBoxMaterial","DirtyFlagType","ParticleRendererBlendMode","ParticleRenderer","_getRandom","random","props","_vertexStride","_vertexBuffer","_maxCount","_positionRandomness","_positionArray","_velocity","_velocityRandomness","_acceleration","_accelerationRandomness","_colorRandomness","_sizeRandomness","_alpha","_alphaRandomness","_startAngle","_startAngleRandomness","_rotateVelocity","_rotateVelocityRandomness","_lifetime","_startTimeRandomness","_isOnce","_onceTime","_isInit","_isStart","_updateDirtyFlag","_isRotateToVelocity","_isUseOriginColor","_isScaleByLifetime","_is2d","_isFadeIn","_isFadeOut","_playOnEnable","spriteSheet","_createMaterial","_updateBuffer","isUseOriginColor","is2d","isFadeOut","useUint32","_uint16VertexLimit","startIndex","_updateSingleBuffer","getRandom","k0","k1","k2","k3","Velocity","Acceleration","StartTime","LifeTime","Size","StartAngle","RotateVelocity","_updateSingleUv","q","ratio","VERT_SHADER","FRAG_SHADER","TrailMaterial","TrailRenderer","_stroke","_minSeg","_maxPointNum","_points","_pointStates","_strapPoints","_curPointNum","_prePointsNum","stroke","minSeg","lifetime","targetFrameRate","_initGeometry","mov","newIdx","appendNewPoint","lastPoint","_updateStrapVertices","_updateStrapCoords","TriangleStrip","points","vx","vy","vz","down","transformByQuat","dy","cross","perpVector","_projectOnPlane","acos","texDelta","_projectOnVector","n_p","cosine","intersectBox2Box","boxA","boxB","intersectSphere2Sphere","sphereA","sphereB","intersectSphere2Box","sphere","box","closestPoint","CollisionDetection","_colliderManager","_myCollider","_overlappedCollider","_sphere","_box","overlappedCollider","_updateWorldBox","_boxCollision","_getWorldSphere","_sphereCollision","boxCollider","_tempBox1","sphereCollider","_tempBox2","ACollider","Fog","EXP2Fog","_density","density","_densityProperty","LinearFog","_near","_far","near","far","_nearProperty","_farProperty","Probe","probeLayer","_oriCameraRenderTarget","_renderTargetSwap","_activeRenderTarget","_oriCameraCullingMask","onTextureChange","renderColorTexture","_reset","cacheTarget","cacheUp","cacheDir","CubeProbe","oriViewMatrix","_oriFieldOfView","_storeCamera","_setCamera","_restoreCamera","fieldOfView","LightShadow","_viewMatFromLightProperty","_projMatFromLightProperty","_shadowBiasProperty","bias","_shadowIntensityProperty","_shadowRadiusProperty","_shadowMapSizeProperty","mapSize","_shadowMapsProperty","clearMap","_mapSize","initShadowProjectionMatrix","fov","sqrt","appendData","viewStart","projectionStart","biasStart","intensityStart","radiusStart","mapSizeStart","mapStart","defineProperty","_enableShadow","shadow","_recieveShadow","_castShadow","ShadowMapMaterial","ShadowMapPass","queue","ShadowMaterial","ShadowPass","defaultRenderPass","shadowMapCount","lgt","enableShadow","ShadowFeature","_shadowPass","_shadowMapMaterial","addShadowPass","shadowMapPass","addShadowMapPass","updatePassRenderFlag","shadowMaterial","Layer30","Layer31","renderQueue","receiveShadow","recieveShadow","castShadow"],"mappings":"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"}