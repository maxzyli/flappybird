import { BoundingBox } from "@oasis-engine/math";
import { Component } from "./Component";
import { Material } from "./material/Material";
import { ShaderData } from "./shader/ShaderData";
/**
 * Renderable component.
 */
export declare abstract class Renderer extends Component {
    private static _localMatrixProperty;
    private static _worldMatrixProperty;
    private static _mvMatrixProperty;
    private static _mvpMatrixProperty;
    private static _mvInvMatrixProperty;
    private static _normalMatrixProperty;
    /** ShaderData related to renderer. */
    readonly shaderData: ShaderData;
    /** Whether it is clipped by the frustum, needs to be turned on camera.enableFrustumCulling. */
    isCulled: boolean;
    protected _overrideUpdate: boolean;
    protected _materials: Material[];
    private _transformChangeFlag;
    private _bounds;
    private _mvMatrix;
    private _mvpMatrix;
    private _mvInvMatrix;
    private _normalMatrix;
    private _materialsInstanced;
    /**
     * Material count.
     */
    get materialCount(): number;
    set materialCount(value: number);
    /**
     * The bounding volume of the renderer.
     */
    get bounds(): BoundingBox;
    /**
     * Get the first instance material.
     * @returns The first instance material
     */
    getInstanceMaterial(): Material | null;
    /**
     * Get the first instance material by index.
     * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.
     * @param index - Material index
     * @returns Instance material
     */
    getInstanceMaterial(index: number): Material | null;
    /**
     * Get the first material.
     * @returns The first material
     */
    getMaterial(): Material | null;
    /**
     * Get the first material by index.
     * @param index - Material index
     * @returns Material
     */
    getMaterial(index: number): Material | null;
    /**
     * Set the first material.
     * @param material - The first material
     */
    setMaterial(material: Material): void;
    /**
     * Set material by index.
     * @param index - Material index
     * @param material - The material
     */
    setMaterial(index: number, material: Material): void;
    /**
     * Get all instance materials.
     * @remarks Calling this function for the first time after the material is set will create an instance material to ensure that it is unique to the renderer.
     * @returns All instance materials
     */
    getInstanceMaterials(): Readonly<Material[]>;
    /**
     * Get all materials.
     * @returns All materials
     */
    getMaterials(): Readonly<Material[]>;
    /**
     * Set all materials.
     * @param materials - All materials
     */
    setMaterials(materials: Material[]): void;
    update(deltaTime: number): void;
    _onEnable(): void;
    _onDisable(): void;
    protected _updateBounds(worldBounds: BoundingBox): void;
    private _createInstanceMaterial;
}
