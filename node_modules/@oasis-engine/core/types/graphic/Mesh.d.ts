import { IPlatformPrimitive } from "@oasis-engine/design/types/renderingHardwareInterface/IPlatformPrimitive";
import { BoundingBox } from "@oasis-engine/math";
import { RefObject } from "../asset/RefObject";
import { Engine } from "../Engine";
import { MeshTopology } from "../graphic/enums/MeshTopology";
import { IndexBufferBinding } from "../graphic/IndexBufferBinding";
import { SubMesh } from "../graphic/SubMesh";
import { VertexBufferBinding } from "../graphic/VertexBufferBinding";
import { VertexElement } from "../graphic/VertexElement";
import { UpdateFlag } from "../UpdateFlag";
/**
 * Mesh.
 */
export declare abstract class Mesh extends RefObject {
    /** Name. */
    name: string;
    /** The bounding volume of the mesh. */
    readonly bounds: BoundingBox;
    _vertexElementMap: Record<string, VertexElement>;
    _glIndexType: number;
    _glIndexByteCount: number;
    _platformPrimitive: IPlatformPrimitive;
    private _subMeshes;
    private _updateFlagManager;
    /**
     * First sub-mesh. Rendered using the first material.
     */
    get subMesh(): SubMesh | null;
    /**
     * A collection of sub-mesh, each sub-mesh can be rendered with an independent material.
     */
    get subMeshes(): Readonly<SubMesh[]>;
    /**
     * Create mesh.
     * @param engine - Engine
     * @param name - Mesh name
     */
    constructor(engine: Engine, name?: string);
    /**
     * Add sub-mesh, each sub-mesh can correspond to an independent material.
     * @param subMesh - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer
     * @returns Sub-mesh
     */
    addSubMesh(subMesh: SubMesh): SubMesh;
    /**
     * Add sub-mesh, each sub-mesh can correspond to an independent material.
     * @param start - Start drawing offset, if the index buffer is set, it means the offset in the index buffer, if not set, it means the offset in the vertex buffer
     * @param count - Drawing count, if the index buffer is set, it means the count in the index buffer, if not set, it means the count in the vertex buffer
     * @param topology - Drawing topology, default is MeshTopology.Triangles
     * @returns Sub-mesh
     */
    addSubMesh(start: number, count: number, topology?: MeshTopology): SubMesh;
    /**
     * Remove sub-mesh.
     * @param subMesh - Sub-mesh needs to be removed
     */
    removeSubMesh(subMesh: SubMesh): void;
    /**
     * Clear all sub-mesh.
     */
    clearSubMesh(): void;
    /**
     * Register update flag, update flag will be true if the vertex element changes.
     * @returns Update flag
     */
    registerUpdateFlag(): UpdateFlag;
    /**
     * @override
     */
    _addRefCount(value: number): void;
    /**
     * @override
     * Destroy.
     */
    _onDestroy(): void;
    protected _setVertexElements(elements: VertexElement[]): void;
    protected _setVertexBufferBinding(index: number, binding: VertexBufferBinding): void;
    protected _setIndexBufferBinding(binding: IndexBufferBinding | null): void;
    private _clearVertexElements;
    private _addVertexElement;
}
