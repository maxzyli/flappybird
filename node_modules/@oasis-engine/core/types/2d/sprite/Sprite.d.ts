import { BoundingBox, Rect, Vector2, Vector4 } from "@oasis-engine/math";
import { RefObject } from "../../asset/RefObject";
import { Engine } from "../../Engine";
import { Texture2D } from "../../texture/Texture2D";
/**
 * 2D sprite.
 */
export declare class Sprite extends RefObject {
    private static _rectangleTriangles;
    /** The name of sprite. */
    name: string;
    private _pixelsPerUnit;
    private _texture;
    private _atlasRotated;
    private _region;
    private _pivot;
    private _atlasRegion;
    private _atlasRegionOffset;
    private _dirtyFlag;
    /**
     * The reference to the used texture.
     */
    get texture(): Texture2D;
    set texture(value: Texture2D);
    /**
     *  Bounding volume of the sprite.
     *  @remarks The returned bounds should be considered deep-read-only.
     */
    get bounds(): Readonly<BoundingBox>;
    /**
     * Is it rotated 90 degrees clockwise when packing.
     */
    get atlasRotated(): boolean;
    set atlasRotated(value: boolean);
    /**
     * The rectangle region of the original texture on its atlas texture, specified in normalized.
     */
    get atlasRegion(): Rect;
    set atlasRegion(value: Rect);
    /**
     * The rectangle region offset of the original texture on its atlas texture, specified in normalized.
     */
    get atlasRegionOffset(): Vector4;
    set atlasRegionOffset(value: Vector4);
    /**
     * Location of the sprite's center point in the rectangle region, specified in normalized.
     */
    get pivot(): Vector2;
    set pivot(value: Vector2);
    /**
     * The rectangle region of the sprite, specified in normalized.
     */
    get region(): Rect;
    set region(value: Rect);
    /**
     * The number of pixels in the sprite that correspond to one unit in world space.
     */
    get pixelsPerUnit(): number;
    set pixelsPerUnit(value: number);
    /**
     * Constructor a Sprite.
     * @param engine - Engine to which the sprite belongs
     * @param texture - Texture from which to obtain the Sprite
     * @param region - Rectangle region of the texture to use for the Sprite, specified in normalized
     * @param pivot - Sprite's pivot point relative to its graphic rectangle, specified in normalized
     * @param pixelsPerUnit - The number of pixels in the Sprite that correspond to one unit in world space
     * @param name - The name of Sprite
     */
    constructor(engine: Engine, texture?: Texture2D, region?: Rect, pivot?: Vector2, pixelsPerUnit?: number, name?: string);
    /**
     * @override
     */
    _onDestroy(): void;
    /**
     * Update positions and bounds.
     */
    private _updatePositionsAndBounds;
    /**
     * Update mesh.
     */
    private _updateMesh;
    private _isContainDirtyFlag;
    private _setDirtyFlagTrue;
    private _setDirtyFlagFalse;
}
