import { Engine } from "../Engine";
import { Shader } from "../shader";
import { BlendMode } from "./enums/BlendMode";
import { RenderFace } from "./enums/RenderFace";
import { Material } from "./Material";
export declare class BaseMaterial extends Material {
    private static _alphaCutoffMacro;
    private static _alphaCutoffProp;
    private _renderFace;
    private _isTransparent;
    private _blendMode;
    /**
     * Is this material transparent.
     * @remarks
     * If material is transparent, transparent blend mode will be affected by `blendMode`, default is `BlendMode.Normal`.
     */
    get isTransparent(): boolean;
    set isTransparent(value: boolean);
    /**
     * Alpha cutoff value.
     * @remarks
     * Fragments with alpha channel lower than cutoff value will be discarded.
     * `0` means no fragment will be discarded.
     */
    get alphaCutoff(): number;
    set alphaCutoff(value: number);
    /**
     * Set which face for render.
     */
    get renderFace(): RenderFace;
    set renderFace(value: RenderFace);
    /**
     * Alpha blend mode.
     * @remarks
     * Only take effect when `isTransparent` is `true`.
     */
    get blendMode(): BlendMode;
    set blendMode(value: BlendMode);
    /**
     * Create a BaseMaterial instance.
     * @param engine - Engine to which the material belongs
     * @param shader - Shader used by the material
     */
    constructor(engine: Engine, shader: Shader);
    /**
     * @override
     * Clone and return the instance.
     */
    clone(): BaseMaterial;
    /**
     * @override
     * Clone to the target material.
     * @param target - target material
     */
    cloneTo(target: BaseMaterial): void;
}
