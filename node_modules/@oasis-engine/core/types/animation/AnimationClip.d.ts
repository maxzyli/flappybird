import { Component } from "../Component";
import { Entity } from "../Entity";
import { AnimationClipCurveBinding } from "./AnimationClipCurveBinding";
import { AnimationCurve } from "./AnimationCurve";
import { AnimationEvent } from "./AnimationEvent";
import { Motion } from "./Motion";
/**
 * Stores keyframe based animations.
 */
export declare class AnimationClip extends Motion {
    readonly name: string;
    private _length;
    private _events;
    /**
     * Animation events for this animation clip.
     */
    get events(): Readonly<AnimationEvent[]>;
    /**
     * Animation curve bindings for this animation clip.
     */
    get curveBindings(): Readonly<AnimationClipCurveBinding[]>;
    /**
     * Animation length in seconds.
     */
    get length(): number;
    /**
     * @param name - The AnimationClip's name
     */
    constructor(name: string);
    /**
     * Adds an animation event to the clip.
     * @param event - The animation event
     */
    addEvent(event: AnimationEvent): void;
    /**
     * Clears all events from the clip.
     */
    clearEvents(): void;
    /**
     * Add curve binding for the clip.
     * @param relativePath - Path to the game object this curve applies to. The relativePath is formatted similar to a pathname, e.g. "/root/spine/leftArm"
     * @param type- The class type of the component that is animated
     * @param propertyName - The name to the property being animated
     * @param curve - The animation curve
     */
    addCurveBinding<T extends Component>(relativePath: string, type: new (entity: Entity) => T, propertyName: string, curve: AnimationCurve): void;
    /**
     * Clears all curve bindings from the clip.
     */
    clearCurveBindings(): void;
}
