import { AnimationClip } from "./AnimationClip";
import { AnimatorStateTransition } from "./AnimatorTransition";
import { WrapMode } from "./enums/WrapMode";
/**
 * States are the basic building blocks of a state machine. Each state contains a AnimationClip which will play while the character is in that state.
 */
export declare class AnimatorState {
    readonly name: string;
    /** The speed of the clip. 1 is normal speed, default 1. */
    speed: number;
    /** The wrap mode used in the state. */
    wrapMode: WrapMode;
    private _clipStartTime;
    private _clipEndTime;
    private _clip;
    private _transitions;
    /**
     * The transitions that are going out of the state.
     */
    get transitions(): Readonly<AnimatorStateTransition[]>;
    /**
     * Æ’The clip that is being played by this animator state.
     */
    get clip(): AnimationClip;
    set clip(clip: AnimationClip);
    /**
     * The clip start time the user set , default is 0.
     */
    get clipStartTime(): number;
    set clipStartTime(time: number);
    /**
     * The clip end time the user set , default is the clip duration.
     */
    get clipEndTime(): number;
    set clipEndTime(time: number);
    /**
     * @param name - The state's name
     */
    constructor(name: string);
    /**
     * Add an outgoing transition to the destination state.
     * @param transition - The transition
     */
    addTransition(transition: AnimatorStateTransition): void;
    /**
     * Remove a transition from the state.
     * @param transition - The transition
     */
    removeTransition(transition: AnimatorStateTransition): void;
    /**
     * Clears all transitions from the state.
     */
    clearTransitions(): void;
}
