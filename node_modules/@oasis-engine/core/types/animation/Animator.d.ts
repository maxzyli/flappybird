import { Component } from "../Component";
import { UpdateFlag } from "../UpdateFlag";
import { AnimatorController } from "./AnimatorController";
/**
 * The controller of the animation system.
 */
export declare class Animator extends Component {
    private static _tempVector3;
    private static _tempQuaternion;
    private static _animatorInfo;
    protected _animatorController: AnimatorController;
    protected _speed: number;
    protected _controllerUpdateFlag: UpdateFlag;
    private _animatorLayersData;
    private _crossCurveDataCollection;
    private _animationCurveOwners;
    private _crossCurveDataPool;
    private _animationEventHandlerPool;
    /**
     * The playback speed of the Animator, 1.0 is normal playback speed.
     */
    get speed(): number;
    set speed(value: number);
    /**
     * All layers from the AnimatorController which belongs this Animator.
     */
    get animatorController(): AnimatorController;
    set animatorController(animatorController: AnimatorController);
    /**
     * Play a state by name.
     * @param stateName - The state name
     * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name
     * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)
     */
    play(stateName: string, layerIndex?: number, normalizedTimeOffset?: number): void;
    /**
     * Create a cross fade from the current state to another state.
     * @param stateName - The state name
     * @param normalizedTransitionDuration - The duration of the transition (normalized)
     * @param layerIndex - The layer index(default -1). If layer is -1, play the first state with the given state name
     * @param normalizedTimeOffset - The time offset between 0 and 1(default 0)
     */
    crossFade(stateName: string, normalizedTransitionDuration: number, layerIndex?: number, normalizedTimeOffset?: number): void;
    /**
     * Evaluates the animator component based on deltaTime.
     * @param deltaTime - The deltaTime when the animation update
     */
    update(deltaTime: number): void;
    private _getAnimatorStateInfo;
    private _saveDefaultValues;
    private _getAnimatorStateData;
    private _saveAnimatorStateData;
    private _saveAnimatorEventHandlers;
    private _clearCrossData;
    private _addCrossCurveData;
    private _prepareCrossFading;
    private _prepareStandbyCrossFading;
    private _prepareFixedPoseCrossFading;
    private _prepareSrcCrossData;
    private _prepareDestCrossData;
    private _evaluateCurve;
    private _getAnimatorLayerData;
    private _updateLayer;
    private _updatePlayingState;
    private _updateCrossFade;
    private _updateCrossFadeFromPose;
    private _updateCrossFadeData;
    private _applyCrossClipValue;
    private _applyClipValue;
    private _applyClipValueAdditive;
    private _revertDefaultValue;
    private _checkTransition;
    private _crossFadeByTransition;
    private _fireAnimationEvents;
    private _fireSubAnimationEvents;
    private _clearPlayData;
}
