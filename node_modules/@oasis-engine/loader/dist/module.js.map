{"version":3,"file":"module.js","sources":["../src/BufferLoader.ts","../src/gltf/Schema.ts","../src/gltf/GLTFUtil.ts","../src/gltf/parser/Parser.ts","../src/gltf/parser/AnimationParser.ts","../src/gltf/parser/BufferParser.ts","../src/gltf/parser/EntityParser.ts","../src/gltf/parser/MaterialParser.ts","../src/gltf/parser/MeshParser.ts","../src/gltf/parser/SceneParser.ts","../src/gltf/parser/SkinParser.ts","../src/gltf/parser/TextureParser.ts","../src/gltf/parser/Validator.ts","../src/gltf/GLTFParser.ts","../src/gltf/GLTFResource.ts","../src/GLTFLoader.ts","../src/JSONLoader.ts","../src/compressed-texture/KhronosTextureContainer.ts","../src/compressed-texture/index.ts","../src/KTXCubeLoader.ts","../src/KTXLoader.ts","../src/Texture2DLoader.ts","../src/TextureCubeLoader.ts","../src/SpriteAtlasLoader.ts","../src/gltf/extensions/ExtensionParser.ts","../src/gltf/extensions/KHR_draco_mesh_compression.ts","../src/gltf/extensions/KHR_lights_punctual.ts","../src/gltf/extensions/KHR_materials_pbrSpecularGlossiness.ts","../src/gltf/extensions/KHR_materials_unlit.ts","../src/gltf/extensions/KHR_materials_variants.ts","../src/gltf/extensions/KHR_mesh_quantization.ts","../src/gltf/extensions/KHR_texture_transform.ts","../src/scene-loader/GLTFModel.ts","../src/scene-loader/Model.ts","../src/scene-loader/plugins/PluginManager.ts","../src/scene-loader/temp.compatible.ts","../src/scene-loader/Parser.ts","../src/scene-loader/utils.ts","../src/scene-loader/resources/SchemaResource.ts","../src/scene-loader/resources/AnimationClipResource.ts","../src/scene-loader/resources/AnimatorControllerResource.ts","../src/scene-loader/resources/TextureResource.ts","../src/scene-loader/resources/BlinnPhongMaterialResource.ts","../src/scene-loader/resources/PBRMaterialResource.ts","../src/scene-loader/resources/PBRSpecularMaterialResource.ts","../src/scene-loader/resources/UnlitMaterialResource.ts","../src/scene-loader/resources/GLTFResource.ts","../src/scene-loader/resources/ScriptResource.ts","../src/scene-loader/resources/SpriteResource.ts","../src/scene-loader/resources/TextureCubeMapResource.ts","../src/scene-loader/resources/BaseResource.ts","../src/scene-loader/AbilityManager.ts","../src/scene-loader/NodeManager.ts","../src/scene-loader/SceneManager.ts","../src/scene-loader/resources/SpriteAtlasResource.ts","../src/scene-loader/ResourceManager.ts","../src/scene-loader/Oasis.ts"],"sourcesContent":["import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@oasis-engine/core\";\n\nfunction isBase64(url) {\n  return /^data:(.+?);base64,/.test(url);\n}\n@resourceLoader(AssetType.Buffer, [\"bin\", \"r3bin\"], false)\nclass BufferLoader extends Loader<ArrayBuffer> {\n  load(item: LoadItem): AssetPromise<ArrayBuffer> {\n    const url = item.url;\n    if (isBase64(url)) {\n      return new AssetPromise((resolve) => {\n        const base64Str = url.slice(13 + RegExp.$1.length);\n        const result = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));\n        resolve(result.buffer);\n      });\n    }\n    return this.request(url, {\n      ...item,\n      type: \"arraybuffer\"\n    });\n  }\n}\n","/**\n * Module for glTF 2.0 Interface\n */\n\nimport { MeshTopology } from \"@oasis-engine/core\";\n\n/**\n * The datatype of the components in the attribute\n */\nexport enum AccessorComponentType {\n  /**\n   * Byte\n   */\n  BYTE = 5120,\n  /**\n   * Unsigned Byte\n   */\n  UNSIGNED_BYTE = 5121,\n  /**\n   * Short\n   */\n  SHORT = 5122,\n  /**\n   * Unsigned Short\n   */\n  UNSIGNED_SHORT = 5123,\n  /**\n   * Unsigned Int\n   */\n  UNSIGNED_INT = 5125,\n  /**\n   * Float\n   */\n  FLOAT = 5126\n}\n\n/**\n * Specifies if the attirbute is a scalar, vector, or matrix\n */\nexport enum AccessorType {\n  /**\n   * Scalar\n   */\n  SCALAR = \"SCALAR\",\n  /**\n   * Vector2\n   */\n  VEC2 = \"VEC2\",\n  /**\n   * Vector3\n   */\n  VEC3 = \"VEC3\",\n  /**\n   * Vector4\n   */\n  VEC4 = \"VEC4\",\n  /**\n   * Matrix2x2\n   */\n  MAT2 = \"MAT2\",\n  /**\n   * Matrix3x3\n   */\n  MAT3 = \"MAT3\",\n  /**\n   * Matrix4x4\n   */\n  MAT4 = \"MAT4\"\n}\n\n/**\n * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n */\nexport enum AnimationChannelTargetPath {\n  /**\n   * Translation\n   */\n  TRANSLATION = \"translation\",\n  /**\n   * Rotation\n   */\n  ROTATION = \"rotation\",\n  /**\n   * Scale\n   */\n  SCALE = \"scale\",\n  /**\n   * Weights\n   */\n  WEIGHTS = \"weights\"\n}\n\n/**\n * Interpolation algorithm\n */\nexport enum AnimationSamplerInterpolation {\n  /**\n   * The animated values are linearly interpolated between keyframes\n   */\n  Linear = \"LINEAR\",\n  /**\n   * The animated values remain constant to the output of the first keyframe, until the next keyframe\n   */\n  Step = \"STEP\",\n  /**\n   * The animation's interpolation is computed using a cubic spline with specified tangents\n   */\n  CubicSpine = \"CUBICSPLINE\"\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport enum CameraType {\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  PERSPECTIVE = \"perspective\",\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  ORTHOGRAPHIC = \"orthographic\"\n}\n\n/**\n * The mime-type of the image\n */\nexport enum ImageMimeType {\n  /**\n   * JPEG Mime-type\n   */\n  JPEG = \"image/jpeg\",\n  /**\n   * PNG Mime-type\n   */\n  PNG = \"image/png\"\n}\n\n/**\n * The alpha rendering mode of the material\n */\nexport enum MaterialAlphaMode {\n  /**\n   * The alpha value is ignored and the rendered output is fully opaque\n   */\n  OPAQUE = \"OPAQUE\",\n  /**\n   * The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value\n   */\n  MASK = \"MASK\",\n  /**\n   * The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)\n   */\n  BLEND = \"BLEND\"\n}\n\n/**\n * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n */\nexport enum TextureMagFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729\n}\n\n/**\n * Minification filter.  All valid values correspond to WebGL enums\n */\nexport enum TextureMinFilter {\n  /**\n   * Nearest\n   */\n  NEAREST = 9728,\n  /**\n   * Linear\n   */\n  LINEAR = 9729,\n  /**\n   * Nearest Mip-Map Nearest\n   */\n  NEAREST_MIPMAP_NEAREST = 9984,\n  /**\n   * Linear Mipmap Nearest\n   */\n  LINEAR_MIPMAP_NEAREST = 9985,\n  /**\n   * Nearest Mipmap Linear\n   */\n  NEAREST_MIPMAP_LINEAR = 9986,\n  /**\n   * Linear Mipmap Linear\n   */\n  LINEAR_MIPMAP_LINEAR = 9987\n}\n\n/**\n * S (U) wrapping mode.  All valid values correspond to WebGL enums\n */\nexport enum TextureWrapMode {\n  /**\n   * Clamp to Edge\n   */\n  CLAMP_TO_EDGE = 33071,\n  /**\n   * Mirrored Repeat\n   */\n  MIRRORED_REPEAT = 33648,\n  /**\n   * Repeat\n   */\n  REPEAT = 10497\n}\n\n/**\n * glTF Property\n */\nexport interface IProperty {\n  /**\n   * Dictionary object with extension-specific objects\n   */\n  extensions?: {\n    [key: string]: any;\n  };\n  /**\n   * Application-Specific data\n   */\n  extras?: any;\n}\n\n/**\n * glTF Child of Root Property\n */\nexport interface IChildRootProperty extends IProperty {\n  /**\n   * The user-defined name of this object\n   */\n  name?: string;\n}\n\n/**\n * Indices of those attributes that deviate from their initialization value\n */\nexport interface IAccessorSparseIndices extends IProperty {\n  /**\n   * The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n  /**\n   * The indices data type.  Valid values correspond to WebGL enums: 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT), 5125 (UNSIGNED_INT)\n   */\n  componentType: AccessorComponentType;\n}\n\n/**\n * Array of size accessor.sparse.count times number of components storing the displaced accessor attributes pointed by accessor.sparse.indices\n */\nexport interface IAccessorSparseValues extends IProperty {\n  /**\n   * The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target\n   */\n  bufferView: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes. Must be aligned\n   */\n  byteOffset?: number;\n}\n\n/**\n * Sparse storage of attributes that deviate from their initialization value\n */\nexport interface IAccessorSparse extends IProperty {\n  /**\n   * The number of attributes encoded in this sparse accessor\n   */\n  count: number;\n  /**\n   * Index array of size count that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase\n   */\n  indices: IAccessorSparseIndices;\n  /**\n   * Array of size count times number of components, storing the displaced accessor attributes pointed by indices. Substituted values must have the same componentType and number of components as the base accessor\n   */\n  values: IAccessorSparseValues;\n}\n\n/**\n * A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's vertexAttribPointer() defines an attribute in a buffer\n */\nexport interface IAccessor extends IChildRootProperty {\n  /**\n   * The index of the bufferview\n   */\n  bufferView?: number;\n  /**\n   * The offset relative to the start of the bufferView in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The datatype of components in the attribute\n   */\n  componentType: AccessorComponentType;\n  /**\n   * Specifies whether integer data values should be normalized\n   */\n  normalized?: boolean;\n  /**\n   * The number of attributes referenced by this accessor\n   */\n  count: number;\n  /**\n   * Specifies if the attribute is a scalar, vector, or matrix\n   */\n  type: AccessorType;\n  /**\n   * Maximum value of each component in this attribute\n   */\n  max?: number[];\n  /**\n   * Minimum value of each component in this attribute\n   */\n  min?: number[];\n  /**\n   * Sparse storage of attributes that deviate from their initialization value\n   */\n  sparse?: IAccessorSparse;\n}\n\n/**\n * Targets an animation's sampler at a node's property\n */\nexport interface IAnimationChannel extends IProperty {\n  /**\n   * The index of a sampler in this animation used to compute the value for the target\n   */\n  sampler: number;\n  /**\n   * The index of the node and TRS property to target\n   */\n  target: IAnimationChannelTarget;\n}\n\n/**\n * The index of the node and TRS property that an animation channel targets\n */\nexport interface IAnimationChannelTarget extends IProperty {\n  /**\n   * The index of the node to target\n   */\n  node: number;\n  /**\n   * The name of the node's TRS property to modify, or the weights of the Morph Targets it instantiates\n   */\n  path: AnimationChannelTargetPath;\n}\n\n/**\n * Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n */\nexport interface IAnimationSampler extends IProperty {\n  /**\n   * The index of an accessor containing keyframe input values, e.g., time\n   */\n  input: number;\n  /**\n   * Interpolation algorithm\n   */\n  interpolation?: AnimationSamplerInterpolation;\n  /**\n   * The index of an accessor, containing keyframe output values\n   */\n  output: number;\n}\n\n/**\n * A keyframe animation\n */\nexport interface IAnimation extends IChildRootProperty {\n  /**\n   * An array of channels, each of which targets an animation's sampler at a node's property\n   */\n  channels: IAnimationChannel[];\n  /**\n   * An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target)\n   */\n  samplers: IAnimationSampler[];\n}\n\n/**\n * Metadata about the glTF asset\n */\nexport interface IAsset extends IChildRootProperty {\n  /**\n   * A copyright message suitable for display to credit the content creator\n   */\n  copyright?: string;\n  /**\n   * Tool that generated this glTF model.  Useful for debugging\n   */\n  generator?: string;\n  /**\n   * The glTF version that this asset targets\n   */\n  version: string;\n  /**\n   * The minimum glTF version that this asset targets\n   */\n  minVersion?: string;\n}\n\n/**\n * A buffer points to binary geometry, animation, or skins\n */\nexport interface IBuffer extends IChildRootProperty {\n  /**\n   * The uri of the buffer.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri\n   */\n  uri?: string;\n  /**\n   * The length of the buffer in bytes\n   */\n  byteLength: number;\n}\n\n/**\n * A view into a buffer generally representing a subset of the buffer\n */\nexport interface IBufferView extends IChildRootProperty {\n  /**\n   * The index of the buffer\n   */\n  buffer: number;\n  /**\n   * The offset into the buffer in bytes\n   */\n  byteOffset?: number;\n  /**\n   * The lenth of the bufferView in bytes\n   */\n  byteLength: number;\n  /**\n   * The stride, in bytes\n   */\n  byteStride?: number;\n}\n\n/**\n * An orthographic camera containing properties to create an orthographic projection matrix\n */\nexport interface ICameraOrthographic extends IProperty {\n  /**\n   * The floating-point horizontal magnification of the view. Must not be zero\n   */\n  xmag: number;\n  /**\n   * The floating-point vertical magnification of the view. Must not be zero\n   */\n  ymag: number;\n  /**\n   * The floating-point distance to the far clipping plane. zfar must be greater than znear\n   */\n  zfar: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A perspective camera containing properties to create a perspective projection matrix\n */\nexport interface ICameraPerspective extends IProperty {\n  /**\n   * The floating-point aspect ratio of the field of view\n   */\n  aspectRatio?: number;\n  /**\n   * The floating-point vertical field of view in radians\n   */\n  yfov: number;\n  /**\n   * The floating-point distance to the far clipping plane\n   */\n  zfar?: number;\n  /**\n   * The floating-point distance to the near clipping plane\n   */\n  znear: number;\n}\n\n/**\n * A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene\n */\nexport interface ICamera extends IChildRootProperty {\n  /**\n   * An orthographic camera containing properties to create an orthographic projection matrix\n   */\n  orthographic?: ICameraOrthographic;\n  /**\n   * A perspective camera containing properties to create a perspective projection matrix\n   */\n  perspective?: ICameraPerspective;\n  /**\n   * Specifies if the camera uses a perspective or orthographic projection\n   */\n  type: CameraType;\n}\n\n/**\n * Image data used to create a texture. Image can be referenced by URI or bufferView index. mimeType is required in the latter case\n */\nexport interface IImage extends IChildRootProperty {\n  /**\n   * The uri of the image.  Relative paths are relative to the .gltf file.  Instead of referencing an external file, the uri can also be a data-uri.  The image format must be jpg or png\n   */\n  uri?: string;\n  /**\n   * The image's MIME type\n   */\n  mimeType?: ImageMimeType;\n  /**\n   * The index of the bufferView that contains the image. Use this instead of the image's uri property\n   */\n  bufferView?: number;\n}\n\n/**\n * Material Normal Texture Info\n */\nexport interface IMaterialNormalTextureInfo extends ITextureInfo {\n  /**\n   * The scalar multiplier applied to each normal vector of the normal texture\n   */\n  scale?: number;\n}\n\n/**\n * Material Occlusion Texture Info\n */\nexport interface IMaterialOcclusionTextureInfo extends ITextureInfo {\n  /**\n   * A scalar multiplier controlling the amount of occlusion applied\n   */\n  strength?: number;\n}\n\n/**\n * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology\n */\nexport interface IMaterialPbrMetallicRoughness {\n  /**\n   * The material's base color factor\n   */\n  baseColorFactor?: number[];\n  /**\n   * The base color texture\n   */\n  baseColorTexture?: ITextureInfo;\n  /**\n   * The metalness of the material\n   */\n  metallicFactor?: number;\n  /**\n   * The roughness of the material\n   */\n  roughnessFactor?: number;\n  /**\n   * The metallic-roughness texture\n   */\n  metallicRoughnessTexture?: ITextureInfo;\n}\n\n/**\n * The material appearance of a primitive\n */\nexport interface IMaterial extends IChildRootProperty {\n  /**\n   * A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of pbrMetallicRoughness apply\n   */\n  pbrMetallicRoughness?: IMaterialPbrMetallicRoughness;\n  /**\n   * The normal map texture\n   */\n  normalTexture?: IMaterialNormalTextureInfo;\n  /**\n   * The occlusion map texture\n   */\n  occlusionTexture?: IMaterialOcclusionTextureInfo;\n  /**\n   * The emissive map texture\n   */\n  emissiveTexture?: ITextureInfo;\n  /**\n   * The RGB components of the emissive color of the material. These values are linear. If an emissiveTexture is specified, this value is multiplied with the texel values\n   */\n  emissiveFactor?: number[];\n  /**\n   * The alpha rendering mode of the material\n   */\n  alphaMode?: MaterialAlphaMode;\n  /**\n   * The alpha cutoff value of the material\n   */\n  alphaCutoff?: number;\n  /**\n   * Specifies whether the material is double sided\n   */\n  doubleSided?: boolean;\n}\n\n/**\n * Geometry to be rendered with the given material\n */\nexport interface IMeshPrimitive extends IProperty {\n  /**\n   * A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data\n   */\n  attributes: {\n    [name: string]: number;\n  };\n  /**\n   * The index of the accessor that contains the indices\n   */\n  indices?: number;\n  /**\n   * The index of the material to apply to this primitive when rendering\n   */\n  material?: number;\n  /**\n   * The type of primitives to render. All valid values correspond to WebGL enums\n   */\n  mode?: MeshTopology;\n  /**\n   * An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only POSITION, NORMAL, and TANGENT supported) to their deviations in the Morph Target\n   */\n  targets?: {\n    [name: string]: number;\n  }[];\n}\n\n/**\n * A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene\n */\nexport interface IMesh extends IChildRootProperty {\n  /**\n   * An array of primitives, each defining geometry to be rendered with a material\n   */\n  primitives: IMeshPrimitive[];\n  /**\n   * Array of weights to be applied to the Morph Targets\n   */\n  weights?: number[];\n}\n\n/**\n * A node in the node hierarchy\n */\nexport interface INode extends IChildRootProperty {\n  /**\n   * The index of the camera referenced by this node\n   */\n  camera?: number;\n  /**\n   * The indices of this node's children\n   */\n  children?: number[];\n  /**\n   * The index of the skin referenced by this node\n   */\n  skin?: number;\n  /**\n   * A floating-point 4x4 transformation matrix stored in column-major order\n   */\n  matrix?: number[];\n  /**\n   * The index of the mesh in this node\n   */\n  mesh?: number;\n  /**\n   * The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar\n   */\n  rotation?: number[];\n  /**\n   * The node's non-uniform scale, given as the scaling factors along the x, y, and z axes\n   */\n  scale?: number[];\n  /**\n   * The node's translation along the x, y, and z axes\n   */\n  translation?: number[];\n  /**\n   * The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh\n   */\n  weights?: number[];\n}\n\n/**\n * Texture sampler properties for filtering and wrapping modes\n */\nexport interface ISampler extends IChildRootProperty {\n  /**\n   * Magnification filter.  Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR)\n   */\n  magFilter?: TextureMagFilter;\n  /**\n   * Minification filter.  All valid values correspond to WebGL enums\n   */\n  minFilter?: TextureMinFilter;\n  /**\n   * S (U) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapS?: TextureWrapMode;\n  /**\n   * T (V) wrapping mode.  All valid values correspond to WebGL enums\n   */\n  wrapT?: TextureWrapMode;\n}\n\n/**\n * The root nodes of a scene\n */\nexport interface IScene extends IChildRootProperty {\n  /**\n   * The indices of each root node\n   */\n  nodes: number[];\n}\n\n/**\n * Joints and matrices defining a skin\n */\nexport interface ISkin extends IChildRootProperty {\n  /**\n   * The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied\n   */\n  inverseBindMatrices?: number;\n  /**\n   * The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root\n   */\n  skeleton?: number;\n  /**\n   * Indices of skeleton nodes, used as joints in this skin.  The array length must be the same as the count property of the inverseBindMatrices accessor (when defined)\n   */\n  joints: number[];\n}\n\n/**\n * A texture and its sampler\n */\nexport interface ITexture extends IChildRootProperty {\n  /**\n   * The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used\n   */\n  sampler?: number;\n  /**\n   * The index of the image used by this texture\n   */\n  source: number;\n}\n\n/**\n * Reference to a texture\n */\nexport interface ITextureInfo extends IProperty {\n  /**\n   * The index of the texture\n   */\n  index: number;\n  /**\n   * The set index of texture's TEXCOORD attribute used for texture coordinate mapping\n   */\n  texCoord?: number;\n}\n\n/**\n * The root object for a glTF asset\n */\nexport interface IGLTF extends IProperty {\n  /**\n   * An array of accessors. An accessor is a typed view into a bufferView\n   */\n  accessors?: IAccessor[];\n  /**\n   * An array of keyframe animations\n   */\n  animations?: IAnimation[];\n  /**\n   * Metadata about the glTF asset\n   */\n  asset: IAsset;\n  /**\n   * An array of buffers.  A buffer points to binary geometry, animation, or skins\n   */\n  buffers?: IBuffer[];\n  /**\n   * An array of bufferViews.  A bufferView is a view into a buffer generally representing a subset of the buffer\n   */\n  bufferViews?: IBufferView[];\n  /**\n   * An array of cameras\n   */\n  cameras?: ICamera[];\n  /**\n   * Names of glTF extensions used somewhere in this asset\n   */\n  extensionsUsed?: string[];\n  /**\n   * Names of glTF extensions required to properly load this asset\n   */\n  extensionsRequired?: string[];\n  /**\n   * An array of images.  An image defines data used to create a texture\n   */\n  images?: IImage[];\n  /**\n   * An array of materials.  A material defines the appearance of a primitive\n   */\n  materials?: IMaterial[];\n  /**\n   * An array of meshes.  A mesh is a set of primitives to be rendered\n   */\n  meshes?: IMesh[];\n  /**\n   * An array of nodes\n   */\n  nodes?: INode[];\n  /**\n   * An array of samplers.  A sampler contains properties for texture filtering and wrapping modes\n   */\n  samplers?: ISampler[];\n  /**\n   * The index of the default scene\n   */\n  scene?: number;\n  /**\n   * An array of scenes\n   */\n  scenes?: IScene[];\n  /**\n   * An array of skins.  A skin is defined by joints and matrices\n   */\n  skins?: ISkin[];\n  /**\n   * An array of textures\n   */\n  textures?: ITexture[];\n}\n","import { Vector3, Vector4, Vector2 } from \"@oasis-engine/math\";\nimport { IndexFormat, TypedArray, VertexElement, VertexElementFormat } from \"@oasis-engine/core\";\nimport { AccessorComponentType, AccessorType, IAccessor, IBufferView, IGLTF } from \"./Schema\";\n\n/**\n * @internal\n */\nexport class GLTFUtil {\n  public static floatBufferToVector2Array(buffer: Float32Array): Vector2[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector2>(bufferLen / 2);\n    for (let i = 0; i < bufferLen; i += 2) {\n      array[i / 2] = new Vector2(buffer[i], buffer[i + 1]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector3Array(buffer: Float32Array): Vector3[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector3>(bufferLen / 3);\n    for (let i = 0; i < bufferLen; i += 3) {\n      array[i / 3] = new Vector3(buffer[i], buffer[i + 1], buffer[i + 2]);\n    }\n    return array;\n  }\n\n  public static floatBufferToVector4Array(buffer: Float32Array): Vector4[] {\n    const bufferLen = buffer.length;\n    const array = new Array<Vector4>(bufferLen / 4);\n    for (let i = 0; i < bufferLen; i += 4) {\n      array[i / 4] = new Vector4(buffer[i], buffer[i + 1], buffer[i + 2], buffer[i + 3]);\n    }\n    return array;\n  }\n\n  /**\n   * Parse binary text for glb loader.\n   */\n  static decodeText(array: Uint8Array): string {\n    if (typeof TextDecoder !== \"undefined\") {\n      return new TextDecoder().decode(array);\n    }\n\n    // TextDecoder polyfill\n    let s = \"\";\n\n    for (let i = 0, il = array.length; i < il; i++) {\n      s += String.fromCharCode(array[i]);\n    }\n\n    return decodeURIComponent(encodeURIComponent(s));\n  }\n\n  /**\n   * Get the number of bytes occupied by accessor type.\n   */\n  static getAccessorTypeSize(accessorType: AccessorType): number {\n    switch (accessorType) {\n      case AccessorType.SCALAR:\n        return 1;\n      case AccessorType.VEC2:\n        return 2;\n      case AccessorType.VEC3:\n        return 3;\n      case AccessorType.VEC4:\n        return 4;\n      case AccessorType.MAT2:\n        return 4;\n      case AccessorType.MAT3:\n        return 9;\n      case AccessorType.MAT4:\n        return 16;\n    }\n  }\n\n  /**\n   * Get the TypedArray corresponding to the component type.\n   */\n  static getComponentType(componentType: AccessorComponentType) {\n    switch (componentType) {\n      case AccessorComponentType.BYTE:\n        return Int8Array;\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return Uint8Array;\n      case AccessorComponentType.SHORT:\n        return Int16Array;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return Uint16Array;\n      case AccessorComponentType.UNSIGNED_INT:\n        return Uint32Array;\n      case AccessorComponentType.FLOAT:\n        return Float32Array;\n    }\n  }\n\n  /**\n   * Get accessor data.\n   */\n  static getAccessorData(gltf: IGLTF, accessor: IAccessor, buffers: ArrayBuffer[]): TypedArray {\n    const bufferViews = gltf.bufferViews;\n    const bufferView = bufferViews[accessor.bufferView];\n    const arrayBuffer = buffers[bufferView.buffer];\n    const accessorByteOffset = accessor.hasOwnProperty(\"byteOffset\") ? accessor.byteOffset : 0;\n    const bufferViewByteOffset = bufferView.hasOwnProperty(\"byteOffset\") ? bufferView.byteOffset : 0;\n    const byteOffset = accessorByteOffset + bufferViewByteOffset;\n    const accessorTypeSize = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const length = accessorTypeSize * accessor.count;\n    const byteStride = bufferView.byteStride ?? 0;\n    const arrayType = GLTFUtil.getComponentType(accessor.componentType);\n    let uint8Array;\n    if (byteStride) {\n      const accessorByteSize = accessorTypeSize * arrayType.BYTES_PER_ELEMENT;\n      uint8Array = new Uint8Array(accessor.count * accessorByteSize);\n      const originalBufferView = new Uint8Array(arrayBuffer, bufferViewByteOffset, bufferView.byteLength);\n      for (let i = 0; i < accessor.count; i++) {\n        for (let j = 0; j < accessorByteSize; j++) {\n          uint8Array[i * accessorByteSize + j] = originalBufferView[i * byteStride + accessorByteOffset + j];\n        }\n      }\n    } else {\n      uint8Array = new Uint8Array(arrayBuffer.slice(byteOffset, byteOffset + length * arrayType.BYTES_PER_ELEMENT));\n    }\n\n    const typedArray = new arrayType(uint8Array.buffer);\n\n    if (accessor.sparse) {\n      const { count, indices, values } = accessor.sparse;\n      const indicesBufferView = bufferViews[indices.bufferView];\n      const valuesBufferView = bufferViews[values.bufferView];\n      const indicesArrayBuffer = buffers[indicesBufferView.buffer];\n      const valuesArrayBuffer = buffers[valuesBufferView.buffer];\n      const indicesByteOffset = (indices.byteOffset ?? 0) + (indicesBufferView.byteOffset ?? 0);\n      const indicesByteLength = indicesBufferView.byteLength;\n      const valuesByteOffset = (values.byteOffset ?? 0) + (valuesBufferView.byteOffset ?? 0);\n      const valuesByteLength = valuesBufferView.byteLength;\n\n      const indicesType = GLTFUtil.getComponentType(indices.componentType);\n      const indicesArray = new indicesType(\n        indicesArrayBuffer,\n        indicesByteOffset,\n        indicesByteLength / indicesType.BYTES_PER_ELEMENT\n      );\n      const valuesArray = new arrayType(\n        valuesArrayBuffer,\n        valuesByteOffset,\n        valuesByteLength / arrayType.BYTES_PER_ELEMENT\n      );\n\n      for (let i = 0; i < count; i++) {\n        const replaceIndex = indicesArray[i];\n        for (let j = 0; j < accessorTypeSize; j++) {\n          typedArray[replaceIndex * accessorTypeSize + j] = valuesArray[i * accessorTypeSize + j];\n        }\n      }\n    }\n\n    return typedArray;\n  }\n\n  static getBufferViewData(bufferView: IBufferView, buffers: ArrayBuffer[]): ArrayBuffer {\n    const { buffer, byteOffset = 0, byteLength } = bufferView;\n    const arrayBuffer = buffers[buffer];\n\n    return arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n  }\n\n  static getVertexStride(gltf: IGLTF, accessor: IAccessor): number {\n    const stride = gltf.bufferViews[accessor.bufferView ?? 0].byteStride;\n    if (stride) {\n      return stride;\n    }\n\n    const size = GLTFUtil.getAccessorTypeSize(accessor.type);\n    const componentType = GLTFUtil.getComponentType(accessor.componentType);\n    return size * componentType.BYTES_PER_ELEMENT;\n  }\n\n  static createVertexElement(semantic: string, accessor: IAccessor, index: number): VertexElement {\n    const size = GLTFUtil.getAccessorTypeSize(accessor.type);\n    return new VertexElement(\n      semantic,\n      0,\n      GLTFUtil.getElementFormat(accessor.componentType, size, accessor.normalized),\n      index\n    );\n  }\n\n  static getIndexFormat(type: AccessorComponentType): IndexFormat {\n    switch (type) {\n      case AccessorComponentType.UNSIGNED_BYTE:\n        return IndexFormat.UInt8;\n      case AccessorComponentType.UNSIGNED_SHORT:\n        return IndexFormat.UInt16;\n      case AccessorComponentType.UNSIGNED_INT:\n        return IndexFormat.UInt32;\n    }\n  }\n\n  static getElementFormat(type: AccessorComponentType, size: number, normalized: boolean = false): VertexElementFormat {\n    if (type == AccessorComponentType.FLOAT) {\n      switch (size) {\n        case 1:\n          return VertexElementFormat.Float;\n        case 2:\n          return VertexElementFormat.Vector2;\n        case 3:\n          return VertexElementFormat.Vector3;\n        case 4:\n          return VertexElementFormat.Vector4;\n      }\n    }\n\n    if (type == AccessorComponentType.SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedShort2 : VertexElementFormat.Short2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedShort4 : VertexElementFormat.Short4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_SHORT) {\n      switch (size) {\n        case 2:\n          return normalized ? VertexElementFormat.NormalizedUShort2 : VertexElementFormat.UShort2;\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUShort4 : VertexElementFormat.UShort4;\n      }\n    }\n\n    if (type == AccessorComponentType.BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedByte4 : VertexElementFormat.Byte4;\n      }\n    }\n\n    if (type == AccessorComponentType.UNSIGNED_BYTE) {\n      switch (size) {\n        case 2:\n        case 3:\n        case 4:\n          return normalized ? VertexElementFormat.NormalizedUByte4 : VertexElementFormat.UByte4;\n      }\n    }\n  }\n\n  /**\n   * Load image buffer\n   */\n  static loadImageBuffer(imageBuffer: ArrayBuffer, type: string): Promise<HTMLImageElement> {\n    return new Promise((resolve, reject) => {\n      const blob = new window.Blob([imageBuffer], { type });\n      const img = new Image();\n      img.src = URL.createObjectURL(blob);\n\n      img.crossOrigin = \"anonymous\";\n      img.onerror = function () {\n        reject(new Error(\"Failed to load image buffer\"));\n      };\n      img.onload = function () {\n        // Call requestAnimationFrame to avoid iOS's bug.\n        requestAnimationFrame(() => {\n          resolve(img);\n          img.onload = null;\n          img.onerror = null;\n          img.onabort = null;\n        });\n      };\n    });\n  }\n\n  static isAbsoluteUrl(url: string): boolean {\n    return /^(?:http|blob|data:|\\/)/.test(url);\n  }\n\n  static parseRelativeUrl(baseUrl: string, relativeUrl: string): string {\n    if (GLTFUtil.isAbsoluteUrl(relativeUrl)) {\n      return relativeUrl;\n    }\n\n    const char0 = relativeUrl.charAt(0);\n    if (char0 === \".\") {\n      return GLTFUtil._formatRelativePath(relativeUrl + relativeUrl);\n    }\n\n    return baseUrl.substring(0, baseUrl.lastIndexOf(\"/\") + 1) + relativeUrl;\n  }\n\n  /**\n   * Parse the glb format.\n   */\n  static parseGLB(glb: ArrayBuffer): {\n    gltf: IGLTF;\n    buffers: ArrayBuffer[];\n  } {\n    const UINT32_LENGTH = 4;\n    const GLB_HEADER_MAGIC = 0x46546c67; // 'glTF'\n    const GLB_HEADER_LENGTH = 12;\n    const GLB_CHUNK_TYPES = { JSON: 0x4e4f534a, BIN: 0x004e4942 };\n\n    const dataView = new DataView(glb);\n\n    // read header\n    const header = {\n      magic: dataView.getUint32(0, true),\n      version: dataView.getUint32(UINT32_LENGTH, true),\n      length: dataView.getUint32(2 * UINT32_LENGTH, true)\n    };\n\n    if (header.magic !== GLB_HEADER_MAGIC) {\n      console.error(\"Invalid glb magic number. Expected 0x46546C67, found 0x\" + header.magic.toString(16));\n      return null;\n    }\n\n    // read main data\n    let chunkLength = dataView.getUint32(GLB_HEADER_LENGTH, true);\n    let chunkType = dataView.getUint32(GLB_HEADER_LENGTH + UINT32_LENGTH, true);\n\n    // read glTF json\n    if (chunkType !== GLB_CHUNK_TYPES.JSON) {\n      console.error(\"Invalid glb chunk type. Expected 0x4E4F534A, found 0x\" + chunkType.toString(16));\n      return null;\n    }\n\n    const glTFData = new Uint8Array(glb, GLB_HEADER_LENGTH + 2 * UINT32_LENGTH, chunkLength);\n    const gltf: IGLTF = JSON.parse(GLTFUtil.decodeText(glTFData));\n\n    // read all buffers\n    const buffers: ArrayBuffer[] = [];\n    let byteOffset = GLB_HEADER_LENGTH + 2 * UINT32_LENGTH + chunkLength;\n\n    while (byteOffset < header.length) {\n      chunkLength = dataView.getUint32(byteOffset, true);\n      chunkType = dataView.getUint32(byteOffset + UINT32_LENGTH, true);\n\n      if (chunkType !== GLB_CHUNK_TYPES.BIN) {\n        console.error(\"Invalid glb chunk type. Expected 0x004E4942, found 0x\" + chunkType.toString(16));\n        return null;\n      }\n\n      const currentOffset = byteOffset + 2 * UINT32_LENGTH;\n      const buffer = glb.slice(currentOffset, currentOffset + chunkLength);\n      buffers.push(buffer);\n\n      byteOffset += chunkLength + 2 * UINT32_LENGTH;\n    }\n\n    return {\n      gltf,\n      buffers\n    };\n  }\n\n  private static _formatRelativePath(value: string): string {\n    const parts = value.split(\"/\");\n    for (let i = 0, n = parts.length; i < n; i++) {\n      if (parts[i] == \"..\") {\n        parts.splice(i - 1, 2);\n        i -= 2;\n      }\n    }\n    return parts.join(\"/\");\n  }\n}\n","import { EngineObject } from \"@oasis-engine/core\";\nimport { ExtensionParser } from \"../extensions/ExtensionParser\";\nimport { ExtensionSchema } from \"../extensions/Schema\";\nimport { GLTFResource } from \"../GLTFResource\";\n\nexport abstract class Parser {\n  private static _extensionParsers: Record<string, ExtensionParser[]> = {};\n\n  static parseEngineResource(\n    extensionName: string,\n    extensionSchema: ExtensionSchema,\n    parseResource: EngineObject,\n    context: GLTFResource,\n    ...extra\n  ): void {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      for (let i = 0; i < parsers.length; i++) {\n        parsers[i].parseEngineResource(extensionSchema, parseResource, context, ...extra);\n      }\n    }\n  }\n\n  static createEngineResource<T extends EngineObject>(\n    extensionName: string,\n    extensionSchema: ExtensionSchema,\n    context: GLTFResource,\n    ...extra\n  ): T | Promise<T> {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      return parsers[0].createEngineResource(extensionSchema, context, ...extra) as T;\n    }\n  }\n\n  static hasExtensionParser(extensionName: string): boolean {\n    const parsers = Parser._extensionParsers[extensionName];\n    return !!parsers?.length;\n  }\n\n  static initialize(extensionName: string) {\n    const parsers = Parser._extensionParsers[extensionName];\n\n    if (parsers?.length) {\n      for (let i = 0; i < parsers.length; i++) {\n        parsers[i].initialize();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static _addExtensionParser(extensionName: string, extensionParser: ExtensionParser) {\n    if (!Parser._extensionParsers[extensionName]) {\n      Parser._extensionParsers[extensionName] = [];\n    }\n    Parser._extensionParsers[extensionName].push(extensionParser);\n  }\n\n  abstract parse(context: GLTFResource): void | Promise<void>;\n}\n\n/**\n * Declare ExtensionParser's decorator.\n * @param extensionName - Extension name\n */\nexport function registerExtension(extensionName: string) {\n  return (parser: new () => ExtensionParser) => {\n    const extensionParser = new parser();\n\n    Parser._addExtensionParser(extensionName, extensionParser);\n  };\n}\n","import {\n  AnimationClip,\n  AnimationCurve,\n  Component,\n  Entity,\n  InterpolableKeyframe,\n  InterpolationType,\n  SkinnedMeshRenderer,\n  Transform,\n  TypedArray\n} from \"@oasis-engine/core\";\nimport { Quaternion, Vector2, Vector3, Vector4 } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { AccessorType, AnimationChannelTargetPath, AnimationSamplerInterpolation, IAnimationChannel } from \"../Schema\";\nimport { Parser } from \"./Parser\";\n\nexport class AnimationParser extends Parser {\n  parse(context: GLTFResource): void {\n    const { gltf, buffers, entities } = context;\n    const { animations, accessors } = gltf;\n    if (!animations) {\n      return;\n    }\n    const animationClipCount = animations.length;\n    const animationClips = new Array<AnimationClip>(animationClipCount);\n    const animationsIndices = new Array<{\n      name: string;\n      index: number;\n    }>(animationClipCount);\n\n    for (let i = 0; i < animationClipCount; i++) {\n      const gltfAnimation = animations[i];\n      const { channels, samplers, name = `AnimationClip${i}` } = gltfAnimation;\n      const animationClip = new AnimationClip(name);\n      const sampleDataCollection = new Array<SampleData>();\n\n      let duration = -1;\n\n      // parse samplers\n      for (let i = 0; i < samplers.length; i++) {\n        const gltfSampler = samplers[i];\n        const inputAccessor = accessors[gltfSampler.input];\n        const outputAccessor = accessors[gltfSampler.output];\n\n        const input = GLTFUtil.getAccessorData(gltf, inputAccessor, buffers);\n        const output = GLTFUtil.getAccessorData(gltf, outputAccessor, buffers);\n        const outputAccessorSize = output.length / input.length;\n\n        const interpolation = gltfSampler.interpolation ?? AnimationSamplerInterpolation.Linear;\n        let samplerInterpolation: InterpolationType;\n        switch (interpolation) {\n          case AnimationSamplerInterpolation.CubicSpine:\n            samplerInterpolation = InterpolationType.CubicSpine;\n            break;\n          case AnimationSamplerInterpolation.Step:\n            samplerInterpolation = InterpolationType.Step;\n            break;\n          case AnimationSamplerInterpolation.Linear:\n            samplerInterpolation = InterpolationType.Linear;\n            break;\n        }\n        const maxTime = input[input.length - 1];\n        if (maxTime > duration) {\n          duration = maxTime;\n        }\n\n        sampleDataCollection.push({\n          type: outputAccessor.type,\n          interpolation: samplerInterpolation,\n          input,\n          output,\n          outputSize: outputAccessorSize\n        });\n      }\n\n      for (let i = 0; i < channels.length; i++) {\n        const gltfChannel = channels[i];\n        const { target } = gltfChannel;\n\n        const channelTargetEntity = entities[target.node];\n        let relativePath = \"\";\n        let entity = channelTargetEntity;\n        while (entity.parent) {\n          relativePath = relativePath === \"\" ? `${entity.name}` : `${entity.name}/${relativePath}`;\n          entity = entity.parent;\n        }\n\n        let compType: new (entity: Entity) => Component;\n        let propertyName: string;\n        switch (target.path) {\n          case AnimationChannelTargetPath.TRANSLATION:\n            compType = Transform;\n            propertyName = \"position\";\n            break;\n          case AnimationChannelTargetPath.ROTATION:\n            compType = Transform;\n            propertyName = \"rotation\";\n            break;\n          case AnimationChannelTargetPath.SCALE:\n            compType = Transform;\n            propertyName = \"scale\";\n            break;\n          case AnimationChannelTargetPath.WEIGHTS:\n            compType = SkinnedMeshRenderer;\n            propertyName = \"blendShapeWeights\";\n            break;\n          default:\n        }\n\n        const curve = this._addCurve(gltfChannel, sampleDataCollection);\n        animationClip.addCurveBinding(relativePath, compType, propertyName, curve);\n      }\n\n      animationClips[i] = animationClip;\n      animationsIndices[i] = {\n        name,\n        index: i\n      };\n    }\n    context.animations = animationClips;\n    // @ts-ignore for editor\n    context._animationsIndices = animationsIndices;\n  }\n\n  private _addCurve(gltfChannel: IAnimationChannel, sampleDataCollection: SampleData[]): AnimationCurve {\n    const curve = new AnimationCurve();\n    const sampleData = sampleDataCollection[gltfChannel.sampler];\n    const { type, input, output, outputSize } = sampleData;\n\n    curve.interpolation = sampleData.interpolation;\n    for (let j = 0, n = input.length; j < n; j++) {\n      const offset = j * outputSize;\n      if (type === AccessorType.SCALAR) {\n        let keyframe =\n          outputSize > 1\n            ? new InterpolableKeyframe<Float32Array, Float32Array>()\n            : new InterpolableKeyframe<number, number>();\n        keyframe.time = input[j];\n        keyframe.inTangent = 0;\n        keyframe.outTangent = 0;\n        keyframe.value = outputSize > 1 ? <Float32Array>output.subarray(offset, offset + outputSize) : output[offset];\n        curve.addKey(keyframe);\n      }\n      if (type === AccessorType.VEC2) {\n        const keyframe = new InterpolableKeyframe<Vector2, Vector2>();\n        keyframe.time = input[j];\n        keyframe.value = new Vector2(output[offset], output[offset + 1]);\n        keyframe.inTangent = new Vector2();\n        keyframe.outTangent = new Vector2();\n        curve.addKey(keyframe);\n      }\n      if (type === AccessorType.VEC3) {\n        const keyframe = new InterpolableKeyframe<Vector3, Vector3>();\n        keyframe.time = input[j];\n        keyframe.value = new Vector3(output[offset], output[offset + 1], output[offset + 2]);\n        keyframe.inTangent = new Vector3();\n        keyframe.outTangent = new Vector3();\n        curve.addKey(keyframe);\n      }\n      if (type === AccessorType.VEC4) {\n        const keyframe = new InterpolableKeyframe<Vector4, Quaternion>();\n        keyframe.time = input[j];\n        keyframe.value = new Quaternion(output[offset], output[offset + 1], output[offset + 2], output[offset + 3]);\n        keyframe.inTangent = new Vector4();\n        keyframe.outTangent = new Vector4();\n        curve.addKey(keyframe);\n      }\n    }\n    return curve;\n  }\n}\n\ninterface SampleData {\n  type: AccessorType;\n  input: TypedArray;\n  output: TypedArray;\n  interpolation: InterpolationType;\n  outputSize: number;\n}\n","import { AssetType } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { IBuffer, IGLTF } from \"../Schema\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { Parser } from \"./Parser\";\n\nexport class BufferParser extends Parser {\n  parse(context: GLTFResource): Promise<void> {\n    const { url, engine } = context;\n\n    if (this._isGLB(url)) {\n      return engine.resourceManager\n        .load<ArrayBuffer>({\n          url,\n          type: AssetType.Buffer\n        })\n        .then(GLTFUtil.parseGLB)\n        .then(({ gltf, buffers }) => {\n          context.gltf = gltf;\n          context.buffers = buffers;\n        });\n    } else {\n      return engine.resourceManager\n        .load<IGLTF>({\n          url,\n          type: AssetType.JSON\n        })\n        .then((gltf: IGLTF) => {\n          context.gltf = gltf;\n          return Promise.all(\n            gltf.buffers.map((buffer: IBuffer) => {\n              return engine.resourceManager.load<ArrayBuffer>({\n                type: AssetType.Buffer,\n                url: GLTFUtil.parseRelativeUrl(url, buffer.uri)\n              });\n            })\n          ).then((buffers: ArrayBuffer[]) => {\n            context.buffers = buffers;\n          });\n        });\n    }\n  }\n\n  private _isGLB(url: string): boolean {\n    return url.substring(url.lastIndexOf(\".\") + 1) === \"glb\";\n  }\n}\n","import { Entity } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { Parser } from \"./Parser\";\n\nexport class EntityParser extends Parser {\n  /** @internal */\n  static _defaultName: String = \"_GLTF_ENTITY_\";\n\n  parse(context: GLTFResource): void {\n    const {\n      engine,\n      gltf: { nodes }\n    } = context;\n    if (!nodes) return;\n\n    const entities: Entity[] = [];\n\n    for (let i = 0; i < nodes.length; i++) {\n      const gltfNode = nodes[i];\n      const { matrix, translation, rotation, scale } = gltfNode;\n      const entity = new Entity(engine, gltfNode.name || `${EntityParser._defaultName}${i}`);\n\n      const { transform } = entity;\n      if (matrix) {\n        const localMatrix = transform.localMatrix;\n        localMatrix.setValueByArray(matrix);\n        transform.localMatrix = localMatrix;\n      } else {\n        if (translation) {\n          transform.setPosition(translation[0], translation[1], translation[2]);\n        }\n        if (rotation) {\n          transform.setRotationQuaternion(rotation[0], rotation[1], rotation[2], rotation[3]);\n        }\n        if (scale) {\n          transform.setScale(scale[0], scale[1], scale[2]);\n        }\n      }\n\n      entities[i] = entity;\n    }\n\n    context.entities = entities;\n    this._buildEntityTree(context);\n    this._createSceneRoots(context);\n  }\n\n  private _buildEntityTree(context: GLTFResource): void {\n    const {\n      gltf: { nodes },\n      entities\n    } = context;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const { children } = nodes[i];\n      const entity = entities[i];\n\n      if (children) {\n        for (let j = 0; j < children.length; j++) {\n          const childEntity = entities[children[j]];\n\n          entity.addChild(childEntity);\n        }\n      }\n    }\n  }\n\n  private _createSceneRoots(context: GLTFResource): void {\n    const {\n      engine,\n      gltf: { scene: sceneID = 0, scenes },\n      entities\n    } = context;\n\n    if (!scenes) return;\n\n    const sceneRoots: Entity[] = [];\n\n    for (let i = 0; i < scenes.length; i++) {\n      const { nodes } = scenes[i];\n\n      if (!nodes) continue;\n\n      if (nodes.length === 1) {\n        sceneRoots[i] = entities[nodes[0]];\n      } else {\n        const rootEntity = new Entity(engine, \"GLTF_ROOT\");\n        for (let j = 0; j < nodes.length; j++) {\n          rootEntity.addChild(entities[nodes[j]]);\n        }\n        sceneRoots[i] = rootEntity;\n      }\n    }\n\n    context.sceneRoots = sceneRoots;\n    context.defaultSceneRoot = sceneRoots[sceneID];\n  }\n}\n","import { Material, PBRMaterial, PBRSpecularMaterial, RenderFace, UnlitMaterial } from \"@oasis-engine/core\";\nimport { Color } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { MaterialAlphaMode } from \"../Schema\";\nimport { Parser } from \"./Parser\";\n\nexport class MaterialParser extends Parser {\n  /** @internal */\n  static _parseTextureTransform(material: Material, extensions: any = {}, context: GLTFResource): void {\n    const schema = extensions.KHR_texture_transform;\n    if (schema) {\n      Parser.parseEngineResource(\"KHR_texture_transform\", schema, material, context);\n    }\n  }\n\n  parse(context: GLTFResource): void {\n    const { gltf, engine, textures } = context;\n    if (!gltf.materials) return;\n\n    const materials: Material[] = [];\n\n    for (let i = 0; i < gltf.materials.length; i++) {\n      const {\n        extensions = {},\n        pbrMetallicRoughness,\n        normalTexture,\n        occlusionTexture,\n        emissiveTexture,\n        emissiveFactor,\n        alphaMode,\n        alphaCutoff,\n        doubleSided,\n        name = \"\"\n      } = gltf.materials[i];\n\n      const { KHR_materials_unlit, KHR_materials_pbrSpecularGlossiness } = extensions;\n\n      let material: UnlitMaterial | PBRMaterial | PBRSpecularMaterial = null;\n\n      if (KHR_materials_unlit) {\n        material = <UnlitMaterial>Parser.createEngineResource(\"KHR_materials_unlit\", KHR_materials_unlit, context);\n      } else if (KHR_materials_pbrSpecularGlossiness) {\n        material = <PBRSpecularMaterial>(\n          Parser.createEngineResource(\n            \"KHR_materials_pbrSpecularGlossiness\",\n            KHR_materials_pbrSpecularGlossiness,\n            context\n          )\n        );\n      } else {\n        material = new PBRMaterial(engine);\n      }\n\n      material.name = name;\n\n      if (pbrMetallicRoughness) {\n        const { baseColorFactor, baseColorTexture, metallicFactor, roughnessFactor, metallicRoughnessTexture } =\n          pbrMetallicRoughness;\n\n        if (baseColorFactor) {\n          material.baseColor = new Color(...baseColorFactor);\n        }\n        if (baseColorTexture) {\n          material.baseTexture = textures[baseColorTexture.index];\n          MaterialParser._parseTextureTransform(material, baseColorTexture.extensions, context);\n        }\n\n        if (!KHR_materials_unlit && !KHR_materials_pbrSpecularGlossiness) {\n          const m = material as PBRMaterial;\n          m.metallic = metallicFactor ?? 1;\n          m.roughness = roughnessFactor ?? 1;\n          if (metallicRoughnessTexture) {\n            m.roughnessMetallicTexture = textures[metallicRoughnessTexture.index];\n            MaterialParser._parseTextureTransform(material, metallicRoughnessTexture.extensions, context);\n          }\n        }\n      }\n\n      if (!KHR_materials_unlit) {\n        const m = material as PBRMaterial | PBRSpecularMaterial;\n\n        if (emissiveTexture) {\n          m.emissiveTexture = textures[emissiveTexture.index];\n          MaterialParser._parseTextureTransform(material, emissiveTexture.extensions, context);\n        }\n\n        if (emissiveFactor) {\n          m.emissiveColor = new Color(...emissiveFactor);\n        }\n\n        if (normalTexture) {\n          const { index, scale } = normalTexture;\n          m.normalTexture = textures[index];\n          MaterialParser._parseTextureTransform(material, normalTexture.extensions, context);\n          if (scale !== undefined) {\n            m.normalTextureIntensity = scale;\n          }\n        }\n\n        if (occlusionTexture) {\n          const { index, strength } = occlusionTexture;\n          m.occlusionTexture = textures[index];\n          MaterialParser._parseTextureTransform(material, occlusionTexture.extensions, context);\n          if (strength !== undefined) {\n            m.occlusionTextureIntensity = strength;\n          }\n        }\n      }\n\n      if (doubleSided) {\n        material.renderFace = RenderFace.Double;\n      } else {\n        material.renderFace = RenderFace.Front;\n      }\n\n      switch (alphaMode) {\n        case MaterialAlphaMode.OPAQUE:\n          material.isTransparent = false;\n          break;\n        case MaterialAlphaMode.BLEND:\n          material.isTransparent = true;\n          break;\n        case MaterialAlphaMode.MASK:\n          material.alphaCutoff = alphaCutoff ?? 0.5;\n          break;\n      }\n\n      materials[i] = material;\n    }\n\n    context.materials = materials;\n  }\n}\n","import { BlendShape, Engine, EngineObject, ModelMesh, TypedArray } from \"@oasis-engine/core\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { IGLTF, IMesh, IMeshPrimitive } from \"../Schema\";\nimport { Parser } from \"./Parser\";\n\nexport class MeshParser extends Parser {\n  private static _tempVector3 = new Vector3();\n  parse(context: GLTFResource): Promise<void> {\n    const { engine, gltf, buffers } = context;\n    if (!gltf.meshes) return;\n\n    const meshPromises: Promise<ModelMesh[]>[] = [];\n\n    for (let i = 0; i < gltf.meshes.length; i++) {\n      const gltfMesh = gltf.meshes[i];\n      const primitivePromises: Promise<ModelMesh>[] = [];\n\n      for (let j = 0; j < gltfMesh.primitives.length; j++) {\n        const gltfPrimitive = gltfMesh.primitives[j];\n        const { extensions = {} } = gltfPrimitive;\n        const { KHR_draco_mesh_compression } = extensions;\n\n        primitivePromises.push(\n          new Promise((resolve) => {\n            const mesh = new ModelMesh(engine, gltfMesh.name || j + \"\");\n\n            if (KHR_draco_mesh_compression) {\n              (<Promise<EngineObject>>(\n                Parser.createEngineResource(\n                  \"KHR_draco_mesh_compression\",\n                  KHR_draco_mesh_compression,\n                  context,\n                  gltfPrimitive\n                )\n              ))\n                .then((decodedGeometry: any) => {\n                  return this._parseMeshFromGLTFPrimitive(\n                    mesh,\n                    gltfMesh,\n                    gltfPrimitive,\n                    gltf,\n                    (attributeSemantic) => {\n                      for (let j = 0; j < decodedGeometry.attributes.length; j++) {\n                        if (decodedGeometry.attributes[j].name === attributeSemantic) {\n                          return decodedGeometry.attributes[j].array;\n                        }\n                      }\n                      return null;\n                    },\n                    (attributeSemantic, shapeIndex) => {\n                      throw \"BlendShape animation is not supported when using draco.\";\n                    },\n                    () => {\n                      return decodedGeometry.index.array;\n                    },\n                    engine\n                  );\n                })\n                .then(resolve);\n            } else {\n              this._parseMeshFromGLTFPrimitive(\n                mesh,\n                gltfMesh,\n                gltfPrimitive,\n                gltf,\n                (attributeSemantic) => {\n                  const accessorIdx = gltfPrimitive.attributes[attributeSemantic];\n                  const accessor = gltf.accessors[accessorIdx];\n                  return GLTFUtil.getAccessorData(gltf, accessor, buffers);\n                },\n                (attributeName, shapeIndex) => {\n                  const shapeAccessorIdx = gltfPrimitive.targets[shapeIndex];\n                  const attributeAccessorIdx = shapeAccessorIdx[attributeName];\n                  if (attributeAccessorIdx) {\n                    const accessor = gltf.accessors[attributeAccessorIdx];\n                    return GLTFUtil.getAccessorData(gltf, accessor, buffers);\n                  } else {\n                    return null;\n                  }\n                },\n                () => {\n                  const indexAccessor = gltf.accessors[gltfPrimitive.indices];\n                  return GLTFUtil.getAccessorData(gltf, indexAccessor, buffers);\n                },\n                engine\n              ).then(resolve);\n            }\n          })\n        );\n      }\n\n      meshPromises.push(Promise.all(primitivePromises));\n    }\n\n    return Promise.all(meshPromises).then((meshes: ModelMesh[][]) => {\n      context.meshes = meshes;\n    });\n  }\n\n  private _parseMeshFromGLTFPrimitive(\n    mesh: ModelMesh,\n    gltfMesh: IMesh,\n    gltfPrimitive: IMeshPrimitive,\n    gltf: IGLTF,\n    getVertexBufferData: (semantic: string) => TypedArray,\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray,\n    getIndexBufferData: () => TypedArray,\n    engine: Engine\n  ): Promise<ModelMesh> {\n    const { attributes, targets, indices, mode } = gltfPrimitive;\n    let vertexCount: number;\n\n    const accessor = gltf.accessors[attributes[\"POSITION\"]];\n    const positionBuffer = <Float32Array>getVertexBufferData(\"POSITION\");\n    const positions = GLTFUtil.floatBufferToVector3Array(positionBuffer);\n    mesh.setPositions(positions);\n\n    const { bounds } = mesh;\n    vertexCount = accessor.count;\n    if (accessor.min && accessor.max) {\n      bounds.min.setValueByArray(accessor.min);\n      bounds.max.setValueByArray(accessor.max);\n    } else {\n      const position = MeshParser._tempVector3;\n      const { min, max } = bounds;\n\n      min.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n      max.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n      const stride = positionBuffer.length / vertexCount;\n      for (let j = 0; j < vertexCount; j++) {\n        const offset = j * stride;\n        position.setValueByArray(positionBuffer, offset);\n        Vector3.min(min, position, min);\n        Vector3.max(max, position, max);\n      }\n    }\n\n    for (const attributeSemantic in attributes) {\n      if (attributeSemantic === \"POSITION\") {\n        continue;\n      }\n      const bufferData = getVertexBufferData(attributeSemantic);\n      switch (attributeSemantic) {\n        case \"NORMAL\":\n          const normals = GLTFUtil.floatBufferToVector3Array(<Float32Array>bufferData);\n          mesh.setNormals(normals);\n          break;\n        case \"TANGENT\":\n          const tangents = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setTangents(tangents);\n          break;\n        case \"TEXCOORD_0\":\n          const texturecoords = GLTFUtil.floatBufferToVector2Array(<Float32Array>bufferData);\n          mesh.setUVs(texturecoords, 0);\n          break;\n        case \"JOINTS_0\":\n          const joints = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setBoneIndices(joints);\n          break;\n        case \"WEIGHTS_0\":\n          const weights = GLTFUtil.floatBufferToVector4Array(<Float32Array>bufferData);\n          mesh.setBoneWeights(weights);\n          break;\n        default:\n          // console.warn(`Unsupport attribute semantic ${attributeSemantic}.`);\n          break;\n      }\n    }\n\n    // Indices\n    if (indices !== undefined) {\n      const indexAccessor = gltf.accessors[indices];\n      const indexData = getIndexBufferData();\n      mesh.setIndices(<Uint8Array | Uint16Array | Uint32Array>indexData);\n      mesh.addSubMesh(0, indexAccessor.count, mode);\n    } else {\n      mesh.addSubMesh(0, vertexCount, mode);\n    }\n\n    // BlendShapes\n    targets && this._createBlendShape(mesh, gltfMesh, targets, getBlendShapeData);\n\n    mesh.uploadData(true);\n    return Promise.resolve(mesh);\n  }\n\n  private _createBlendShape(\n    mesh: ModelMesh,\n    glTFMesh: IMesh,\n    glTFTargets: {\n      [name: string]: number;\n    }[],\n    getBlendShapeData: (semantic: string, shapeIndex: number) => TypedArray\n  ): void {\n    const blendShapeNames = glTFMesh.extras ? glTFMesh.extras.targetNames : null;\n\n    for (let i = 0, n = glTFTargets.length; i < n; i++) {\n      const name = blendShapeNames ? blendShapeNames[i] : `blendShape${i}`;\n      const deltaPosBuffer = getBlendShapeData(\"POSITION\", i);\n      const deltaNorBuffer = getBlendShapeData(\"NORMAL\", i);\n      const deltaTanBuffer = getBlendShapeData(\"TANGENT\", i);\n      const deltaPositions = deltaPosBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaPosBuffer) : null;\n      const deltaNormals = deltaNorBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaNorBuffer) : null;\n      const deltaTangents = deltaTanBuffer ? GLTFUtil.floatBufferToVector3Array(<Float32Array>deltaTanBuffer) : null;\n\n      const blendShape = new BlendShape(name);\n      blendShape.addFrame(1.0, deltaPositions, deltaNormals, deltaTangents);\n      mesh.addBlendShape(blendShape);\n    }\n  }\n}\n","import {\n  Animator,\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateMachine,\n  BlinnPhongMaterial,\n  Camera,\n  Engine,\n  Entity,\n  MeshRenderer,\n  SkinnedMeshRenderer\n} from \"@oasis-engine/core\";\nimport { IKHRLightsPunctual, IKHRLightsPunctual_LightNode } from \"../extensions/Schema\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { CameraType, ICamera, INode } from \"../Schema\";\nimport { Parser } from \"./Parser\";\n\nexport class SceneParser extends Parser {\n  private static _defaultMaterial: BlinnPhongMaterial;\n\n  private static _getDefaultMaterial(engine: Engine): BlinnPhongMaterial {\n    if (!SceneParser._defaultMaterial) {\n      SceneParser._defaultMaterial = new BlinnPhongMaterial(engine);\n    }\n\n    return SceneParser._defaultMaterial;\n  }\n\n  parse(context: GLTFResource): void {\n    const {\n      gltf: { nodes, cameras: gltfCameras },\n      entities\n    } = context;\n\n    if (!nodes) return;\n\n    for (let i = 0; i < nodes.length; i++) {\n      const gltfNode = nodes[i];\n      const { camera: cameraID, mesh: meshID, extensions = {} } = gltfNode;\n      const KHR_lights_punctual = <IKHRLightsPunctual_LightNode>extensions.KHR_lights_punctual;\n      const entity = entities[i];\n\n      if (cameraID !== undefined) {\n        this._createCamera(context, gltfCameras[cameraID], entity);\n      }\n\n      if (meshID !== undefined) {\n        this._createRenderer(context, gltfNode, entity);\n      }\n\n      if (KHR_lights_punctual) {\n        const lightIndex = KHR_lights_punctual.light;\n        const lights = (context.gltf.extensions.KHR_lights_punctual as IKHRLightsPunctual).lights;\n\n        Parser.parseEngineResource(\"KHR_lights_punctual\", lights[lightIndex], entity, context);\n      }\n    }\n\n    if (context.defaultSceneRoot) {\n      this._createAnimator(context);\n    }\n  }\n\n  private _createCamera(context: GLTFResource, cameraSchema: ICamera, entity: Entity): void {\n    const { orthographic, perspective, type } = cameraSchema;\n    const camera = entity.addComponent(Camera);\n\n    if (type === CameraType.ORTHOGRAPHIC) {\n      const { xmag, ymag, zfar, znear } = orthographic;\n\n      camera.isOrthographic = true;\n\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n\n      camera.orthographicSize = Math.max(ymag ?? 0, xmag ?? 0) / 2;\n    } else if (type === CameraType.PERSPECTIVE) {\n      const { aspectRatio, yfov, zfar, znear } = perspective;\n\n      if (aspectRatio !== undefined) {\n        camera.aspectRatio = aspectRatio;\n      }\n      if (yfov !== undefined) {\n        camera.fieldOfView = (yfov * 180) / Math.PI;\n      }\n      if (zfar !== undefined) {\n        camera.farClipPlane = zfar;\n      }\n      if (znear !== undefined) {\n        camera.nearClipPlane = znear;\n      }\n    }\n\n    if (!context.cameras) context.cameras = [];\n    context.cameras.push(camera);\n    // @todo: use engine camera by default\n    camera.enabled = false;\n  }\n\n  private _createRenderer(context: GLTFResource, gltfNode: INode, entity: Entity): void {\n    const {\n      engine,\n      gltf: { meshes: gltfMeshes },\n      meshes,\n      materials,\n      skins\n    } = context;\n    const { mesh: meshID, skin: skinID } = gltfNode;\n    const glTFMesh = gltfMeshes[meshID];\n    const gltfMeshPrimitives = glTFMesh.primitives;\n    const blendShapeWeights = gltfNode.weights || glTFMesh.weights;\n\n    for (let i = 0; i < gltfMeshPrimitives.length; i++) {\n      const mesh = meshes[meshID][i];\n      let renderer: MeshRenderer | SkinnedMeshRenderer;\n\n      if (skinID !== undefined || blendShapeWeights) {\n        const skinRenderer = entity.addComponent(SkinnedMeshRenderer);\n        skinRenderer.mesh = mesh;\n        if (skinID !== undefined) {\n          skinRenderer.skin = skins[skinID];\n        }\n        if (blendShapeWeights) {\n          skinRenderer.blendShapeWeights = new Float32Array(blendShapeWeights);\n        }\n        renderer = skinRenderer;\n      } else {\n        renderer = entity.addComponent(MeshRenderer);\n        renderer.mesh = mesh;\n      }\n\n      const materialIndex = gltfMeshPrimitives[i].material;\n      const material = materials?.[materialIndex] || SceneParser._getDefaultMaterial(engine);\n      renderer.setMaterial(material);\n\n      const { extensions = {} } = gltfMeshPrimitives[i];\n      const { KHR_materials_variants } = extensions;\n      if (KHR_materials_variants) {\n        Parser.parseEngineResource(\"KHR_materials_variants\", KHR_materials_variants, renderer, context);\n      }\n    }\n  }\n\n  private _createAnimator(context: GLTFResource) {\n    const { defaultSceneRoot, animations } = context;\n    if (!animations) return;\n    const animator = defaultSceneRoot.addComponent(Animator);\n    const animatorController = new AnimatorController();\n    const layer = new AnimatorControllerLayer(\"layer\");\n    const animatorStateMachine = new AnimatorStateMachine();\n    animatorController.addLayer(layer);\n    animator.animatorController = animatorController;\n    layer.stateMachine = animatorStateMachine;\n    if (animations) {\n      for (let i = 0; i < animations.length; i++) {\n        const animationClip = animations[i];\n        const name = animationClip.name;\n        const uniqueName = animatorStateMachine.makeUniqueStateName(name);\n        if (uniqueName !== name) {\n          console.warn(`AnimatorState name is existed, name: ${name} reset to ${uniqueName}`);\n        }\n        const animatorState = animatorStateMachine.addState(uniqueName);\n        animatorState.clip = animationClip;\n      }\n    }\n  }\n}\n","import { Skin } from \"@oasis-engine/core\";\nimport { Matrix } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { Parser } from \"./Parser\";\n\nexport class SkinParser extends Parser {\n  parse(context: GLTFResource): void {\n    const { gltf, buffers, entities, defaultSceneRoot } = context;\n    const gltfSkins = gltf.skins;\n\n    if (!gltfSkins) return;\n\n    const skins: Skin[] = [];\n\n    for (let i = 0; i < gltfSkins.length; i++) {\n      const { inverseBindMatrices, skeleton, joints, name = `SKIN_${i}` } = gltfSkins[i];\n      const jointCount = joints.length;\n\n      const skin = new Skin(name);\n      skin.inverseBindMatrices.length = jointCount;\n\n      // parse IBM\n      const accessor = gltf.accessors[inverseBindMatrices];\n      const buffer = GLTFUtil.getAccessorData(gltf, accessor, buffers);\n      for (let i = 0; i < jointCount; i++) {\n        const inverseBindMatrix = new Matrix();\n        inverseBindMatrix.setValueByArray(buffer, i * 16);\n        skin.inverseBindMatrices[i] = inverseBindMatrix;\n      }\n\n      // get joints\n      for (let i = 0; i < jointCount; i++) {\n        skin.joints[i] = entities[joints[i]].name;\n      }\n\n      // get skeleton\n      if (skeleton !== undefined) {\n        skin.skeleton = entities[skeleton].name;\n      } else {\n        skin.skeleton = defaultSceneRoot.name;\n      }\n\n      skins[i] = skin;\n    }\n\n    context.skins = skins;\n  }\n}\n","import { AssetType, Logger, Texture2D, TextureWrapMode } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { ISampler } from \"../Schema\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { Parser } from \"./Parser\";\n\nexport class TextureParser extends Parser {\n  private static _wrapMap = {\n    33071: TextureWrapMode.Clamp,\n    33648: TextureWrapMode.Mirror,\n    10497: TextureWrapMode.Repeat\n  };\n\n  parse(context: GLTFResource): void | Promise<void> {\n    const { gltf, buffers, engine, url } = context;\n\n    if (gltf.textures) {\n      return Promise.all(\n        gltf.textures.map(({ sampler, source = 0, name: textureName }, index) => {\n          const { uri, bufferView: bufferViewIndex, mimeType, name: imageName } = gltf.images[source];\n\n          if (uri) {\n            return engine.resourceManager\n              .load<Texture2D>({\n                url: GLTFUtil.parseRelativeUrl(url, uri),\n                type: AssetType.Texture2D\n              })\n              .then((texture) => {\n                if (!texture.name) {\n                  texture.name = textureName || imageName || `texture_${index}`;\n                }\n                if (sampler !== undefined) {\n                  this._parseSampler(texture, gltf.samplers[sampler]);\n                }\n                return texture;\n              });\n          } else {\n            const bufferView = gltf.bufferViews[bufferViewIndex];\n            const bufferViewData = GLTFUtil.getBufferViewData(bufferView, buffers);\n            return GLTFUtil.loadImageBuffer(bufferViewData, mimeType).then((image) => {\n              const texture = new Texture2D(engine, image.width, image.height);\n              texture.setImageSource(image);\n              texture.generateMipmaps();\n              texture.name = textureName || imageName || `texture_${index}`;\n              if (sampler !== undefined) {\n                this._parseSampler(texture, gltf.samplers[sampler]);\n              }\n              return texture;\n            });\n          }\n        })\n      ).then((textures: Texture2D[]) => {\n        context.textures = textures;\n      });\n    }\n  }\n\n  private _parseSampler(texture: Texture2D, sampler: ISampler): void {\n    const { magFilter, minFilter, wrapS, wrapT } = sampler;\n\n    if (magFilter || minFilter) {\n      Logger.warn(\"texture use filterMode in engine\");\n    }\n\n    if (wrapS) {\n      texture.wrapModeU = TextureParser._wrapMap[wrapS];\n    }\n\n    if (wrapT) {\n      texture.wrapModeV = TextureParser._wrapMap[wrapT];\n    }\n  }\n}\n","import { Logger } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { Parser } from \"./Parser\";\n\nexport class Validator extends Parser {\n  parse(context: GLTFResource): void {\n    const {\n      gltf: {\n        asset: { version },\n        extensionsUsed,\n        extensionsRequired\n      }\n    } = context;\n\n    const gltfVersion = Number(version);\n    if (!(gltfVersion >= 2 && gltfVersion < 3)) {\n      throw \"Only support gltf 2.x.\";\n    }\n\n    if (extensionsUsed) {\n      Logger.info(\"extensionsUsed: \", extensionsUsed);\n      for (let i = 0; i < extensionsUsed.length; i++) {\n        if (!Parser.hasExtensionParser(extensionsUsed[i])) {\n          Logger.warn(`Extension ${extensionsUsed[i]} is not implemented, you can customize this extension in gltf.`);\n        }\n      }\n    }\n\n    if (extensionsRequired) {\n      Logger.info(`extensionsRequired: ${extensionsRequired}`);\n      for (let i = 0; i < extensionsRequired.length; i++) {\n        const extensionRequired = extensionsRequired[i];\n\n        if (!Parser.hasExtensionParser(extensionRequired)) {\n          Logger.error(`GLTF parser has not supported required extension ${extensionRequired}.`);\n        } else {\n          Parser.initialize(extensionRequired);\n        }\n      }\n    }\n  }\n}\n","import { GLTFResource } from \"./GLTFResource\";\nimport { AnimationParser } from \"./parser/AnimationParser\";\nimport { BufferParser } from \"./parser/BufferParser\";\nimport { EntityParser } from \"./parser/EntityParser\";\nimport { MaterialParser } from \"./parser/MaterialParser\";\nimport { MeshParser } from \"./parser/MeshParser\";\nimport { Parser } from \"./parser/Parser\";\nimport { SceneParser } from \"./parser/SceneParser\";\nimport { SkinParser } from \"./parser/SkinParser\";\nimport { TextureParser } from \"./parser/TextureParser\";\nimport { Validator } from \"./parser/Validator\";\n\nexport class GLTFParser {\n  static instance = new GLTFParser([\n    BufferParser,\n    Validator,\n    TextureParser,\n    MaterialParser,\n    MeshParser,\n    EntityParser,\n    SkinParser,\n    AnimationParser,\n    SceneParser\n  ]);\n\n  private _pipes: Parser[] = [];\n\n  private constructor(pipes: (new () => Parser)[]) {\n    pipes.forEach((pipe: new () => Parser, index: number) => {\n      this._pipes[index] = new pipe();\n    });\n  }\n\n  parse(context: GLTFResource): Promise<GLTFResource> {\n    let lastPipe: void | Promise<void>;\n\n    return new Promise((resolve, reject) => {\n      this._pipes.forEach((parser: Parser) => {\n        if (lastPipe) {\n          lastPipe = lastPipe.then(() => {\n            return parser.parse(context);\n          });\n        } else {\n          lastPipe = parser.parse(context);\n        }\n      });\n\n      if (lastPipe) {\n        lastPipe\n          .then(() => {\n            resolve(context);\n          })\n          .catch(reject);\n      } else {\n        resolve(context);\n      }\n    });\n  }\n}\n","import {\n  AnimationClip,\n  Camera,\n  EngineObject,\n  Entity,\n  Light,\n  Material,\n  ModelMesh,\n  Renderer,\n  Skin,\n  Texture2D\n} from \"@oasis-engine/core\";\nimport { IGLTF } from \"./Schema\";\n\n/**\n * Product after GLTF parser, usually, `defaultSceneRoot` is only needed to use.\n */\nexport class GLTFResource extends EngineObject {\n  /** GLTF file url. */\n  url: string;\n  /** GLTF file content. */\n  gltf: IGLTF;\n  /** ArrayBuffer after BufferParser. */\n  buffers: ArrayBuffer[];\n  /** Oasis Texture2D after TextureParser. */\n  textures?: Texture2D[];\n  /** Oasis Material after MaterialParser. */\n  materials?: Material[];\n  /** Oasis ModelMesh after MeshParser. */\n  meshes?: ModelMesh[][];\n  /** Oasis Skin after SkinParser. */\n  skins?: Skin[];\n  /** Oasis AnimationClip after AnimationParser. */\n  animations?: AnimationClip[];\n  /** Oasis Entity after EntityParser. */\n  entities: Entity[];\n  /** Oasis Camera after SceneParser. */\n  cameras?: Camera[];\n  /** GLTF can export lights in extension KHR_lights_punctual */\n  lights?: Light[];\n  /** Oasis RootEntities after SceneParser. */\n  sceneRoots: Entity[];\n  /** Oasis RootEntity after SceneParser. */\n  defaultSceneRoot: Entity;\n  /** Renderer can replace material by `renderer.setMaterial` if gltf use plugin-in KHR_materials_variants. */\n  variants?: { renderer: Renderer; material: Material; variants: string[] }[];\n}\n","import { AssetPromise, AssetType, Loader, LoadItem, resourceLoader, ResourceManager } from \"@oasis-engine/core\";\nimport { GLTFParser } from \"./gltf/GLTFParser\";\nimport { GLTFResource } from \"./gltf/GLTFResource\";\n\n@resourceLoader(AssetType.Prefab, [\"gltf\", \"glb\"])\nexport class GLTFLoader extends Loader<GLTFResource> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<GLTFResource> {\n    const url = item.url;\n    return new AssetPromise((resolve, reject) => {\n      const resource = new GLTFResource(resourceManager.engine);\n      resource.url = url;\n\n      GLTFParser.instance\n        .parse(resource)\n        .then(resolve)\n        .catch((e) => {\n          console.error(e);\n          reject(`Error loading glTF model from ${url} .`);\n        });\n    });\n  }\n}\n","import { resourceLoader, Loader, AssetPromise, AssetType, LoadItem } from \"@oasis-engine/core\";\n\n@resourceLoader(AssetType.JSON, [\"json\"], false)\nclass JSONLoader extends Loader<string> {\n  load(item: LoadItem): AssetPromise<string> {\n    return this.request(item.url, {\n      ...item,\n      type: \"json\"\n    });\n  }\n}\n","/**\n *\n * ported from https://github.com/BabylonJS/Babylon.js/blob/master/src/Tools/babylon.khronosTextureContainer.ts\n */\n\nimport { TextureFormat } from \"@oasis-engine/core\";\nimport { GLCompressedTextureInternalFormat } from \"@oasis-engine/rhi-webgl\";\nimport { KTXContainer, Mipmap } from \"./type\";\n\nconst HEADER_LEN = 12 + 13 * 4; // identifier + header elements (not including key value meta-data pairs)\n\n// load types\nconst COMPRESSED_2D = 0; // uses a gl.compressedTexImage2D()\nconst COMPRESSED_3D = 1; // uses a gl.compressedTexImage3D()\nconst TEX_2D = 2; // uses a gl.texImage2D()\nconst TEX_3D = 3; // uses a gl.texImage3D()\n\nfunction getMipmaps(ktxContainer: KTXContainer, loadMipmaps: boolean): Mipmap[] {\n  const mipmaps = [];\n\n  // initialize width & height for level 1\n  var dataOffset = HEADER_LEN + ktxContainer.bytesOfKeyValueData;\n  var width = ktxContainer.pixelWidth;\n  var height = ktxContainer.pixelHeight;\n  var mipmapCount = loadMipmaps ? ktxContainer.numberOfMipmapLevels : 1;\n\n  for (var level = 0; level < mipmapCount; level++) {\n    var imageSize = new Int32Array(ktxContainer.buffer, dataOffset, 1)[0]; // size per face, since not supporting array cubemaps\n    dataOffset += 4; // size of the image + 4 for the imageSize field\n\n    for (var face = 0; face < ktxContainer.numberOfFaces; face++) {\n      var byteArray = new Uint8Array(ktxContainer.buffer, dataOffset, imageSize);\n\n      mipmaps.push({ data: byteArray, width: width, height: height });\n\n      dataOffset += imageSize;\n      dataOffset += 3 - ((imageSize + 3) % 4); // add padding for odd sized image\n    }\n    width = Math.max(1.0, width * 0.5);\n    height = Math.max(1.0, height * 0.5);\n  }\n\n  return mipmaps;\n}\n\n/**\n * Checks if the given data starts with a KTX file identifier.\n * @param data the data to check\n * @returns true if the data is a KTX file or false otherwise\n */\nfunction isValid(data: ArrayBuffer): boolean {\n  if (data.byteLength >= 12) {\n    // '«', 'K', 'T', 'X', ' ', '1', '1', '»', '\\r', '\\n', '\\x1A', '\\n'\n    const identifier = new Uint8Array(data, 0, 12);\n    if (\n      identifier[0] === 0xab &&\n      identifier[1] === 0x4b &&\n      identifier[2] === 0x54 &&\n      identifier[3] === 0x58 &&\n      identifier[4] === 0x20 &&\n      identifier[5] === 0x31 &&\n      identifier[6] === 0x31 &&\n      identifier[7] === 0xbb &&\n      identifier[8] === 0x0d &&\n      identifier[9] === 0x0a &&\n      identifier[10] === 0x1a &&\n      identifier[11] === 0x0a\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getEngineFormat(internalFormat: GLint): TextureFormat {\n  switch (internalFormat) {\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT3_EXT:\n    // case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n    // break;\n    case GLCompressedTextureInternalFormat.RGB_S3TC_DXT1_EXT:\n      return TextureFormat.DXT1;\n    case GLCompressedTextureInternalFormat.RGBA_S3TC_DXT5_EXT:\n      return TextureFormat.DXT5;\n    case GLCompressedTextureInternalFormat.RGB_ETC1_WEBGL:\n      return TextureFormat.ETC1_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_ETC2:\n      return TextureFormat.ETC2_RGB;\n    case GLCompressedTextureInternalFormat.RGB8_PUNCHTHROUGH_ALPHA1_ETC2:\n      return TextureFormat.ETC2_RGBA5;\n    case GLCompressedTextureInternalFormat.RGBA8_ETC2_EAC:\n      return TextureFormat.ETC2_RGBA8;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB2;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_2BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA2;\n    case GLCompressedTextureInternalFormat.RGB_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGB4;\n    case GLCompressedTextureInternalFormat.RGBA_PVRTC_4BPPV1_IMG:\n      return TextureFormat.PVRTC_RGBA4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_4X4_KHR:\n      return TextureFormat.ASTC_4x4;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_5X5_KHR:\n      return TextureFormat.ASTC_5x5;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_6X6_KHR:\n      return TextureFormat.ASTC_6x6;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_8X8_KHR:\n      return TextureFormat.ASTC_8x8;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_10X10_KHR:\n      return TextureFormat.ASTC_10x10;\n    case GLCompressedTextureInternalFormat.RGBA_ASTC_12X12_KHR:\n      return TextureFormat.ASTC_12x12;\n    default:\n      const formatName: any = GLCompressedTextureInternalFormat[internalFormat];\n      throw new Error(`this format is not supported in Oasis Engine: ${formatName}`);\n  }\n}\n/**\n * for description see https://www.khronos.org/opengles/sdk/tools/KTX/\n * for file layout see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/\n */\nexport const khronosTextureContainerParser = {\n  /**\n   *\n   * @param buffer contents of the KTX container file\n   * @param facesExpected should be either 1 or 6, based whether a cube texture or or\n   * @param threeDExpected provision for indicating that data should be a 3D texture, not implemented\n   * @param textureArrayExpected provision for indicating that data should be a texture array, not implemented\n   * @param mapEngineFormat get Oasis Engine native TextureFormat?\n   */\n  parse(\n    buffer: ArrayBuffer,\n    facesExpected: number,\n    withMipmaps: boolean,\n    mapEngineFormat: boolean = false\n  ): KTXContainer {\n    if (!isValid(buffer)) {\n      throw new Error(\"khronosTextureContainerParser: invalid KTX file, texture missing KTX identifier\");\n    }\n\n    // load the reset of the header in native 32 bit uint\n    const dataSize = Uint32Array.BYTES_PER_ELEMENT;\n    const headerDataView = new DataView(buffer, 12, 13 * dataSize);\n    const endianness = headerDataView.getUint32(0, true);\n    const littleEndian = endianness === 0x04030201;\n\n    const parsedResult: KTXContainer = {\n      buffer: buffer,\n      glType: headerDataView.getUint32(1 * dataSize, littleEndian), // must be 0 for compressed textures\n      glTypeSize: headerDataView.getUint32(2 * dataSize, littleEndian), // must be 1 for compressed textures\n      glFormat: headerDataView.getUint32(3 * dataSize, littleEndian), // must be 0 for compressed textures\n      glInternalFormat: headerDataView.getUint32(4 * dataSize, littleEndian), // the value of arg passed to gl.compressedTexImage2D(,,x,,,,)\n      glBaseInternalFormat: headerDataView.getUint32(5 * dataSize, littleEndian), // specify GL_RGB, GL_RGBA, GL_ALPHA, etc (un-compressed only)\n      pixelWidth: headerDataView.getUint32(6 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,x,,,)\n      pixelHeight: headerDataView.getUint32(7 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage2D(,,,,x,,)\n      pixelDepth: headerDataView.getUint32(8 * dataSize, littleEndian), // level 0 value of arg passed to gl.compressedTexImage3D(,,,,,x,,)\n      numberOfArrayElements: headerDataView.getUint32(9 * dataSize, littleEndian), // used for texture arrays\n      numberOfFaces: headerDataView.getUint32(10 * dataSize, littleEndian), // used for cubemap textures, should either be 1 or 6\n      numberOfMipmapLevels: headerDataView.getUint32(11 * dataSize, littleEndian), // number of levels; disregard possibility of 0 for compressed textures\n      bytesOfKeyValueData: headerDataView.getUint32(12 * dataSize, littleEndian), // the amount of space after the header for meta-data\n      // would need to make this more elaborate & adjust checks above to support more than one load type\n      loadType: COMPRESSED_2D\n    };\n\n    // Make sure we have a compressed type.  Not only reduces work, but probably better to let dev know they are not compressing.\n    if (parsedResult.glType !== 0) {\n      throw new Error(\"only compressed formats currently supported\");\n    } else {\n      // value of zero is an indication to generate mipmaps @ runtime.  Not usually allowed for compressed, so disregard.\n      parsedResult.numberOfMipmapLevels = Math.max(1, parsedResult.numberOfMipmapLevels);\n    }\n\n    if (parsedResult.pixelHeight === 0 || parsedResult.pixelDepth !== 0) {\n      throw new Error(\"only 2D textures currently supported\");\n    }\n\n    if (parsedResult.numberOfArrayElements !== 0) {\n      throw new Error(\"texture arrays not currently supported\");\n    }\n\n    if (parsedResult.numberOfFaces !== facesExpected) {\n      throw new Error(\"number of faces expected\" + facesExpected + \", but found \" + parsedResult.numberOfFaces);\n    }\n\n    if (withMipmaps) {\n      parsedResult.mipmaps = getMipmaps(parsedResult, true);\n    }\n\n    if (mapEngineFormat) {\n      parsedResult.engineFormat = getEngineFormat(parsedResult.glInternalFormat);\n    }\n    return parsedResult;\n  }\n};\n","import { CompressedTextureData, CompressedCubeData } from \"./type\";\nimport { khronosTextureContainerParser } from \"./KhronosTextureContainer\";\nimport { TextureFormat } from \"@oasis-engine/core\";\n\nexport function parseSingleKTX(data: ArrayBuffer): CompressedTextureData {\n  const ktx = khronosTextureContainerParser.parse(data, 1, true, true);\n  return {\n    mipmaps: ktx.mipmaps,\n    engineFormat: ktx.engineFormat,\n    internalFormat: ktx.glInternalFormat,\n    width: ktx.pixelWidth,\n    height: ktx.pixelHeight\n  };\n}\n\nexport function parseCubeKTX(dataArray: ArrayBuffer[]): CompressedCubeData {\n  const mipmapsFaces = [];\n  let internalFormat: number;\n  let engineFormat: TextureFormat;\n  let width: number;\n  let height: number;\n  for (let i = 0; i < dataArray.length; i++) {\n    const ktx = khronosTextureContainerParser.parse(dataArray[i], 1, true, true);\n    mipmapsFaces.push(ktx.mipmaps);\n    if (i === 0) {\n      width = ktx.pixelWidth;\n      height = ktx.pixelHeight;\n      internalFormat = ktx.glInternalFormat;\n      engineFormat = ktx.engineFormat;\n    }\n  }\n  return {\n    mipmapsFaces,\n    engineFormat,\n    internalFormat,\n    width,\n    height\n  };\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCubeMap\n} from \"@oasis-engine/core\";\nimport { parseCubeKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTXCube, [])\nclass KTXCubeLoader extends Loader<TextureCubeMap> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCubeMap> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<ArrayBuffer>(url, {\n            ...item,\n            type: \"arraybuffer\"\n          })\n        )\n      )\n        .then((data) => {\n          const parsedData = parseCubeKTX(data);\n          const { width, mipmapsFaces, engineFormat } = parsedData;\n          const mipmap = mipmapsFaces[0].length > 1;\n          const texture = new TextureCubeMap(resourceManager.engine, width, engineFormat, mipmap);\n\n          for (let face = 0; face < 6; face++) {\n            const length = mipmapsFaces[face].length;\n\n            for (let miplevel = 0; miplevel < length; miplevel++) {\n              const { data, width, height } = mipmapsFaces[face][miplevel];\n\n              texture.setPixelBuffer(TextureCubeFace.PositiveX + face, data, miplevel, 0, 0, width, height);\n            }\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D\n} from \"@oasis-engine/core\";\nimport { parseSingleKTX } from \"./compressed-texture\";\n\n@resourceLoader(AssetType.KTX, [\"ktx\"])\nexport class KTXLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<ArrayBuffer>(item.url, {\n        ...item,\n        type: \"arraybuffer\"\n      })\n        .then((bin) => {\n          const parsedData = parseSingleKTX(bin);\n          const { width, height, mipmaps, engineFormat } = parsedData;\n          const mipmap = mipmaps.length > 1;\n          const texture = new Texture2D(resourceManager.engine, width, height, engineFormat, mipmap);\n\n          for (let miplevel = 0; miplevel < mipmaps.length; miplevel++) {\n            const { width, height, data } = mipmaps[miplevel];\n            texture.setPixelBuffer(data, miplevel, 0, 0, width, height);\n          }\n\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  Texture2D\n} from \"@oasis-engine/core\";\n\n@resourceLoader(AssetType.Texture2D, [\"png\", \"jpg\", \"webp\", \"jpeg\"])\nclass Texture2DLoader extends Loader<Texture2D> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<Texture2D> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<HTMLImageElement>(item.url, {\n        ...item,\n        type: \"image\"\n      })\n        .then((image) => {\n          const texture = new Texture2D(resourceManager.engine, image.width, image.height);\n          /** @ts-ignore */\n          if (!texture._platformTexture) return;\n          texture.setImageSource(image);\n          texture.generateMipmaps();\n\n          if (item.url.indexOf(\"data:\") !== 0) {\n            const splitPath = item.url.split(\"/\");\n            texture.name = splitPath[splitPath.length - 1];\n          }\n          resolve(texture);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  AssetPromise,\n  AssetType,\n  Loader,\n  LoadItem,\n  resourceLoader,\n  ResourceManager,\n  TextureCubeFace,\n  TextureCubeMap\n} from \"@oasis-engine/core\";\n\n@resourceLoader(AssetType.TextureCube, [\"\"])\nclass TextureCubeLoader extends Loader<TextureCubeMap> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<TextureCubeMap> {\n    return new AssetPromise((resolve, reject) => {\n      Promise.all(\n        item.urls.map((url) =>\n          this.request<HTMLImageElement>(url, {\n            ...item,\n            type: \"image\"\n          })\n        )\n      )\n        .then((images) => {\n          const { width, height } = images[0];\n\n          if (width !== height) {\n            console.error(\"The cube texture must have the same width and height\");\n            return;\n          }\n\n          const tex = new TextureCubeMap(resourceManager.engine, width);\n\n          /** @ts-ignore */\n          if (!tex._platformTexture) return;\n\n          for (let faceIndex = 0; faceIndex < 6; faceIndex++) {\n            tex.setImageSource(TextureCubeFace.PositiveX + faceIndex, images[faceIndex], 0);\n          }\n\n          tex.generateMipmaps();\n          resolve(tex);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import {\n  resourceLoader,\n  Loader,\n  AssetPromise,\n  AssetType,\n  LoadItem,\n  ResourceManager,\n  Texture2D,\n  Sprite,\n  SpriteAtlas\n} from \"@oasis-engine/core\";\nimport { AtlasConfig } from \"@oasis-engine/core/types/2d/atlas/types\";\nimport { Rect, Vector2 } from \"@oasis-engine/math\";\nimport { GLTFUtil } from \"./gltf/GLTFUtil\";\n\n@resourceLoader(AssetType.SpriteAtlas, [\"atlas\"], false)\nclass SpriteAtlasLoader extends Loader<SpriteAtlas> {\n  load(item: LoadItem, resourceManager: ResourceManager): AssetPromise<SpriteAtlas> {\n    return new AssetPromise((resolve, reject) => {\n      this.request<AtlasConfig>(item.url, {\n        ...item,\n        type: \"json\"\n      })\n        .then((atlasData) => {\n          const { atlasItems, format } = atlasData;\n          const atlasItemsLen = atlasItems.length;\n          Promise.all(\n            atlasItems.map(({ img }) =>\n              this.request<HTMLImageElement>(GLTFUtil.parseRelativeUrl(item.url, img), {\n                ...item,\n                type: \"image\"\n              })\n            )\n          ).then((imgs) => {\n            const { engine } = resourceManager;\n            // Generate a SpriteAtlas object.\n            const tempRect = new Rect();\n            const tempVect2 = new Vector2();\n            const spriteAtlas = new SpriteAtlas(engine);\n            for (let i = 0; i < atlasItemsLen; i++) {\n              // Generate Texture2D according to configuration.\n              const originalImg = imgs[i];\n              const { width, height } = originalImg;\n              const texture = new Texture2D(engine, width, height, format);\n              texture.setImageSource(originalImg);\n              texture.generateMipmaps();\n              // Generate all the sprites on this texture.\n              const atlasItem = atlasItems[i];\n              const sprites = atlasItem.sprites;\n              const sourceWidthReciprocal = 1.0 / width;\n              const sourceHeightReciprocal = 1.0 / height;\n              for (let j = sprites.length - 1; j >= 0; j--) {\n                const atlasSprite = sprites[j];\n                const { region, pivot, atlasRegionOffset, atlasRegion, id } = atlasSprite;\n                const sprite = new Sprite(\n                  engine,\n                  texture,\n                  region ? tempRect.setValue(region.x, region.y, region.w, region.h) : undefined,\n                  pivot ? tempVect2.setValue(pivot.x, pivot.y) : undefined,\n                  atlasSprite.pixelsPerUnit || undefined,\n                  atlasSprite.name\n                );\n                sprite.atlasRegion.setValue(\n                  atlasRegion.x * sourceWidthReciprocal,\n                  atlasRegion.y * sourceHeightReciprocal,\n                  atlasRegion.w * sourceWidthReciprocal,\n                  atlasRegion.h * sourceHeightReciprocal\n                );\n                atlasSprite.atlasRotated && (sprite.atlasRotated = true);\n                if (atlasRegionOffset) {\n                  const { x: offsetLeft, y: offsetTop, z: offsetRight, w: offsetBottom } = atlasRegionOffset;\n                  let originalWReciprocal: number, originalHReciprocal: number;\n                  if (atlasSprite.atlasRotated) {\n                    originalWReciprocal = 1 / (offsetLeft + atlasRegion.h + offsetRight);\n                    originalHReciprocal = 1 / (offsetTop + atlasRegion.w + offsetBottom);\n                  } else {\n                    originalWReciprocal = 1 / (offsetLeft + atlasRegion.w + offsetRight);\n                    originalHReciprocal = 1 / (offsetTop + atlasRegion.h + offsetBottom);\n                  }\n                  sprite.atlasRegionOffset.setValue(\n                    offsetLeft * originalWReciprocal,\n                    offsetTop * originalHReciprocal,\n                    offsetRight * originalWReciprocal,\n                    offsetBottom * originalHReciprocal\n                  );\n                }\n                if (id !== undefined) {\n                  // @ts-ignore\n                  sprite._assetID = id;\n                }\n                // @ts-ignore\n                spriteAtlas._addSprite(sprite);\n              }\n            }\n            resolve(spriteAtlas);\n          });\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n}\n","import { EngineObject } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { ExtensionSchema } from \"./Schema\";\n\nexport abstract class ExtensionParser {\n  initialize(): void {}\n\n  parseEngineResource(\n    schema: ExtensionSchema,\n    parseResource: EngineObject,\n    context: GLTFResource,\n    ...extra\n  ): void | Promise<void> {}\n\n  createEngineResource(schema: ExtensionSchema, context: GLTFResource, ...extra): EngineObject | Promise<EngineObject> {\n    return null;\n  }\n}\n","import { DRACODecoder } from \"@oasis-engine/draco\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { GLTFUtil } from \"../GLTFUtil\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { IMeshPrimitive } from \"../Schema\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRDracoMeshCompression } from \"./Schema\";\n\n@registerExtension(\"KHR_draco_mesh_compression\")\nclass KHR_draco_mesh_compression extends ExtensionParser {\n  private static _decoder: DRACODecoder;\n\n  initialize(): void {\n    if (!KHR_draco_mesh_compression._decoder) {\n      KHR_draco_mesh_compression._decoder = new DRACODecoder();\n    }\n  }\n\n  createEngineResource(schema: IKHRDracoMeshCompression, context: GLTFResource, gltfPrimitive: IMeshPrimitive) {\n    const { gltf, buffers } = context;\n    const { bufferViews, accessors } = gltf;\n    const { bufferView: bufferViewIndex, attributes: gltfAttributeMap } = schema;\n\n    const attributeMap = {};\n    const attributeTypeMap = {};\n    for (let attributeName in gltfAttributeMap) {\n      attributeMap[attributeName] = gltfAttributeMap[attributeName];\n    }\n    for (let attributeName in gltfPrimitive.attributes) {\n      if (gltfAttributeMap[attributeName] !== undefined) {\n        const accessorDef = accessors[gltfPrimitive.attributes[attributeName]];\n        attributeTypeMap[attributeName] = GLTFUtil.getComponentType(accessorDef.componentType).name;\n      }\n    }\n    const indexAccessor = accessors[gltfPrimitive.indices];\n    const indexType = GLTFUtil.getComponentType(indexAccessor.componentType).name;\n    const taskConfig = {\n      attributeIDs: attributeMap,\n      attributeTypes: attributeTypeMap,\n      useUniqueIDs: true,\n      indexType\n    };\n    const buffer = GLTFUtil.getBufferViewData(bufferViews[bufferViewIndex], buffers);\n    return KHR_draco_mesh_compression._decoder.decode(buffer, taskConfig).then((parsedGeometry) => parsedGeometry);\n  }\n}\n","import { DirectLight, Entity, PointLight, SpotLight } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRLightsPunctual_Light } from \"./Schema\";\n\n@registerExtension(\"KHR_lights_punctual\")\nclass KHR_lights_punctual extends ExtensionParser {\n  parseEngineResource(schema: IKHRLightsPunctual_Light, entity: Entity, context: GLTFResource): void {\n    const { color, intensity = 1, type, range, spot } = schema;\n    let light: DirectLight | PointLight | SpotLight;\n\n    if (type === \"directional\") {\n      light = entity.addComponent(DirectLight);\n    } else if (type === \"point\") {\n      light = entity.addComponent(PointLight);\n    } else if (type === \"spot\") {\n      light = entity.addComponent(SpotLight);\n    }\n\n    if (color) {\n      light.color.setValue(color[0], color[1], color[2], 1);\n    }\n\n    light.intensity = intensity;\n\n    if (range && !(light instanceof DirectLight)) {\n      light.distance = range;\n    }\n\n    if (spot && light instanceof SpotLight) {\n      const { innerConeAngle = 0, outerConeAngle = Math.PI / 4 } = spot;\n\n      light.angle = innerConeAngle;\n      light.penumbra = outerConeAngle - innerConeAngle;\n    }\n\n    if (!context.lights) context.lights = [];\n    context.lights.push(light);\n  }\n}\n","import { PBRSpecularMaterial } from \"@oasis-engine/core\";\nimport { Color } from \"@oasis-engine/math\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { MaterialParser } from \"../parser/MaterialParser\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsPbrSpecularGlossiness } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_pbrSpecularGlossiness\")\nclass KHR_materials_pbrSpecularGlossiness extends ExtensionParser {\n  createEngineResource(schema: IKHRMaterialsPbrSpecularGlossiness, context: GLTFResource): PBRSpecularMaterial {\n    const { engine, textures } = context;\n    const material = new PBRSpecularMaterial(engine);\n    const { diffuseFactor, diffuseTexture, specularFactor, glossinessFactor, specularGlossinessTexture } = schema;\n\n    if (diffuseFactor) {\n      material.baseColor = new Color(...diffuseFactor);\n    }\n\n    if (diffuseTexture) {\n      material.baseTexture = textures[diffuseTexture.index];\n      MaterialParser._parseTextureTransform(material, diffuseTexture.extensions, context);\n    }\n\n    if (specularFactor) {\n      material.specularColor = new Color(...specularFactor);\n    }\n\n    if (glossinessFactor !== undefined) {\n      material.glossiness = glossinessFactor;\n    }\n\n    if (specularGlossinessTexture) {\n      material.specularGlossinessTexture = textures[specularGlossinessTexture.index];\n      MaterialParser._parseTextureTransform(material, specularGlossinessTexture.extensions, context);\n    }\n\n    return material;\n  }\n}\n","import { UnlitMaterial } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialsUnlit } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_unlit\")\nclass KHR_materials_unlit extends ExtensionParser {\n  createEngineResource(schema: IKHRMaterialsUnlit, context: GLTFResource): UnlitMaterial {\n    const { engine } = context;\n    const material = new UnlitMaterial(engine);\n\n    return material;\n  }\n}\n","import { Renderer } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRMaterialVariants_Mapping } from \"./Schema\";\n\n@registerExtension(\"KHR_materials_variants\")\nclass KHR_materials_variants extends ExtensionParser {\n  parseEngineResource(schema: IKHRMaterialVariants_Mapping, renderer: Renderer, context: GLTFResource): void {\n    const {\n      gltf: {\n        extensions: {\n          KHR_materials_variants: { variants: variantNames }\n        }\n      },\n      materials\n    } = context;\n    const { mappings } = schema;\n\n    for (let i = 0; i < mappings.length; i++) {\n      const { material, variants } = mappings[i];\n      if (!context.variants) context.variants = [];\n      context.variants.push({\n        renderer,\n        material: materials[material],\n        variants: variants.map((index) => variantNames[index].name)\n      });\n    }\n  }\n}\n","import { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\n\n@registerExtension(\"KHR_mesh_quantization\")\nclass KHR_mesh_quantization extends ExtensionParser {}\n","import { Logger, PBRBaseMaterial, UnlitMaterial } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../GLTFResource\";\nimport { registerExtension } from \"../parser/Parser\";\nimport { ExtensionParser } from \"./ExtensionParser\";\nimport { IKHRTextureTransform } from \"./Schema\";\n\n@registerExtension(\"KHR_texture_transform\")\nclass KHR_texture_transform extends ExtensionParser {\n  parseEngineResource(\n    schema: IKHRTextureTransform,\n    material: PBRBaseMaterial | UnlitMaterial,\n    context: GLTFResource\n  ): void {\n    const { offset, rotation, scale, texCoord } = schema;\n\n    if (offset) {\n      material.tilingOffset.z = offset[0];\n      material.tilingOffset.w = offset[1];\n    }\n\n    if (scale) {\n      material.tilingOffset.x = scale[0];\n      material.tilingOffset.y = scale[1];\n    }\n\n    if (rotation) {\n      Logger.warn(\"rotation in KHR_texture_transform is not supported now\");\n    }\n\n    if (texCoord) {\n      Logger.warn(\"texCoord in KHR_texture_transform is not supported now\");\n    }\n  }\n}\n","import { Animator, AnimatorController, AnimatorState, Component, Entity, UpdateFlag } from \"@oasis-engine/core\";\nimport { GLTFResource } from \"../gltf/GLTFResource\";\n\n/**\n * @deprecated\n * Temporarily only for editor use.\n * Remove when editor finish change from gltf to prefab.\n */\nexport class GLTFModel extends Component {\n  private _animatorController: AnimatorController;\n  private _speed: number = 1.0;\n  private _animator: Animator;\n  private _asset: GLTFResource;\n  private _glTFEntity: Entity;\n  private _clipPreview: string;\n  private _hasBuiltNode: boolean = false;\n  private _controllerUpdateFlag: UpdateFlag;\n\n  get asset() {\n    return this._asset;\n  }\n\n  set asset(value: GLTFResource) {\n    const { _animatorController: animatorController, _speed: speed } = this;\n    const entity = this._glTFEntity;\n    if (value && value.defaultSceneRoot === this._glTFEntity) {\n      return;\n    }\n    if (!this._hasBuiltNode) {\n      entity.clearChildren();\n      if (value !== null) {\n        entity?.destroy();\n        const gltfEntity = value.defaultSceneRoot.clone();\n        this._animator = gltfEntity.getComponent(Animator);\n        this.entity.addChild(gltfEntity);\n        gltfEntity.isActive = this.enabled;\n        this._glTFEntity = gltfEntity;\n      }\n    }\n    if (animatorController) {\n      this._animator.animatorController = animatorController;\n      this._animator.speed = speed;\n      this._playState();\n    }\n    this._asset = value;\n  }\n\n  get animatorController(): AnimatorController {\n    return this._animatorController;\n  }\n\n  set animatorController(animatorController: AnimatorController) {\n    const { _animator: animator } = this;\n    if (animatorController !== this._animatorController) {\n      this._controllerUpdateFlag && this._controllerUpdateFlag.destroy();\n      // @ts-ignore\n      this._controllerUpdateFlag = animatorController && animatorController._registerChangeFlag();\n      this._animatorController = animatorController;\n      if (animator) {\n        animator.animatorController = animatorController;\n        this._playState();\n      }\n    }\n  }\n\n  get speed(): number {\n    return this._speed;\n  }\n\n  set speed(speed: number) {\n    const { _animator: animator } = this;\n    this._speed = speed;\n    if (animator) {\n      animator.speed = speed;\n      this._playState();\n    }\n  }\n\n  get animator() {\n    return this._animator;\n  }\n\n  get clipPreview() {\n    return this._clipPreview;\n  }\n\n  set clipPreview(value: string) {\n    if (this._animator) {\n      if (value) {\n        this._animator.play(value, 0);\n      } else {\n        this._playDefaultState();\n      }\n    }\n    this._clipPreview = value;\n  }\n\n  constructor(entity) {\n    super(entity);\n  }\n\n  /**\n   * Init.\n   * @param props - Init props\n   */\n  init(props): void {\n    const { asset = null, speed, animatorController, clipPreview,  isClone } = props;\n    if (isClone) {\n      const rootName = (props as any).gltfRootName;\n      if (rootName) {\n        this._glTFEntity = this.entity.findByName(rootName);\n      }\n    }\n    if (!this._glTFEntity) {\n      const rootName = `GLTF-${Date.now()}`;\n      (props as any).gltfRootName = rootName;\n      this._glTFEntity = this.entity.createChild(rootName);\n      this._hasBuiltNode = false;\n    } else {\n      this._hasBuiltNode = true;\n    }\n\n    this.asset = asset;\n    this.animatorController = animatorController;\n    this.speed = speed;\n    this.clipPreview = clipPreview;\n  }\n\n  update() {\n    if (this._animator) {\n      if (this._controllerUpdateFlag?.flag) {\n        this._playState();\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  _onEnable(): void {\n    this._glTFEntity && (this._glTFEntity.isActive = true);\n    this.engine._componentsManager.addOnUpdateAnimations(this);\n  }\n\n  /**\n   * @override\n   */\n  _onDisable(): void {\n    this._glTFEntity && (this._glTFEntity.isActive = false);\n    this.engine._componentsManager.removeOnUpdateAnimations(this);\n  }\n\n  _playState() {\n    const playStateName = this._clipPreview;\n    if (playStateName) {\n      this._animator.play(playStateName, 0);\n      if (this._controllerUpdateFlag?.flag) {\n        this._controllerUpdateFlag.flag = false;\n      }\n    } else {\n      this._playDefaultState();\n    }\n  }\n\n  _playDefaultState() {\n    const { _animatorController: animatorController, _animator: animator } = this;\n    if (!animator) return;\n    if (animatorController) {\n      const { layers } = animatorController;\n      for (let i = 0, length = layers.length; i < length; ++i) {\n        //@ts-ignore\n        const defaultState = layers[i]?.stateMachine?._defaultState ?? layers[i]?.stateMachine?.states[0];\n        const defaultStateName = defaultState?.name;\n        if (defaultStateName) {\n          animator.play(defaultStateName, i);\n          if (this._controllerUpdateFlag?.flag) {\n            this._controllerUpdateFlag.flag = false;\n          }\n        }\n      }\n    }\n  }\n}\n","import { BlinnPhongMaterial, Entity, MeshRenderer, PrimitiveMesh } from \"@oasis-engine/core\";\n\n// Only for editor\nexport class Model extends MeshRenderer {\n  private _props: Object = null;\n\n  constructor(entity: Entity) {\n    super(entity);\n    this.setMaterial(new BlinnPhongMaterial(this.engine));\n  }\n\n  get material(): any {\n    return this.getMaterial();\n  }\n\n  set material(mtl: any) {\n    this.setMaterial(mtl);\n  }\n\n  setProps(props: any = {}) {\n    if (this._props !== props) {\n      this._props = props;\n    }\n\n    switch (props.geometryType) {\n      case \"Sphere\":\n        this.mesh = PrimitiveMesh.createSphere(this._engine, props.sphereRadius, props.sphereSegments);\n        break;\n\n      case \"Cylinder\":\n        this.mesh = PrimitiveMesh.createCylinder(\n          this._engine,\n          props.cylinderRadiusTop,\n          props.cylinderRadiusBottom,\n          props.cylinderHeight,\n          props.cylinderRadialSegments,\n          props.cylinderHeightSegments\n        );\n        break;\n\n      case \"Plane\":\n        this.mesh = PrimitiveMesh.createPlane(\n          this._engine,\n          props.planeWidth,\n          props.planeHeight,\n          props.planeHorizontalSegments,\n          props.planeVerticalSegments\n        );\n        break;\n\n      case \"Box\":\n        this.mesh = PrimitiveMesh.createCuboid(this._engine, props.boxWidth, props.boxHeight, props.boxDepth);\n        break;\n    }\n  }\n\n  updateProp(key: string, value: string | number) {\n    const props = this._props;\n    props[key] = value;\n    this.setProps(props);\n  }\n}\n","import { Component, Entity } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { SchemaResource } from \"../resources\";\nimport { Plugin } from \"./Plugin\";\nexport class PluginManager implements PluginHook {\n  private registeredPlugins: Set<Plugin> = new Set();\n  private plugins: PluginHook[] = [];\n\n  register(plugin: Plugin) {\n    this.registeredPlugins.add(plugin);\n  }\n\n  boot(oasis: Oasis) {\n    for (let plugin of this.registeredPlugins.values()) {\n      if (typeof plugin === \"function\") {\n        plugin = plugin(oasis);\n      }\n      this.plugins.push(plugin);\n    }\n  }\n\n  reset() {\n    this.registeredPlugins.clear();\n    this.plugins = [];\n  }\n\n  nodeAdded(entity: Entity) {\n    this.delegateMethod(\"nodeAdded\", entity);\n  }\n\n  private delegateMethod(name: keyof PluginHook, ...args) {\n    this.plugins.forEach((plugin) => plugin[name] && (plugin[name] as any)(...args));\n  }\n}\n\nexport interface PluginHook {\n  oasis?: Oasis;\n  nodeAdded?(entity: Entity): any;\n  beforeNodeUpdated?(id: string, key: string, value: any): any;\n  nodeUpdated?(updateConfig?: { id: string; key: string; value: any }): any;\n  abilityAdded?(ability: Component): any;\n  beforeAbilityAdded?(config: any): any;\n  beforeAbilityUpdated?(id: string, key: string, value: any): any;\n  abilityUpdated?(updateConfig?: { id: string; key: string; value: any }): any;\n  schemaParsed?(): any;\n  abilityDeleted?(id: string): any;\n  beforeAbilityDeleted?(id: string): any;\n  beforeNodeDeleted?(config: any): any;\n  beforeResourceRemove?(id: string): any;\n  resourceUpdated?(info: { resource: SchemaResource; id: string; key: string; value: any }): any;\n  beforeResourceUpdate?(id: string, key: string, value: any): any;\n  // todo type\n  beforeResourceAdd?(resource: any): any;\n  resourceAdded?(resource: any): any;\n  beforeSceneUpdated?(field: string, key: string, value: any): any;\n  sceneUpdated?(updateConfig?: { type: string; key: string; value: any }): any;\n}\n\nexport function pluginHook(options: Partial<{ before: keyof PluginHook; after: keyof PluginHook }>): MethodDecorator {\n  return function (target: any, propertyName: string, descriptor: TypedPropertyDescriptor<any>) {\n    const method = descriptor.value;\n\n    descriptor.value = function (...args: any[]) {\n      options.before && this.oasis.pluginManager.delegateMethod(options.before, ...args);\n      return Promise.resolve(method.apply(this, arguments)).then((returnObj) => {\n        options.after && this.oasis.pluginManager.delegateMethod(options.after, returnObj);\n        return returnObj;\n      });\n    };\n  };\n}\n","import { Color, Vector2, Vector3, Vector4, SphericalHarmonics3 } from \"@oasis-engine/math\";\n\n/**\n * temp compa\n * @param config\n */\nexport function compatibleToV2(config) {\n  const { abilities = {}, assets = {}, scene = {} } = config;\n  const ids = Object.keys(abilities);\n  const assetKeys = Object.keys(assets);\n  const sceneKeys = Object.keys(scene || {});\n\n  for (let i = 0, l = ids.length; i < l; ++i) {\n    handleComponents(abilities[ids[i]].props);\n  }\n\n  for (let i = 0, l = assetKeys.length; i < l; ++i) {\n    handleAssets(assets[assetKeys[i]].props);\n  }\n\n  for (let i = 0, l = sceneKeys.length; i < l; ++i) {\n    handleSceneProps(scene[sceneKeys[i]].props);\n  }\n\n  return config;\n}\n\n// TODO temp\nfunction handleComponents(props) {\n  const keys = Object.keys(props);\n  for (let i = 0, l = keys.length; i < l; ++i) {\n    const k = keys[i];\n    const v = props[k];\n\n    if (Array.isArray(v) && typeof v[0] !== \"object\") {\n      if ([\"color\", \"diffuseColor\", \"specularColor\"].indexOf(k) !== -1) {\n        props[k] = new Color(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 4) {\n        props[k] = new Vector4(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 3) {\n        props[k] = new Vector3(v[0], v[1], v[2]);\n      } else if (v.length === 2) {\n        props[k] = new Vector2(v[0], v[1]);\n      }\n    }\n  }\n}\n\nconst sh = new SphericalHarmonics3();\n\nfunction handleSceneProps(props) {\n  const keys = Object.keys(props);\n  for (let i = 0, l = keys.length; i < l; ++i) {\n    const k = keys[i];\n    const v = props[k];\n\n    if (Array.isArray(v) && typeof v[0] !== \"object\") {\n      if (/color/i.test(k)) {\n        props[k] = new Color(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 4) {\n        props[k] = new Vector4(v[0], v[1], v[2], v[3]);\n      } else if (v.length === 3) {\n        props[k] = new Vector3(v[0], v[1], v[2]);\n      } else if (v.length === 2) {\n        props[k] = new Vector2(v[0], v[1]);\n      }\n    } else if (v && k === \"diffuseSphericalHarmonics\") {\n      sh.setValueByArray(JSON.parse(v));\n      props[k] = sh;\n    }\n  }\n}\n\nfunction handleAssets(props: any = {}) {\n  if (!props) {\n    return;\n  }\n  const keys = Object.keys(props);\n  for (let i = 0, l = keys.length; i < l; i++) {\n    const key = keys[i];\n    const value = props[key];\n\n    if (key === \"newMaterial\" || key === \"scripts\") {\n      continue;\n    }\n\n    if (Array.isArray(value) && typeof value[0] !== \"object\") {\n      if ([\"emissiveColor\", \"diffuseColor\", \"specularColor\", \"baseColor\"].indexOf(key) !== -1) {\n        props[key] = new Color(value[0], value[1], value[2], value[3]);\n      } else if (value.length === 4) {\n        props[key] = new Vector4(value[0], value[1], value[2], value[3]);\n      } else if (value.length === 3) {\n        props[key] = new Vector3(value[0], value[1], value[2]);\n      } else if (value.length === 2) {\n        props[key] = new Vector2(value[0], value[1]);\n      }\n    }\n  }\n}\n","import { Component } from \"@oasis-engine/core\";\nimport { Oasis } from \"./Oasis\";\nimport { Plugin } from \"./plugins/Plugin\";\nimport { PluginManager } from \"./plugins/PluginManager\";\nimport { Options } from \"./types\";\nimport { compatibleToV2 } from \"./temp.compatible\";\n\nconst CURRENT_SCHEMA_VERSION = 3;\n\nexport class Parser {\n  private pluginManager: PluginManager = new PluginManager();\n  /**\n   * Parse a scene config.\n   * @param options - Options of scene\n   */\n  public parse(options: Options): Promise<Oasis> {\n    if (options?.config?.version !== CURRENT_SCHEMA_VERSION) {\n      console.warn(\n        `schema-parser: schema version \"${options?.config?.version}\" is out of date, please re-pull the latest version (version ${CURRENT_SCHEMA_VERSION}) of the schema`\n      );\n    }\n    compatibleToV2(options.config);\n    return Oasis.create(options, this.pluginManager);\n  }\n\n  register(plugin: Plugin) {\n    this.pluginManager.register(plugin);\n  }\n\n  resetPlugins() {\n    this.pluginManager.reset();\n  }\n\n  private constructor() {}\n\n  static create(): Parser {\n    const parser = new Parser();\n    return parser;\n  }\n\n  /** @internal */\n  public static _components: { [namespace: string]: { [compName: string]: Component } } = {};\n  /**\n   * Register parsing component\n   * @param namespace - Namespace\n   * @param components - Components\n   */\n  static registerComponents(namespace: string, components: { [key: string]: any }) {\n    if (!this._components[namespace]) {\n      this._components[namespace] = {};\n    }\n    Object.assign(this._components[namespace], components);\n  }\n}\n\nexport const parser = Parser.create();\n","export function switchElementsIndex(elements: any[], currentIndex: number, targetIndex: number) {\n  if (currentIndex === targetIndex || targetIndex === null || targetIndex === undefined) {\n    return;\n  }\n  [elements[currentIndex], elements[targetIndex]] = [elements[targetIndex], elements[currentIndex]];\n}\n\nexport function isAsset(config: any): boolean {\n  return config && config.type === \"asset\";\n}\n\nexport function getAllGetters(obj: any): Array<string> {\n  const result = [];\n  const prototype = Object.getPrototypeOf(obj);\n  const prototype_property_descriptors = Object.getOwnPropertyDescriptors(prototype);\n  for (const [property, descriptor] of Object.entries(prototype_property_descriptors)) {\n    if (typeof descriptor.get === \"function\") {\n      result.push(property);\n    }\n  }\n  return result;\n}\n\nexport function union(arr1: Array<any>, arr2: Array<any>): Array<any> {\n  return arr1.concat(arr2.filter((v) => !(arr1.indexOf(v) > -1)));\n}\n\n// https://github.com/BabylonJS/Babylon.js/blob/d780145531ac1b1cee85cbfba4d836dcc24ab58e/src/Engines/Extensions/engine.textureSelector.ts#L70\n// Intelligently add supported compressed formats in order to check for.\n// Check for ASTC support first as it is most powerful and to be very cross platform.\n// Next PVRTC & DXT, which are probably superior to ETC1/2.\n// Likely no hardware which supports both PVR & DXT, so order matters little.\n// ETC2 is newer and handles ETC1 (no alpha capability), so check for first.\nexport const compressedTextureLoadOrder = {\n  astc: 1,\n  s3tc: 2,\n  pvrtc: 3,\n  etc: 4,\n  etc1: 5\n};\n","import { Logger, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { SchemaResourceManager } from \"../ResourceManager\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { isAsset } from \"../utils\";\n\ninterface IResourceMeta {\n  name?: string;\n  url?: string;\n  size?: number;\n  source?: string;\n}\n\nexport abstract class SchemaResource {\n  protected _meta: IResourceMeta = {};\n  protected _attachedResources: Array<SchemaResource> = [];\n\n  /**\n   * Resource\n   */\n  get resource() {\n    return this._resource;\n  }\n\n  get meta(): IResourceMeta {\n    return this._meta;\n  }\n\n  get attachedResources() {\n    return this._attachedResources;\n  }\n\n  protected setMeta() {}\n\n  constructor(protected resourceManager: SchemaResourceManager, protected _resource?: any) {\n    this.setMeta();\n  }\n\n  abstract load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<SchemaResource>;\n  loadWithAttachedResources(\n    resourceLoader: any,\n    assetConfig: AssetConfig,\n    oasis: Oasis\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      this.load(resourceLoader, assetConfig, oasis)\n        .then(() => {\n          resolve({\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          });\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  getProps(): any {\n    return {};\n  }\n\n  bind(): void {}\n  attach(): void {}\n\n  update(key: string, value: any) {\n    if (isAsset(value)) {\n      const resource = this.resourceManager.get(value.id);\n      if (resource) {\n        this._resource[key] = resource.resource;\n      } else {\n        Logger.warn(`SchemaResource: ${this.meta.name} can't find asset, which id is: ${value.id}`);\n      }\n    } else {\n      this._resource[key] = value;\n    }\n  }\n\n  updateMeta(key: string, value: any) {\n    this._meta[key] = value;\n  }\n\n  onDestroy() {}\n}\n","import {\n  ResourceManager,\n} from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { SchemaResource } from \"./SchemaResource\";\n\nexport class AnimationClipResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<any> {\n    return new Promise((resolve) => {\n      this._resource = assetConfig.props || {};\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load AnimationClip Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    return this._resource;\n  }\n}\n","import { AnimationClipResource } from \"./AnimationClipResource\";\nimport {\n  AnimatorController,\n  AnimatorControllerLayer,\n  AnimatorStateMachine,\n  AnimatorStateTransition\n} from \"@oasis-engine/core\";\nimport { ResourceManager } from \"@oasis-engine/core\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\n\nexport class AnimatorControllerResource extends SchemaResource {\n  public gltf;\n  private animatorControllerData;\n  private animationClipAssets: any[];\n  private animationsIndices: {\n    name: string;\n    index: number;\n  }[];\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<any> {\n    return new Promise((resolve) => {\n      const { animatorController, animationClips: animationClipAssets, animationsIndices, gltf } =\n        assetConfig.props || {};\n      this._resource = new AnimatorController();\n      this.animatorControllerData = animatorController;\n      this.animationsIndices = animationsIndices || [];\n      this.animationClipAssets = animationClipAssets || [];\n      this.gltf = gltf;\n      !animatorController && this._setDefaultDataByAnimationClip();\n      this.setMetaData(\"name\", assetConfig.name);\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      const clipLoadPromises = [];\n      this.load(resourceManager, assetConfig).then(() => {\n        const result: any = {\n          resources: [this],\n          structure: {\n            index: 0,\n            props: {\n              animationClips: []\n            }\n          }\n        };\n\n        const animations = this.animationsIndices;\n        for (let i = 0, length = animations.length; i < length; ++i) {\n          const clip = animations[i];\n          const clipResourse = new AnimationClipResource(this.resourceManager);\n          this.attachedResources.push(clipResourse);\n          clipLoadPromises.push(\n            clipResourse.loadWithAttachedResources(resourceManager, {\n              type: \"animationClip\",\n              name: clip.name,\n              props: clip\n            })\n          );\n        }\n\n        Promise.all(clipLoadPromises).then((res) => {\n          const { animationClips } = result.structure.props;\n          res.forEach((clip) => {\n            const clipStructure = clip.structure;\n            const clipResource = clip.resources[clipStructure.index];\n            result.resources.push(clipResource);\n            clipStructure.index = result.resources.length - 1;\n            animationClips.push(clipStructure);\n          });\n          resolve(result);\n        });\n      });\n    });\n  }\n\n  setMetaData(key, value) {\n    this._meta[key] = value;\n  }\n\n  update(key: string, value: any) {\n    this._initAnimatorController(value);\n  }\n\n  bind() {\n    const { animatorControllerData, animationClipAssets } = this;\n    this._bindClips(animationClipAssets);\n    if (animatorControllerData) {\n      this._initAnimatorController(animatorControllerData);\n    } else {\n      this._setDefaultDataByAnimationClipAsset();\n    }\n  }\n\n  _initAnimatorController(animatorControllerData) {\n    const { animations } = this.gltf || {};\n    const { layers } = animatorControllerData;\n    if (!animations || !layers) return;\n    this._resource.clearLayers();\n    for (let i = 0, length = layers.length; i < length; ++i) {\n      const { name, blending, weight, stateMachine: stateMachineData } = layers[i];\n      if (!stateMachineData) continue;\n      const layer = new AnimatorControllerLayer(name);\n      layer.blendingMode = blending;\n      layer.weight = weight;\n      const { states } = stateMachineData;\n      const stateMachine = new AnimatorStateMachine();\n      let stateMachineTransitions = [];\n      for (let j = 0, length = states.length; j < length; ++j) {\n        const stateData = states[j];\n        const {\n          name,\n          transitions,\n          clip,\n          speed,\n          wrapMode,\n          clipStartNormalizedTime,\n          clipEndNormalizedTime,\n          isDefaultState\n        } = stateData;\n        const { id: clipAssetId } = clip || {};\n        if (!clipAssetId) continue;\n        const uniqueName = stateMachine.makeUniqueStateName(name);\n        if (uniqueName !== name) {\n          console.warn(`AnimatorState name is existed, name: ${name} reset to ${uniqueName}`);\n        }\n        const state = stateMachine.addState(uniqueName);\n        state.speed = speed;\n        state.wrapMode = wrapMode;\n        const animationIndex = this.resourceManager.get(clipAssetId).resource;\n        const animationClip = animations[animationIndex.index];\n        if (!animationClip) continue;\n        state.clip = animationClip;\n        state.clipStartTime = animationClip.length * clipStartNormalizedTime;\n        state.clipEndTime = animationClip.length * clipEndNormalizedTime;\n        for (let j = 0, length = transitions.length; j < length; ++j) {\n          const transition = transitions[j];\n          transitions[j].srcState = state;\n          stateMachineTransitions.push(transition);\n        }\n\n        if (isDefaultState) {\n          //@ts-ignore\n          stateMachine._defaultState = state;\n        }\n      }\n      for (let j = 0, length = stateMachineTransitions.length; j < length; ++j) {\n        const transitionData = stateMachineTransitions[j];\n        const transition = new AnimatorStateTransition();\n        transition.duration = transitionData.duration;\n        transition.offset = transitionData.offset;\n        transition.exitTime = transitionData.exitTime;\n        transition.destinationState = stateMachine.findStateByName(transitionData.targetStateName);\n        transitionData.srcState.addTransition(transition);\n        delete transitionData.srcState;\n      }\n      layer.stateMachine = stateMachine;\n      this._resource.addLayer(layer);\n    }\n  }\n\n  _bindClips(animationClips) {\n    for (let i = 0, length = animationClips.length; i < length; i++) {\n      const clipAsset = animationClips[i];\n      const clipResource = this.resourceManager.get(clipAsset.id);\n      if (clipResource) {\n        this._attachedResources.push(clipResource);\n      } else {\n        `AnimatorResource: ${this.meta.name} can't find asset \"animationClip\", which id is: ${clipAsset.id}`;\n      }\n    }\n  }\n\n  _setDefaultDataByAnimationClipAsset() {\n    const { animationClipAssets } = this;\n    if (!animationClipAssets.length) {\n      return;\n    }\n    let clips = [];\n    for (let i = 0, length = animationClipAssets.length; i < length; i++) {\n      const clipAsset = this.resourceManager.get(animationClipAssets[i].id);\n      clips.push(clipAsset.resource);\n    }\n    this.animationsIndices = clips;\n    this._setDefaultDataByAnimationClip();\n  }\n\n  _setDefaultDataByAnimationClip() {\n    const { animationsIndices, _resource: animatorController, gltf } = this;\n    if (!animationsIndices.length || !gltf) {\n      return;\n    }\n    const { animations } = gltf\n    const layer = new AnimatorControllerLayer(\"layer\");\n    const animatorStateMachine = new AnimatorStateMachine();\n    animatorController.addLayer(layer);\n    layer.stateMachine = animatorStateMachine;\n    for (let i = 0, length = animationsIndices.length; i < length; i++) {\n      const animationIndex = animationsIndices[i];\n      const { name, index} = animationIndex\n      const uniqueName = animatorStateMachine.makeUniqueStateName(name);\n      if (uniqueName !== name) {\n        console.warn(`AnimatorState name is existed, name: ${name} reset to ${uniqueName}`);\n      }\n      const animatorState = animatorStateMachine.addState(uniqueName);\n      animatorState.clip = animations[index];\n    }\n  }\n}\n","import { AssetType, GLCapabilityType, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig } from \"../types\";\nimport { SchemaResource } from \"./SchemaResource\";\n\nexport class TextureResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<TextureResource> {\n    return new Promise((resolve, reject) => {\n      let url: string;\n      let assetType = AssetType.Texture2D;\n      if (this.resourceManager.useCompressedTexture && assetConfig?.props?.compression?.compressions.length) {\n        const rhi = oasis.engine._hardwareRenderer;\n        const compressions = assetConfig.props.compression.compressions;\n        for (let i = 0; i < compressions.length; i++) {\n          const compression = compressions[i];\n          if (compression.container === \"ktx\" && rhi.canIUse(GLCapabilityType[compression.type])) {\n            url = compression.url;\n            assetType = AssetType.KTX;\n            break;\n          }\n        }\n      }\n\n      url = url ?? assetConfig.url;\n\n      resourceManager\n        .load({ url, type: assetType })\n        .then((res) => {\n          this._resource = res;\n          resolve(this);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this._meta.name = this.resource.name;\n    }\n  }\n}\n","import { BlinnPhongMaterial, Logger, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class BlinnPhongMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<BlinnPhongMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new BlinnPhongMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n      this._resource = assetObj;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof BlinnPhongMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load BlinnPhongMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(\n            `BlinnPhongMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`\n          );\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n","import { Logger, PBRMaterial, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nconst attrs = [\n  \"metallic\",\n  \"roughness\",\n  \"roughnessMetallicTexture\",\n\n  // pbr base\n  \"tilingOffset\",\n  \"baseColor\",\n  \"normalTextureIntensity\",\n  \"emissiveColor\",\n  \"occlusionTextureIntensity\",\n  \"baseTexture\",\n  \"normalTexture\",\n  \"emissiveTexture\",\n  \"occlusionTexture\",\n\n  // base material\n  \"isTransparent\",\n  \"alphaCutoff\",\n  \"renderFace\",\n  \"blendMode\"\n];\nexport class PBRMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<PBRMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new PBRMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this._resource = assetObj;\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof PBRMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load PBRMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          attrs.forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    attrs.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(`PBRMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`);\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n","import { Logger, PBRSpecularMaterial, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nconst attrs = [\n  \"specularColor\",\n  \"glossiness\",\n  \"specularGlossinessTexture\",\n\n  // pbr base\n  \"tilingOffset\",\n  \"baseColor\",\n  \"normalTextureIntensity\",\n  \"emissiveColor\",\n  \"occlusionTextureIntensity\",\n  \"baseTexture\",\n  \"normalTexture\",\n  \"emissiveTexture\",\n  \"occlusionTexture\",\n\n  // base material\n  \"isTransparent\",\n  \"alphaCutoff\",\n  \"renderFace\",\n  \"blendMode\"\n];\n\nexport class PBRSpecularMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<PBRSpecularMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new PBRSpecularMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n      this._resource = assetObj;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof PBRSpecularMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load PBRSpecularMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          Object.keys(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    attrs.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(\n            `PBRSpecularMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`\n          );\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n","import { Logger, UnlitMaterial, ResourceManager, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class UnlitMaterialResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<UnlitMaterialResource> {\n    return new Promise((resolve) => {\n      const assetObj = new UnlitMaterial(resourceManager.engine);\n      this.configProps = assetConfig.props;\n\n      for (let k in this.configProps) {\n        if (!isAsset(this.configProps[k])) {\n          assetObj[k] = this.configProps[k];\n        }\n      }\n      this._resource = assetObj;\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof UnlitMaterial) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load PBRMaterial Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const material = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(material[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, material[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    const props = getAllGetters(this.resource);\n    props.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    Object.keys(this.configProps).forEach((attr) => {\n      const value = this.configProps[attr];\n      if (isAsset(value)) {\n        const textureResource = this.resourceManager.get(value.id);\n        if (textureResource && textureResource instanceof TextureResource) {\n          resource[attr] = textureResource.resource;\n          this._attachedResources.push(textureResource);\n        } else {\n          resource[attr] = null;\n          Logger.warn(`PBRMaterialResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`);\n        }\n      } else {\n        resource[attr] = value;\n      }\n    });\n  }\n}\n","import { AnimatorControllerResource } from \"./AnimatorControllerResource\";\nimport {\n  AssetType,\n  Entity,\n  Logger,\n  MeshRenderer,\n  PBRMaterial,\n  PBRSpecularMaterial,\n  ResourceManager,\n  UnlitMaterial\n} from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { BlinnPhongMaterialResource } from \"./BlinnPhongMaterialResource\";\nimport { PBRMaterialResource } from \"./PBRMaterialResource\";\nimport { PBRSpecularMaterialResource } from \"./PBRSpecularMaterialResource\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { UnlitMaterialResource } from \"./UnlitMaterialResource\";\n\nexport class GLTFResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<any> {\n    return resourceManager.load<any>({ url: assetConfig.url, type: AssetType.Prefab }).then((res) => {\n      const gltf = res;\n      if (assetConfig.props) {\n        gltf.newMaterial = (assetConfig.props as any).newMaterial;\n        gltf.animatorControllers = (assetConfig.props as any).animatorControllers;\n      }\n      this._resource = gltf;\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig,\n    oasis: Oasis\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve) => {\n      this.load(resourceManager, assetConfig, oasis).then(() => {\n        const gltf = this.resource;\n        const { materials = [], _animationsIndices = [] } = gltf;\n        const materialLoadPromises = [];\n        const clipLoadPromises = [];\n        let animatorControllerLoadPromise: Promise<any>;\n        const result = {\n          resources: [this],\n          structure: {\n            index: 0,\n            props: {\n              newMaterial: [],\n              animatorControllers: []\n            }\n          }\n        };\n        if (materials?.length) {\n          for (let i = 0; i < materials.length; i++) {\n            const material = materials[i];\n            let materialResource = null;\n            let type = \"\";\n\n            if (material instanceof PBRMaterial) {\n              materialResource = new PBRMaterialResource(this.resourceManager);\n              type = \"PBRMaterial\";\n            } else if (material instanceof UnlitMaterial) {\n              materialResource = new UnlitMaterialResource(this.resourceManager);\n              type = \"UnlitMaterial\";\n            } else if (material instanceof PBRSpecularMaterial) {\n              materialResource = new PBRSpecularMaterialResource(this.resourceManager);\n              type = \"PBRSpecularMaterial\";\n            } else {\n              materialResource = new BlinnPhongMaterialResource(this.resourceManager);\n              type = \"BlinnPhongMaterial\";\n            }\n\n            this._attachedResources.push(materialResource);\n            materialLoadPromises.push(\n              materialResource.loadWithAttachedResources(resourceManager, {\n                type,\n                name: material.name,\n                resource: material\n              })\n            );\n          }\n        }\n\n        if (_animationsIndices.length) {\n          const animatorControllerResource = new AnimatorControllerResource(this.resourceManager);\n          this._attachedResources.push(animatorControllerResource);\n          animatorControllerLoadPromise = animatorControllerResource.loadWithAttachedResources(resourceManager, {\n            type: \"animatorController\",\n            name: \"AnimatorController\",\n            props: {\n              animationsIndices: _animationsIndices,\n              gltf: this._resource\n            }\n          });\n        }\n\n        const loadAttachedMaterial = Promise.all(materialLoadPromises).then((res) => {\n          const newMaterial = result.structure.props.newMaterial;\n          res.forEach((mat) => {\n            const matStructure = mat.structure;\n            const matResource = mat.resources[matStructure.index];\n            result.resources.push(matResource);\n            matStructure.index = result.resources.length - 1;\n            for (const key in matStructure.props) {\n              if (matStructure.props.hasOwnProperty(key)) {\n                const textureStructure = matStructure.props[key];\n                const textureResource = mat.resources[textureStructure.index];\n                result.resources.push(textureResource);\n                textureStructure.index = result.resources.length - 1;\n              }\n            }\n            newMaterial.push(matStructure);\n          });\n        });\n        const loadAttachedController = animatorControllerLoadPromise\n          ? animatorControllerLoadPromise.then((res) => {\n              const { animatorControllers } = result.structure.props;\n              const controllerStructure = res.structure;\n              const controllerResource = res.resources[controllerStructure.index];\n              result.resources.push(controllerResource as any);\n              controllerStructure.index = result.resources.length - 1;\n              const { animationClips } = controllerStructure.props;\n              if (animationClips) {\n                for (let i = 0, length = animationClips.length; i < length; ++i) {\n                  const clipStructure = animationClips[i];\n                  const clipResource = res.resources[clipStructure.index];\n                  result.resources.push(clipResource);\n                  clipStructure.index = result.resources.length - 1;\n                }\n              }\n              animatorControllers.push(controllerStructure);\n            })\n          : Promise.resolve();\n        Promise.all([loadAttachedMaterial, loadAttachedController]).then(() => {\n          resolve(result);\n        });\n      });\n    });\n  }\n\n  setMeta(assetConfig?: AssetConfig) {\n    if (assetConfig) {\n      this.meta.name = assetConfig.name;\n    }\n  }\n\n  bind() {\n    const resource = this._resource;\n    this.bindMaterials(resource.newMaterial);\n    this.bindAnimatorControllers(resource.animatorControllers);\n  }\n\n  update(key: string, value: any) {\n    if (key === \"newMaterial\") {\n      this.bindMaterials(value);\n    } else {\n      this._resource[key] = value;\n    }\n  }\n\n  private bindMaterials(newMaterialsConfig) {\n    const newMaterialCount = newMaterialsConfig.length;\n    if (!newMaterialsConfig || !newMaterialsConfig.length) {\n      return;\n    }\n\n    const gltf = this._resource;\n\n    const newMaterials = new Array(newMaterialCount);\n    gltf.newMaterial = newMaterials;\n\n    for (let i = 0; i < newMaterialsConfig.length; i++) {\n      const mtlResource = this.resourceManager.get(newMaterialsConfig[i].id);\n      if (mtlResource) {\n        this._attachedResources.push(mtlResource);\n        newMaterials[i] = mtlResource.resource;\n      } else {\n        Logger.warn(\n          `GLTFResource: ${this.meta.name} can't find asset \"material\", which id is: ${newMaterialsConfig[i].id}`\n        );\n      }\n    }\n\n    const gltfRoot = gltf.defaultSceneRoot as Entity;\n    const originMaterials = gltf.materials;\n    const meshRenderers: MeshRenderer[] = gltfRoot.getComponentsIncludeChildren(MeshRenderer, []);\n\n    for (let i = 0; i < newMaterialCount; i++) {\n      const newMaterial = newMaterials[i];\n      const originMaterial = originMaterials[i];\n      for (let j = 0; j < meshRenderers.length; j++) {\n        const meshRenderer = meshRenderers[j];\n        const meshMaterials = meshRenderer.getMaterials();\n        for (let k = 0; k < meshMaterials.length; k++) {\n          if (originMaterial === meshMaterials[k]) {\n            meshRenderer.setMaterial(k, newMaterial);\n          }\n        }\n      }\n    }\n  }\n\n  private bindAnimatorControllers(animatorControllers) {\n    for (let i = 0, length = animatorControllers.length; i < length; i++) {\n      const animatorControllerAsset = animatorControllers[i];\n      const controllerResource = <AnimatorControllerResource>this.resourceManager.get(animatorControllerAsset.id);\n      controllerResource.gltf = this._resource;\n      if (controllerResource) {\n        this._attachedResources.push(controllerResource);\n      } else {\n        `GLTFResource: ${this.meta.name} can't find asset \"animatorController\", which id is: ${animatorControllerAsset.id}`;\n      }\n    }\n  }\n}\n","import { SchemaResource } from \"./SchemaResource\";\nimport { AssetConfig } from \"../types\";\nimport { Oasis } from \"../Oasis\";\nimport { Parser } from \"../Parser\";\n\nexport const scriptAbility = {};\nexport function script(name: string) {\n  return (target: any) => {\n    scriptAbility[name] = target;\n  };\n}\nexport class ScriptResource extends SchemaResource {\n  private isInit = false;\n\n  private initScriptContext() {\n    if (this.isInit) {\n      return;\n    }\n    this.isInit = true;\n    (window as any).__o3_script_context__ = {\n      o3: Parser._components[\"o3\"],\n      script: (name: string) => {\n        return (target: any) => {\n          scriptAbility[name] = target;\n        };\n      }\n    };\n  }\n\n  load(resourceLoader, assetConfig: AssetConfig, oasis: Oasis): Promise<ScriptResource> {\n    this.initScriptContext();\n    return new Promise((resolve) => {\n      const config = assetConfig as any;\n      const scripts = config.props.scripts;\n\n      if (!this.resourceManager.isLocal) {\n        const scriptDom = document.createElement(\"script\");\n        scriptDom.crossOrigin = \"anonymous\";\n        this.setMeta(assetConfig);\n        scriptDom.onload = () => {\n          const o3Scripts = (window as any).o3Scripts;\n          for (let i = 0; i < scripts.length; i++) {\n            const name = scripts[i].name;\n            this._resource = o3Scripts && o3Scripts[name];\n            scriptAbility[name] = this._resource;\n          }\n          resolve(this);\n        };\n        scriptDom.src = assetConfig.url;\n        document.body.appendChild(scriptDom);\n      } else {\n        for (let i = 0; i < scripts.length; i++) {\n          const name = scripts[i].name;\n          scriptAbility[name] = oasis.options?.scripts[name];\n        }\n        resolve(this);\n      }\n    });\n  }\n\n  setMeta(assetConfig?: AssetConfig) {\n    if (assetConfig) {\n      this._meta.name = assetConfig.name;\n      this._meta.url = assetConfig.url;\n      this._meta.source = assetConfig.source;\n    }\n  }\n}\n","import { Logger, ResourceManager, Sprite, Texture } from \"@oasis-engine/core\";\nimport { AssetConfig, LoadAttachedResourceResult } from \"../types\";\nimport { getAllGetters, isAsset } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { TextureResource } from \"./TextureResource\";\n\nexport class SpriteResource extends SchemaResource {\n  private configProps;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<SpriteResource> {\n    return new Promise((resolve) => {\n      const assetObj = new Sprite(resourceManager.engine);\n      this.configProps = assetConfig.props;\n      const { configProps } = this;\n      const { pivotType, pivot } = configProps;\n\n      if (typeof pivot !== \"undefined\" && typeof pivotType !== \"undefined\" && pivotType !== SpritePivotType.Custom) {\n        switch (pivotType) {\n          case SpritePivotType.Center:\n            pivot.x = 0.5;\n            pivot.y = 0.5;\n            break;\n          case SpritePivotType.TopLeft:\n            pivot.x = 0;\n            pivot.y = 1;\n            break;\n          case SpritePivotType.Top:\n            pivot.x = 0.5;\n            pivot.y = 1;\n            break;\n          case SpritePivotType.TopRight:\n            pivot.x = 1;\n            pivot.y = 1;\n            break;\n          case SpritePivotType.Left:\n            pivot.x = 0;\n            pivot.y = 0.5;\n            break;\n          case SpritePivotType.Right:\n            pivot.x = 1;\n            pivot.y = 0.5;\n            break;\n          case SpritePivotType.BottomLeft:\n            pivot.x = 0;\n            pivot.y = 0;\n            break;\n          case SpritePivotType.Bottom:\n            pivot.x = 0.5;\n            pivot.y = 0;\n            break;\n          case SpritePivotType.BottomRight:\n            pivot.x = 1;\n            pivot.y = 0;\n            break;\n          default:\n            break;\n        }\n      }\n\n      for (let k in configProps) {\n        if (!isAsset(configProps[k]) && typeof configProps[k] !== \"undefined\") {\n          assetObj[k] = configProps[k];\n        }\n      }\n\n      this._resource = assetObj;\n      this.setMeta();\n      resolve(this);\n    });\n  }\n\n  loadWithAttachedResources(\n    resourceManager: ResourceManager,\n    assetConfig: AssetConfig\n  ): Promise<LoadAttachedResourceResult> {\n    return new Promise((resolve, reject) => {\n      let loadPromise;\n      if (assetConfig.resource instanceof SpriteResource) {\n        loadPromise = new Promise((resolve) => {\n          this._resource = assetConfig.resource;\n          this.setMeta();\n          resolve(this);\n        });\n      } else if (assetConfig.props) {\n        loadPromise = this.load(resourceManager, assetConfig);\n      } else {\n        reject(\"Load Sprite Error\");\n      }\n      if (loadPromise) {\n        loadPromise.then(() => {\n          const result: any = {\n            resources: [this],\n            structure: {\n              index: 0,\n              props: {}\n            }\n          };\n\n          const sprite = this._resource;\n          getAllGetters(this._resource).forEach((attr) => {\n            if (!(sprite[attr] instanceof Texture)) return;\n            const textureResource = new TextureResource(this.resourceManager, sprite[attr]);\n            this.attachedResources.push(textureResource);\n            result.resources.push(textureResource);\n            result.structure.props[attr] = {\n              index: result.resources.length - 1\n            };\n          });\n          resolve(result);\n        });\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    const props = getAllGetters(this.resource);\n    props.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  bind() {\n    const resource = this._resource;\n    this.configProps &&\n      Object.keys(this.configProps).forEach((attr) => {\n        const value = this.configProps[attr];\n        if (isAsset(value)) {\n          const textureResource = this.resourceManager.get(value.id);\n          if (textureResource && textureResource instanceof TextureResource) {\n            resource[attr] = textureResource.resource;\n            this._attachedResources.push(textureResource);\n          } else {\n            resource[attr] = null;\n            Logger.warn(`SpriteResource: ${this.meta.name} can't find asset \"${attr}\", which id is: ${value.id}`);\n          }\n        } else {\n          resource[attr] = value;\n        }\n      });\n  }\n}\n\nexport enum SpritePivotType {\n  Center = 0,\n  TopLeft = 1,\n  Top = 2,\n  TopRight = 3,\n  Left = 4,\n  Right = 5,\n  BottomLeft = 6,\n  Bottom = 7,\n  BottomRight = 8,\n  Custom = 9\n}\n","import { AssetType, GLCapabilityType, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"../Oasis\";\nimport { AssetConfig } from \"../types\";\nimport { SchemaResource } from \"./SchemaResource\";\n\nconst imageOrderMap = {\n  px: 0,\n  nx: 1,\n  py: 2,\n  ny: 3,\n  pz: 4,\n  nz: 5\n};\n\nexport class TextureCubeMapResource extends SchemaResource {\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig, oasis: Oasis): Promise<TextureCubeMapResource> {\n    return new Promise((resolve, reject) => {\n      const imageUrls = [];\n      let type = AssetType.TextureCube;\n      if (this.resourceManager.useCompressedTexture && assetConfig?.props?.compression?.compressions.length) {\n        const rhi = oasis.engine._hardwareRenderer;\n        const compressions = assetConfig.props.compression.compressions;\n        for (let i = 0; i < compressions.length; i++) {\n          const compression = compressions[i];\n          if (compression.container === \"ktx\" && rhi.canIUse(GLCapabilityType[compression.type])) {\n            for (const key in compression.files) {\n              if (compression.files.hasOwnProperty(key)) {\n                const image = compression.files[key];\n                imageUrls[imageOrderMap[key]] = image.url;\n              }\n            }\n            console.warn(compression.type);\n            type = AssetType.KTXCube;\n            break;\n          }\n        }\n      }\n\n      if (type === AssetType.TextureCube) {\n        for (const key in assetConfig.props.images) {\n          if (assetConfig.props.images.hasOwnProperty(key)) {\n            const image = assetConfig.props.images[key];\n            imageUrls[imageOrderMap[key]] = image.url;\n          }\n        }\n      }\n\n      resourceManager\n        .load({\n          urls: imageUrls,\n          type: type\n        })\n        .then((res) => {\n          this._resource = res;\n          resolve(this);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n}\n","import { SchemaResource } from \"./SchemaResource\";\nimport { AssetConfig } from \"../types\";\n\nexport class BaseResource extends SchemaResource {\n  load(resourceLoader, assetConfig: AssetConfig): Promise<BaseResource> {\n    return new Promise((resolve) => {\n      this._resource = assetConfig;\n      this.setMetaData(\"name\", this.resource.name);\n      this.setMetaData(\"url\", this.resource.url);\n      resolve(this);\n    });\n  }\n\n  setMetaData(key, value) {\n    this._meta[key] = value;\n  }\n}\n","import { Component, Logger } from \"@oasis-engine/core\";\nimport { Model } from \"./Model\";\nimport { Oasis } from \"./Oasis\";\nimport { Parser } from \"./Parser\";\nimport { pluginHook } from \"./plugins/PluginManager\";\nimport { scriptAbility } from \"./resources\";\nimport { ComponentConfig, Props } from \"./types\";\nimport { switchElementsIndex } from \"./utils\";\nexport class AbilityManager {\n  private abilityMap: { [id: string]: Component } = {};\n\n  constructor(private oasis: Oasis) {}\n\n  @pluginHook({ after: \"abilityAdded\", before: \"beforeAbilityAdded\" })\n  public add(abilityConfig: ComponentConfig) {\n    const { type, node: nodeId, props, id, index } = abilityConfig;\n\n    const node = this.oasis.nodeManager.get(nodeId);\n    const AbilityConstructor = this.getCompConstructor(type);\n    if (!AbilityConstructor) {\n      Logger.error(`${type} abiltiy is not defined`);\n      return;\n    }\n\n    const abilityProps = this.mixPropsToExplicitProps(props);\n    const ability = node.addComponent(AbilityConstructor);\n    const { enabled } = abilityProps;\n    if (enabled !== undefined) {\n      ability.enabled = enabled;\n    }\n\n    if (type === \"GLTFModel\") {\n      // TODO\n      (ability as any).init(abilityProps);\n    } else if (type === \"Model\") {\n      // TODO\n      (ability as any).setProps(abilityProps);\n      if (abilityProps.material) {\n        (ability as any).material = abilityProps.material;\n      }\n    } else {\n      for (let k in abilityProps) {\n        if (abilityProps[k] !== null) {\n          ability[k] = abilityProps[k];\n        }\n      }\n    }\n\n    //@ts-ignore\n    const abilityArray = node._components;\n    const currentIndex = abilityArray.length - 1;\n    switchElementsIndex(abilityArray, currentIndex, index);\n    (ability as any).id = id;\n    this.abilityMap[id] = ability;\n    return ability;\n  }\n\n  @pluginHook({ before: \"beforeAbilityUpdated\", after: \"abilityUpdated\" })\n  public update(id: string, key: string, value: any) {\n    if (value && this.checkIsAsset(value)) {\n      this.get(id)[key] = this.oasis.resourceManager.get(value.id).resource;\n    } else {\n      if (this.get(id).constructor === Model) {\n        (this.get(id) as any).updateProp(key, value);\n      } else {\n        this.get(id)[key] = value;\n      }\n    }\n\n    return { id, key, value };\n  }\n\n  public addRuntimeComponent(componentId: string, component: Component) {\n    (component as any).id = componentId;\n    this.abilityMap[componentId] = component;\n    return component;\n  }\n\n  public get(id: string): Component {\n    return this.abilityMap[id];\n  }\n\n  @pluginHook({ after: \"abilityDeleted\", before: \"beforeAbilityDeleted\" })\n  public delete(id: string) {\n    const ability = this.abilityMap[id];\n    ability.destroy();\n    delete this.abilityMap[id];\n    return id;\n  }\n\n  private getCompConstructor(type: string) {\n    const splits = type.split(\".\");\n    // script\n    if (splits[0] === \"script\") {\n      return scriptAbility[splits[1]];\n    }\n\n    const constructor = Parser._components[\"o3\"][type];\n    if (!constructor) {\n      console.warn(`${type} is not defined`);\n    }\n    return constructor;\n  }\n\n  private mixPropsToExplicitProps(props: Props) {\n    const explicitProps = { ...props };\n    for (let k in props) {\n      const prop = props[k];\n      if (prop && this.checkIsAsset(prop)) {\n        const res = this.oasis.resourceManager.get(prop.id);\n        if (res) {\n          explicitProps[k] = res.resource;\n        } else {\n          explicitProps[k] = null;\n          Logger.warn(`AbilityManager: can't get asset \"${k}\", which id is ${prop.id}`);\n        }\n      }\n    }\n    return explicitProps;\n  }\n\n  private checkIsAsset(prop: any): boolean {\n    return prop.type === \"asset\";\n  }\n}\n","import { Entity } from \"@oasis-engine/core\";\nimport { Vector3 } from \"@oasis-engine/math\";\nimport { Oasis } from \"./Oasis\";\nimport { pluginHook } from \"./plugins/PluginManager\";\nimport { NodeConfig } from \"./types\";\nimport { switchElementsIndex } from \"./utils\";\n\nexport class NodeManager {\n  private nodeMap: { [id: string]: Entity } = {};\n  private readonly root: Entity;\n\n  constructor(private oasis: Oasis) {\n    this.root = new Entity(this.oasis.engine, \"root\");\n  }\n\n  public addRootEntity() {\n    this.oasis.engine.sceneManager.activeScene.addRootEntity(this.root);\n  }\n\n  @pluginHook({ after: \"nodeAdded\" })\n  public add(nodeConfig: NodeConfig) {\n    this.create(nodeConfig);\n    this.append(nodeConfig.id, nodeConfig.parent, nodeConfig.index);\n    return this.get(nodeConfig.id);\n  }\n\n  @pluginHook({ before: \"beforeNodeUpdated\", after: \"nodeUpdated\" })\n  public update(id: string, key: string, value: any) {\n    this.get(id)[key] = value;\n    return { id, key, value };\n  }\n\n  public get(id: string): Entity {\n    return this.nodeMap[id];\n  }\n\n  public reset() {\n    this.nodeMap = {};\n  }\n\n  @pluginHook({ before: \"beforeNodeDeleted\" })\n  public delete(id: string) {\n    this.nodeMap[id].destroy();\n    delete this.nodeMap[id];\n  }\n\n  private create(nodeConfig: NodeConfig): Entity {\n    const { isActive, position, rotation, scale, id, name } = nodeConfig;\n    const entity = new Entity(this.oasis.engine, name);\n    entity.isActive = isActive;\n    entity.transform.position = new Vector3(position[0], position[1], position[2]);\n    entity.transform.rotation = new Vector3(rotation[0], rotation[1], rotation[2]);\n    entity.transform.scale = new Vector3(scale[0], scale[1], scale[2]);\n    (entity as any).id = id;\n    this.nodeMap[id] = entity;\n    return entity;\n  }\n\n  private append(childId: string, parentId: string, index: number) {\n    const child = this.nodeMap[childId];\n    const parent = this.nodeMap[parentId] || this.root;\n    parent.addChild(child);\n    //@ts-ignore\n    const children = parent._children;\n    const currentIndex = children.length - 1;\n    switchElementsIndex(children, currentIndex, index);\n  }\n}\n","import { PrimitiveMesh, SkyBoxMaterial } from \"@oasis-engine/core\";\nimport { Oasis } from \"./Oasis\";\nimport { pluginHook } from \"./plugins/PluginManager\";\n\nexport class SceneManager {\n  constructor(private oasis: Oasis) {}\n\n  init() {\n    const { scene } = this.oasis.options.config;\n    if (scene) {\n      Object.keys(scene).forEach((field) => {\n        const fieldConfig = scene[field];\n        Object.keys(fieldConfig.props).forEach((key) => {\n          const prop = fieldConfig.props[key];\n          this.setProp(field, key, prop);\n        });\n      });\n    }\n  }\n\n  @pluginHook({ before: \"beforeSceneUpdated\", after: \"sceneUpdated\" })\n  public update(field: string, key: string, value: any) {\n    this.setProp(field, key, value);\n    return { field, key, value };\n  }\n\n  private setProp(field, key, prop) {\n    const scene = this.oasis.engine.sceneManager.activeScene;\n    if (field === \"background\" && key === \"skyboxTexture\") {\n      const sky = scene.background.sky;\n      if (prop) {\n        sky.mesh = PrimitiveMesh.createCuboid(scene.engine, 2, 2, 2);\n        const skyMaterial = new SkyBoxMaterial(scene.engine);\n        skyMaterial.textureCubeMap = this.oasis.resourceManager.get(prop.id).resource;\n        sky.material = skyMaterial;\n      } else {\n        sky.mesh = null;\n        sky.material = null;\n      }\n    } else if (scene[field]) {\n      if (prop && prop.type === \"asset\") {\n        scene[field][key] = this.oasis.resourceManager.get(prop.id).resource;\n      } else {\n        scene[field][key] = prop;\n      }\n    }\n  }\n}\n","import { AssetType, ResourceManager, SpriteAtlas } from \"@oasis-engine/core\";\nimport { AssetConfig } from \"../types\";\nimport { getAllGetters } from \"../utils\";\nimport { SchemaResource } from \"./SchemaResource\";\nimport { SpriteResource } from \"./SpriteResource\";\n\nexport class SpriteAtlasResource extends SchemaResource {\n  static defaultAtlas: SpriteAtlas;\n\n  load(resourceManager: ResourceManager, assetConfig: AssetConfig): Promise<SpriteAtlasResource> {\n    return new Promise((resolve) => {\n      this.setMeta();\n      if (assetConfig.source) {\n        resourceManager\n          .load<SpriteAtlas>({\n            url: assetConfig.source,\n            type: AssetType.SpriteAtlas\n          })\n          .then((spriteAtlas) => {\n            this._resource = spriteAtlas;\n            const { sprites } = spriteAtlas;\n            const schemaResourceManager = this.resourceManager;\n            for (let index = sprites.length - 1; index >= 0; index--) {\n              const sprite = sprites[index];\n              const spriteResource = new SpriteResource(schemaResourceManager, sprite);\n              // @ts-ignore\n              const assetID = sprite._assetID;\n              // @ts-ignore\n              schemaResourceManager.maxId = Math.max(assetID, schemaResourceManager.maxId);\n              // @ts-ignore\n              schemaResourceManager.resourceMap[assetID] = spriteResource;\n              // @ts-ignore\n              schemaResourceManager.resourceIdMap.set(spriteResource, \"\" + assetID);\n            }\n            resolve(this);\n          });\n      } else {\n        if (!SpriteAtlasResource.defaultAtlas) {\n          SpriteAtlasResource.defaultAtlas = new SpriteAtlas(resourceManager.engine);\n        }\n        this._resource = SpriteAtlasResource.defaultAtlas;\n        resolve(this);\n      }\n    });\n  }\n\n  setMeta() {\n    if (this.resource) {\n      this.meta.name = this.resource.name;\n    }\n  }\n\n  getProps() {\n    const result = {};\n    const props = getAllGetters(this.resource);\n    props.forEach((prop) => (result[prop] = this.resource[prop]));\n    return result;\n  }\n\n  update() {}\n}\n","import { ObjectValues, ResourceManager } from \"@oasis-engine/core\";\nimport { Oasis } from \"./Oasis\";\nimport { pluginHook } from \"./plugins/PluginManager\";\nimport {\n  BaseResource,\n  BlinnPhongMaterialResource,\n  GLTFResource,\n  PBRMaterialResource,\n  PBRSpecularMaterialResource,\n  SchemaResource,\n  ScriptResource,\n  SpriteResource,\n  TextureCubeMapResource,\n  TextureResource,\n  UnlitMaterialResource,\n  AnimatorControllerResource,\n  AnimationClipResource\n} from \"./resources\";\nimport { SpriteAtlasResource } from \"./resources/SpriteAtlasResource\";\nimport { AssetConfig } from \"./types\";\n\nexport const RESOURCE_CLASS = {\n  script: ScriptResource,\n  gltf: GLTFResource,\n  texture: TextureResource,\n  // 'image': TextureResource,\n  cubeTexture: TextureCubeMapResource,\n  PBRMaterial: PBRMaterialResource,\n  PBRSpecularMaterial: PBRSpecularMaterialResource,\n  UnlitMaterial: UnlitMaterialResource,\n  BlinnPhongMaterial: BlinnPhongMaterialResource,\n  base: BaseResource,\n  sprite: SpriteResource,\n  SpriteAtlas: SpriteAtlasResource,\n  animatorController: AnimatorControllerResource,\n  animationClip: AnimationClipResource\n};\n\nconst RESOURCE_TYPE: Map<SchemaResource, string> = new Map();\nfor (const key in RESOURCE_CLASS) {\n  if (RESOURCE_CLASS.hasOwnProperty(key)) {\n    const element = RESOURCE_CLASS[key];\n    RESOURCE_TYPE.set(element, key);\n  }\n}\n\nconst resourceFactory = {\n  createResource(resourceManager: SchemaResourceManager, type: string): SchemaResource {\n    return new RESOURCE_CLASS[type](resourceManager);\n  }\n};\n\nexport function registerResource(type: string, resource: any) {\n  if (!RESOURCE_CLASS.hasOwnProperty(type)) {\n    RESOURCE_CLASS[type] = resource;\n    RESOURCE_TYPE.set(resource, type);\n  }\n}\n\nexport class SchemaResourceManager {\n  private resourceMap: { [id: string]: SchemaResource } = {};\n  private resourceIdMap: WeakMap<SchemaResource, string> = new WeakMap();\n  private maxId = 0;\n  private readonly engineResourceManager: ResourceManager;\n\n  constructor(private oasis: Oasis) {\n    this.engineResourceManager = this.oasis.engine.resourceManager;\n  }\n\n  load(asset: AssetConfig): Promise<SchemaResource> {\n    const resource = resourceFactory.createResource(this, asset.type);\n    const loadPromise = resource.load(this.oasis.engine.resourceManager, asset, this.oasis);\n    this.maxId = Math.max(+asset.id, this.maxId);\n    loadPromise.then(() => {\n      this.resourceMap[asset.id] = resource;\n      this.resourceIdMap.set(resource, asset.id);\n    });\n    return loadPromise;\n  }\n\n  add(asset: AssetConfig): Promise<any> {\n    const resource = resourceFactory.createResource(this, asset.type);\n    return new Promise((resolve) => {\n      resource.loadWithAttachedResources(this.oasis.engine.resourceManager, asset, this.oasis).then((result) => {\n        resolve(this.getAddResourceResult(result.resources, result.structure));\n      });\n    });\n  }\n\n  @pluginHook({ before: \"beforeResourceRemove\" })\n  remove(id: string): Promise<Array<string>> {\n    return new Promise((resolve) => {\n      const resource = this.resourceMap[id];\n      const result = [id];\n      let hasAttachedResource = false;\n      delete this.resourceMap[id];\n      if (resource) {\n        const attached = resource.attachedResources;\n        for (let index = 0; index < attached.length; index++) {\n          const attachedResource = attached[index];\n          const attachedResourceId = this.resourceIdMap.get(attachedResource);\n          if (attachedResourceId) {\n            hasAttachedResource = true;\n            this.remove(attachedResourceId).then((attachedResourceRemoveResult) => {\n              result.push(...attachedResourceRemoveResult);\n              resolve(result);\n            });\n          }\n        }\n      }\n      if (!hasAttachedResource) {\n        resolve(result);\n      }\n    });\n  }\n\n  @pluginHook({ after: \"resourceUpdated\", before: \"beforeResourceUpdate\" })\n  update(id: string, key: string, value: any) {\n    const resource = this.get(id);\n    if (resource) {\n      resource.update(key, value);\n    }\n    return {\n      resource,\n      id,\n      key,\n      value\n    };\n  }\n\n  updateMeta(id: string, key: string, value: any) {\n    const resource = this.get(id);\n    if (resource) {\n      resource.updateMeta(key, value);\n    }\n  }\n\n  get(id: string): SchemaResource {\n    return this.resourceMap[id];\n  }\n\n  getAll(): Array<SchemaResource> {\n    return ObjectValues(this.resourceMap);\n  }\n\n  private getAddResourceResult(resources, structure) {\n    const addResourceResult: any = {};\n    const resource = resources[structure.index];\n    const id = `${++this.maxId}`;\n    this.resourceMap[id] = resource;\n    this.resourceIdMap.set(resource, id);\n\n    addResourceResult.id = this.maxId;\n    addResourceResult.type = RESOURCE_TYPE.get(resource.constructor);\n    addResourceResult.meta = resource.meta;\n    addResourceResult.props = {};\n    for (const key in structure.props) {\n      if (structure.props.hasOwnProperty(key)) {\n        const element = structure.props[key];\n        if (element) {\n          if (Array.isArray(element)) {\n            addResourceResult.props[key] = element.map((child) => this.getAddResourceResult(resources, child));\n          } else {\n            addResourceResult.props[key] = this.getAddResourceResult(resources, element);\n          }\n        }\n      }\n    }\n    return addResourceResult;\n  }\n\n  get isLocal(): boolean {\n    return this.oasis.options.local;\n  }\n\n  get useCompressedTexture(): boolean {\n    return this.oasis.options.useCompressedTexture ?? true;\n  }\n}\n","import { EventDispatcher, ObjectValues } from \"@oasis-engine/core\";\nimport { AbilityManager } from \"./AbilityManager\";\nimport { NodeManager } from \"./NodeManager\";\nimport { SceneManager } from \"./SceneManager\";\nimport { pluginHook, PluginManager } from \"./plugins/PluginManager\";\nimport { RESOURCE_CLASS, SchemaResourceManager } from \"./ResourceManager\";\nimport { Options, Schema } from \"./types\";\n\nexport class Oasis extends EventDispatcher {\n  public readonly nodeManager: NodeManager;\n  public readonly abilityManager: AbilityManager;\n  public readonly sceneManager: SceneManager;\n  public resourceManager: SchemaResourceManager;\n  public _canvas: HTMLCanvasElement;\n  private schema: Schema;\n  public timeout: number;\n  private oasis = this;\n\n  private constructor(private _options: Options, public readonly pluginManager: PluginManager) {\n    super(_options.engine);\n    this.schema = _options.config;\n    this.timeout = _options.timeout;\n    _options.scripts = _options.scripts ?? {};\n    this.nodeManager = new NodeManager(this);\n    this.abilityManager = new AbilityManager(this);\n    this.nodeManager.add = this.nodeManager.add.bind(this.nodeManager);\n    this.abilityManager.add = this.abilityManager.add.bind(this.abilityManager);\n    this.resourceManager = new SchemaResourceManager(this);\n    this.sceneManager = new SceneManager(this);\n    if (_options.fps) {\n      this.engine.targetFrameRate = _options.fps;\n      this.engine.vSyncCount = 0;\n    }\n  }\n\n  public get canvas(): HTMLCanvasElement {\n    return this._options.canvas;\n  }\n\n  public get options(): Readonly<Options> {\n    return this._options;\n  }\n\n  public updateConfig(config: Schema): void {\n    this.schema = config;\n\n    this.init();\n  }\n\n  @pluginHook({ after: \"schemaParsed\" })\n  private init(): Promise<any> {\n    return this.loadResources().then(() => {\n      this.bindResources();\n      this.parseEntities();\n      this.attach();\n      this.nodeManager.addRootEntity();\n      this.sceneManager.init();\n      this.parseNodeAbilities();\n      this.pluginManager.boot(this);\n    });\n  }\n\n  private loadResources(): Promise<any> {\n    const { assets = {} } = this.schema;\n\n    const loadingPromises = ObjectValues(assets)\n      .filter((asset) => {\n        if (RESOURCE_CLASS[asset.type]) {\n          return true;\n        }\n        console.warn(`${asset.type} loader is not defined. the ${asset.type} type will be ignored.`);\n        return false;\n      })\n      .map((asset) => this.resourceManager.load(asset));\n\n    return Promise.all(loadingPromises);\n  }\n\n  private bindResources() {\n    this.resourceManager.getAll().forEach((resource) => {\n      resource.bind();\n    });\n  }\n\n  private parseEntities(): void {\n    const { nodes } = this.schema;\n    const indices = this.bfsNodes();\n    indices.map((index) => nodes[index]).forEach(this.nodeManager.add);\n  }\n\n  private parseNodeAbilities(): void {\n    const { abilities } = this.schema;\n    Object.keys(abilities)\n      .map((id) => ({ id, ...abilities[id] }))\n      .forEach(this.abilityManager.add);\n  }\n\n  private bfsNodes(): number[] {\n    const { nodes } = this.schema;\n    const roots = ObjectValues(nodes)\n      .filter((node) => !nodes[node.parent])\n      .map((node) => node.id);\n\n    let result = [];\n    const traverseChildren = (roots: string[]) => {\n      result = result.concat(roots);\n      roots.forEach((id) => {\n        const children = nodes[id].children;\n        children && traverseChildren(children);\n      });\n    };\n    traverseChildren(roots);\n    return result;\n  }\n\n  private attach() {\n    this.resourceManager.getAll().forEach((resource) => {\n      resource.attach();\n    });\n  }\n\n  static create(options: Options, pluginManager: PluginManager): Promise<Oasis> {\n    const oasis = new Oasis(options, pluginManager);\n    return oasis.init().then(() => {\n      options.autoPlay && oasis.engine.run();\n      return oasis;\n    });\n  }\n}\n"],"names":["isBase64","url","test","resourceLoader","AssetType","Buffer","load","item","AssetPromise","resolve","base64Str","slice","RegExp","$1","length","result","Uint8Array","from","atob","c","charCodeAt","buffer","request","type","Loader","AccessorComponentType","AccessorType","AnimationChannelTargetPath","AnimationSamplerInterpolation","CameraType","ImageMimeType","MaterialAlphaMode","TextureMagFilter","TextureMinFilter","TextureWrapMode","GLTFUtil","floatBufferToVector2Array","bufferLen","array","Array","i","Vector2","floatBufferToVector3Array","Vector3","floatBufferToVector4Array","Vector4","decodeText","TextDecoder","decode","s","il","String","fromCharCode","decodeURIComponent","encodeURIComponent","getAccessorTypeSize","accessorType","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","getComponentType","componentType","BYTE","Int8Array","UNSIGNED_BYTE","SHORT","Int16Array","UNSIGNED_SHORT","Uint16Array","UNSIGNED_INT","Uint32Array","FLOAT","Float32Array","getAccessorData","gltf","accessor","buffers","bufferViews","bufferView","arrayBuffer","accessorByteOffset","hasOwnProperty","byteOffset","bufferViewByteOffset","accessorTypeSize","count","byteStride","arrayType","uint8Array","accessorByteSize","BYTES_PER_ELEMENT","originalBufferView","byteLength","j","typedArray","sparse","indices","values","indicesBufferView","valuesBufferView","indicesArrayBuffer","valuesArrayBuffer","indicesByteOffset","indicesByteLength","valuesByteOffset","valuesByteLength","indicesType","indicesArray","valuesArray","replaceIndex","getBufferViewData","getVertexStride","stride","size","createVertexElement","semantic","index","VertexElement","getElementFormat","normalized","getIndexFormat","IndexFormat","UInt8","UInt16","UInt32","VertexElementFormat","Float","NormalizedShort2","Short2","NormalizedShort4","Short4","NormalizedUShort2","UShort2","NormalizedUShort4","UShort4","NormalizedByte4","Byte4","NormalizedUByte4","UByte4","loadImageBuffer","imageBuffer","Promise","reject","blob","window","Blob","img","Image","src","URL","createObjectURL","crossOrigin","onerror","Error","onload","requestAnimationFrame","onabort","isAbsoluteUrl","parseRelativeUrl","baseUrl","relativeUrl","char0","charAt","_formatRelativePath","substring","lastIndexOf","parseGLB","glb","UINT32_LENGTH","GLB_HEADER_MAGIC","GLB_HEADER_LENGTH","GLB_CHUNK_TYPES","JSON","BIN","dataView","DataView","header","magic","getUint32","version","console","error","toString","chunkLength","chunkType","glTFData","parse","currentOffset","push","value","parts","split","n","splice","join","Parser","parseEngineResource","extensionName","extensionSchema","parseResource","context","parsers","_extensionParsers","extra","createEngineResource","hasExtensionParser","initialize","_addExtensionParser","extensionParser","registerExtension","parser","AnimationParser","entities","animations","accessors","animationClipCount","animationClips","animationsIndices","gltfAnimation","channels","samplers","name","animationClip","AnimationClip","sampleDataCollection","gltfSampler","inputAccessor","input","outputAccessor","output","outputAccessorSize","interpolation","Linear","samplerInterpolation","CubicSpine","InterpolationType","Step","outputSize","gltfChannel","target","channelTargetEntity","node","relativePath","entity","parent","compType","propertyName","path","TRANSLATION","Transform","ROTATION","SCALE","WEIGHTS","SkinnedMeshRenderer","curve","_addCurve","addCurveBinding","_animationsIndices","AnimationCurve","sampleData","sampler","offset","keyframe","InterpolableKeyframe","time","inTangent","outTangent","subarray","addKey","Quaternion","BufferParser","engine","_isGLB","resourceManager","then","all","map","uri","EntityParser","nodes","gltfNode","matrix","translation","rotation","scale","Entity","_defaultName","transform","localMatrix","setValueByArray","setPosition","setRotationQuaternion","setScale","_buildEntityTree","_createSceneRoots","children","childEntity","addChild","scene","sceneID","scenes","sceneRoots","rootEntity","defaultSceneRoot","MaterialParser","_parseTextureTransform","material","extensions","schema","KHR_texture_transform","textures","materials","pbrMetallicRoughness","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","alphaMode","alphaCutoff","doubleSided","KHR_materials_unlit","KHR_materials_pbrSpecularGlossiness","PBRMaterial","baseColorFactor","baseColorTexture","metallicFactor","roughnessFactor","metallicRoughnessTexture","baseColor","Color","baseTexture","m","metallic","roughness","roughnessMetallicTexture","emissiveColor","undefined","normalTextureIntensity","strength","occlusionTextureIntensity","renderFace","RenderFace","Double","Front","OPAQUE","isTransparent","BLEND","MASK","MeshParser","meshes","meshPromises","gltfMesh","primitivePromises","gltfPrimitive","primitives","KHR_draco_mesh_compression","mesh","ModelMesh","decodedGeometry","_parseMeshFromGLTFPrimitive","attributeSemantic","attributes","shapeIndex","accessorIdx","attributeName","shapeAccessorIdx","targets","attributeAccessorIdx","indexAccessor","getVertexBufferData","getBlendShapeData","getIndexBufferData","mode","vertexCount","positionBuffer","positions","setPositions","bounds","min","max","position","_tempVector3","setValue","Number","MAX_VALUE","bufferData","normals","setNormals","tangents","setTangents","texturecoords","setUVs","joints","setBoneIndices","weights","setBoneWeights","indexData","setIndices","addSubMesh","_createBlendShape","uploadData","glTFMesh","glTFTargets","blendShapeNames","extras","targetNames","deltaPosBuffer","deltaNorBuffer","deltaTanBuffer","deltaPositions","deltaNormals","deltaTangents","blendShape","BlendShape","addFrame","addBlendShape","SceneParser","_getDefaultMaterial","_defaultMaterial","BlinnPhongMaterial","gltfCameras","cameras","cameraID","camera","meshID","KHR_lights_punctual","_createCamera","_createRenderer","lightIndex","light","lights","_createAnimator","cameraSchema","orthographic","perspective","addComponent","Camera","ORTHOGRAPHIC","xmag","ymag","zfar","znear","isOrthographic","nearClipPlane","farClipPlane","orthographicSize","Math","PERSPECTIVE","aspectRatio","yfov","fieldOfView","PI","enabled","gltfMeshes","skins","skinID","skin","gltfMeshPrimitives","blendShapeWeights","renderer","skinRenderer","MeshRenderer","materialIndex","setMaterial","KHR_materials_variants","animator","Animator","animatorController","AnimatorController","layer","AnimatorControllerLayer","animatorStateMachine","AnimatorStateMachine","addLayer","stateMachine","uniqueName","makeUniqueStateName","warn","animatorState","addState","clip","SkinParser","gltfSkins","inverseBindMatrices","skeleton","jointCount","Skin","inverseBindMatrix","Matrix","TextureParser","source","textureName","images","bufferViewIndex","mimeType","imageName","Texture2D","texture","_parseSampler","bufferViewData","image","width","height","setImageSource","generateMipmaps","magFilter","minFilter","wrapS","wrapT","Logger","wrapModeU","_wrapMap","wrapModeV","Clamp","Mirror","Repeat","Validator","asset","extensionsUsed","extensionsRequired","gltfVersion","info","extensionRequired","GLTFParser","pipes","_pipes","forEach","pipe","lastPipe","catch","instance","GLTFResource","variants","EngineObject","Prefab","resource","e","HEADER_LEN","COMPRESSED_2D","getMipmaps","ktxContainer","loadMipmaps","mipmaps","dataOffset","bytesOfKeyValueData","pixelWidth","pixelHeight","mipmapCount","numberOfMipmapLevels","level","imageSize","Int32Array","face","numberOfFaces","byteArray","data","isValid","identifier","getEngineFormat","internalFormat","GLCompressedTextureInternalFormat","RGB_S3TC_DXT1_EXT","TextureFormat","DXT1","RGBA_S3TC_DXT5_EXT","DXT5","RGB_ETC1_WEBGL","ETC1_RGB","RGB8_ETC2","ETC2_RGB","RGB8_PUNCHTHROUGH_ALPHA1_ETC2","ETC2_RGBA5","RGBA8_ETC2_EAC","ETC2_RGBA8","RGB_PVRTC_2BPPV1_IMG","PVRTC_RGB2","RGBA_PVRTC_2BPPV1_IMG","PVRTC_RGBA2","RGB_PVRTC_4BPPV1_IMG","PVRTC_RGB4","RGBA_PVRTC_4BPPV1_IMG","PVRTC_RGBA4","RGBA_ASTC_4X4_KHR","ASTC_4x4","RGBA_ASTC_5X5_KHR","ASTC_5x5","RGBA_ASTC_6X6_KHR","ASTC_6x6","RGBA_ASTC_8X8_KHR","ASTC_8x8","RGBA_ASTC_10X10_KHR","ASTC_10x10","RGBA_ASTC_12X12_KHR","ASTC_12x12","formatName","khronosTextureContainerParser","facesExpected","withMipmaps","mapEngineFormat","dataSize","headerDataView","endianness","littleEndian","parsedResult","glType","glTypeSize","glFormat","glInternalFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","loadType","engineFormat","parseSingleKTX","ktx","parseCubeKTX","dataArray","mipmapsFaces","KTXCube","urls","parsedData","mipmap","TextureCubeMap","miplevel","setPixelBuffer","TextureCubeFace","PositiveX","KTX","bin","_platformTexture","indexOf","splitPath","TextureCube","tex","faceIndex","SpriteAtlas","atlasData","atlasItems","format","atlasItemsLen","imgs","tempRect","Rect","tempVect2","spriteAtlas","originalImg","atlasItem","sprites","sourceWidthReciprocal","sourceHeightReciprocal","atlasSprite","region","pivot","atlasRegionOffset","atlasRegion","id","sprite","Sprite","x","y","w","h","pixelsPerUnit","atlasRotated","offsetLeft","offsetTop","offsetRight","z","offsetBottom","originalWReciprocal","originalHReciprocal","_assetID","_addSprite","ExtensionParser","_decoder","DRACODecoder","gltfAttributeMap","attributeMap","attributeTypeMap","accessorDef","indexType","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","parsedGeometry","color","intensity","range","spot","DirectLight","PointLight","SpotLight","distance","innerConeAngle","outerConeAngle","angle","penumbra","PBRSpecularMaterial","diffuseFactor","diffuseTexture","specularFactor","glossinessFactor","specularGlossinessTexture","specularColor","glossiness","UnlitMaterial","variantNames","mappings","texCoord","tilingOffset","GLTFModel","_animatorController","_speed","_animator","_asset","_glTFEntity","_clipPreview","_hasBuiltNode","_controllerUpdateFlag","init","props","speed","clipPreview","isClone","rootName","gltfRootName","findByName","Date","now","createChild","update","flag","_playState","_onEnable","isActive","_componentsManager","addOnUpdateAnimations","_onDisable","removeOnUpdateAnimations","playStateName","play","_playDefaultState","layers","defaultState","_defaultState","states","defaultStateName","clearChildren","destroy","gltfEntity","clone","getComponent","_registerChangeFlag","Component","Model","_props","setProps","geometryType","PrimitiveMesh","createSphere","_engine","sphereRadius","sphereSegments","createCylinder","cylinderRadiusTop","cylinderRadiusBottom","cylinderHeight","cylinderRadialSegments","cylinderHeightSegments","createPlane","planeWidth","planeHeight","planeHorizontalSegments","planeVerticalSegments","createCuboid","boxWidth","boxHeight","boxDepth","updateProp","key","getMaterial","mtl","PluginManager","registeredPlugins","Set","plugins","register","plugin","add","boot","oasis","reset","clear","nodeAdded","delegateMethod","args","pluginHook","options","descriptor","method","before","pluginManager","apply","arguments","returnObj","after","compatibleToV2","config","abilities","assets","ids","Object","keys","assetKeys","sceneKeys","l","handleComponents","handleAssets","handleSceneProps","k","v","isArray","sh","SphericalHarmonics3","CURRENT_SCHEMA_VERSION","Oasis","create","resetPlugins","registerComponents","namespace","components","_components","switchElementsIndex","elements","currentIndex","targetIndex","isAsset","getAllGetters","obj","prototype","getPrototypeOf","prototype_property_descriptors","getOwnPropertyDescriptors","entries","property","get","SchemaResource","setMeta","_resource","_meta","_attachedResources","loadWithAttachedResources","assetConfig","resources","structure","getProps","bind","attach","meta","updateMeta","onDestroy","AnimationClipResource","loadPromise","AnimatorControllerResource","animatorControllerData","animationClipAssets","_setDefaultDataByAnimationClip","setMetaData","clipLoadPromises","clipResourse","attachedResources","res","clipStructure","clipResource","_initAnimatorController","_bindClips","_setDefaultDataByAnimationClipAsset","clearLayers","blending","weight","stateMachineData","blendingMode","stateMachineTransitions","stateData","transitions","wrapMode","clipStartNormalizedTime","clipEndNormalizedTime","isDefaultState","clipAssetId","state","animationIndex","clipStartTime","clipEndTime","transition","srcState","transitionData","AnimatorStateTransition","duration","exitTime","destinationState","findStateByName","targetStateName","addTransition","clipAsset","clips","TextureResource","assetType","useCompressedTexture","compression","compressions","rhi","_hardwareRenderer","container","canIUse","GLCapabilityType","BlinnPhongMaterialResource","configProps","assetObj","attr","Texture","textureResource","attrs","PBRMaterialResource","prop","PBRSpecularMaterialResource","UnlitMaterialResource","newMaterial","animatorControllers","materialLoadPromises","animatorControllerLoadPromise","materialResource","animatorControllerResource","loadAttachedMaterial","mat","matStructure","matResource","textureStructure","loadAttachedController","controllerStructure","controllerResource","bindMaterials","bindAnimatorControllers","newMaterialsConfig","newMaterialCount","newMaterials","mtlResource","gltfRoot","originMaterials","meshRenderers","getComponentsIncludeChildren","originMaterial","meshRenderer","meshMaterials","getMaterials","animatorControllerAsset","scriptAbility","script","ScriptResource","isInit","initScriptContext","__o3_script_context__","o3","scripts","isLocal","scriptDom","document","createElement","o3Scripts","body","appendChild","SpriteResource","pivotType","SpritePivotType","Custom","Center","TopLeft","Top","TopRight","Left","Right","BottomLeft","Bottom","BottomRight","imageOrderMap","px","nx","py","ny","pz","nz","TextureCubeMapResource","imageUrls","files","BaseResource","AbilityManager","abilityMap","abilityConfig","nodeId","nodeManager","AbilityConstructor","getCompConstructor","abilityProps","mixPropsToExplicitProps","ability","abilityArray","checkIsAsset","constructor","addRuntimeComponent","componentId","component","delete","splits","explicitProps","NodeManager","nodeMap","root","addRootEntity","sceneManager","activeScene","nodeConfig","append","childId","parentId","child","_children","SceneManager","field","fieldConfig","setProp","sky","background","skyMaterial","SkyBoxMaterial","textureCubeMap","SpriteAtlasResource","schemaResourceManager","spriteResource","assetID","maxId","resourceMap","resourceIdMap","set","defaultAtlas","RESOURCE_CLASS","cubeTexture","base","RESOURCE_TYPE","Map","element","resourceFactory","createResource","registerResource","SchemaResourceManager","WeakMap","engineResourceManager","getAddResourceResult","remove","hasAttachedResource","attached","attachedResource","attachedResourceId","attachedResourceRemoveResult","getAll","ObjectValues","addResourceResult","local","_options","abilityManager","_canvas","timeout","fps","targetFrameRate","vSyncCount","updateConfig","loadResources","bindResources","parseEntities","parseNodeAbilities","loadingPromises","filter","bfsNodes","roots","traverseChildren","concat","autoPlay","run","canvas","EventDispatcher"],"mappings":"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"}