import { IPlatformTextureCubeMap, TextureCubeFace, TextureCubeMap } from "@oasis-engine/core";
import { GLTexture } from "./GLTexture";
import { WebGLRenderer } from "./WebGLRenderer";
/**
 * Cube texture in WebGL platform.
 */
export declare class GLTextureCubeMap extends GLTexture implements IPlatformTextureCubeMap {
    /**
     * Backward compatible with WebGL1.0.ã€‚
     */
    private _compressedFaceFilled;
    /**
     * Create cube texture in WebGL platform.
     */
    constructor(rhi: WebGLRenderer, textureCube: TextureCubeMap);
    /**
     * Setting pixels data through cube face,color buffer data, designated area and texture mipmapping level,it's also applicable to compressed formats.
     * @remarks When compressed texture is in WebGL1, the texture must be filled first before writing the sub-region
     * @param face - Cube face
     * @param colorBuffer - Color buffer data
     * @param mipLevel - Texture mipmapping level
     * @param x - X coordinate of area start
     * @param y -  Y coordinate of area start
     * @param width - Data width.if it's empty, width is the width corresponding to mipLevel minus x , width corresponding to mipLevel is Math.max(1, this.width >> mipLevel)
     * @param height - Data height.if it's empty, height is the height corresponding to mipLevel minus y , height corresponding to mipLevel is Math.max(1, this.height >> mipLevel)
     */
    setPixelBuffer(face: TextureCubeFace, colorBuffer: ArrayBufferView, mipLevel?: number, x?: number, y?: number, width?: number, height?: number): void;
    /**
     * Setting pixels data through cube face, TexImageSource, designated area and texture mipmapping level.
     * @param face - Cube face
     * @param imageSource - The source of texture
     * @param mipLevel - Texture mipmapping level
     * @param flipY - Whether to flip the Y axis
     * @param premultiplyAlpha - Whether to premultiply the transparent channel
     * @param x - X coordinate of area start
     * @param y - Y coordinate of area start
     */
    setImageSource(face: TextureCubeFace, imageSource: TexImageSource, mipLevel?: number, flipY?: boolean, premultiplyAlpha?: boolean, x?: number, y?: number): void;
    /**
     * Get the pixel color buffer according to the specified cube face and area.
     * @param face - You can choose which cube face to read
     * @param x - X coordinate of area start
     * @param y - Y coordinate of area start
     * @param width - Area width
     * @param height - Area height
     * @param out - Color buffer
     */
    getPixelBuffer(face: TextureCubeFace, x: number, y: number, width: number, height: number, out: ArrayBufferView): void;
}
