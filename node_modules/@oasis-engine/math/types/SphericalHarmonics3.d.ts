import { IClone } from "@oasis-engine/design";
import { Color } from "./Color";
import { Vector3 } from "./Vector3";
/**
 * Use SH3 to represent irradiance environment maps efficiently, allowing for interactive rendering of diffuse objects under distant illumination.
 * @remarks
 * https://graphics.stanford.edu/papers/envmap/envmap.pdf
 * http://www.ppsloan.org/publications/StupidSH36.pdf
 * https://google.github.io/filament/Filament.md.html#annex/sphericalharmonics
 */
export declare class SphericalHarmonics3 implements IClone {
    /** The coefficients of SphericalHarmonics3. */
    coefficients: Float32Array;
    /**
     * Add light to SphericalHarmonics3.
     * @param direction - Light direction
     * @param color - Light color
     * @param deltaSolidAngle - The delta solid angle of the light
     */
    addLight(direction: Vector3, color: Color, deltaSolidAngle: number): void;
    /**
     * Evaluates the color for the specified direction.
     * @param direction - Specified direction
     * @param out - Out color
     */
    evaluate(direction: Vector3, out: Color): Color;
    /**
     * Scale the coefficients.
     * @param s - The amount by which to scale the SphericalHarmonics3
     */
    scale(s: number): void;
    /**
     * Set the value of this spherical harmonics by an array.
     * @param array - The array
     * @param offset - The start offset of the array
     */
    setValueByArray(array: ArrayLike<number>, offset?: number): void;
    /**
     * Clone the value of this spherical harmonics to an array.
     * @param out - The array
     * @param outOffset - The start offset of the array
     */
    toArray(out: number[] | Float32Array | Float64Array, outOffset?: number): void;
    /**
     * Creates a clone of this SphericalHarmonics3.
     * @returns A clone of this SphericalHarmonics3
     */
    clone(): SphericalHarmonics3;
    /**
     * Clones this SphericalHarmonics3 to the specified SphericalHarmonics3.
     * @param out - The specified SphericalHarmonics3
     * @returns The specified SphericalHarmonics3
     */
    cloneTo(out: SphericalHarmonics3): void;
}
