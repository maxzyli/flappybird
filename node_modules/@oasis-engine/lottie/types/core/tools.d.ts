/**
 * some useful toolkit
 * @namespace
 */
declare const Tools: {
    /**
     * simple copy a json data
     * @method
     * @param {JSON} json source data
     * @return {JSON} object
     */
    copyJSON: (json: any) => any;
    /**
     * detect the variable is array type
     * @method
     * @param {Array} variable input variable
     * @return {Boolean} result
     */
    isArray: (variable: any) => boolean;
    /**
     * detect the variable is string type
     * @method
     * @param {String} variable input variable
     * @return {Boolean} result
     */
    isString: (variable: any) => boolean;
    /**
     * detect the variable is number type
     * @method
     * @param {Number} variable input variable
     * @return {Boolean} result
     */
    isNumber: (variable: any) => boolean;
    /**
     * 判断变量是否为函数类型
     * @method
     * @param {Function} variable 待判断的变量
     * @return {Boolean} 判断的结果
     */
    isFunction: (variable: any) => boolean;
    /**
     * 判断变量是否为undefined
     * @method
     * @param {Function} variable 待判断的变量
     * @return {Boolean} 判断的结果
     */
    isUndefined: (variable: any) => boolean;
    /**
     * detect the variable is boolean type
     * @method
     * @param {Boolean} variable input variable
     * @return {Boolean} result
     */
    isBoolean: (variable: any) => boolean;
    /**
     * detect the variable is object type
     * @method
     * @param {Object} variable input variable
     * @return {Boolean} result
     */
    isObject: (variable: any) => boolean;
    /**
     * enhance random, random number in range or random one of array
     * @method
     * @param {Array | Number} min random number in range or random one of array
     * @param {Number} max range max edge
     * @return {ArrayItem | Number} number or one item of array
     */
    random: (min: any, max: any) => any;
    /**
     * euclidean modulo
     * @method
     * @param {Number} n input value
     * @param {Number} m modulo
     * @return {Number} re-map to modulo area
     */
    euclideanModulo: (n: any, m: any) => number;
    /**
     * bounce value when value spill codomain
     * @method
     * @param {Number} n input value
     * @param {Number} min lower boundary
     * @param {Number} max upper boundary
     * @return {Number} bounce back to boundary area
     */
    codomainBounce: (n: any, min: any, max: any) => any;
    /**
     * clamp a value in range
     * @method
     * @param {Number} x input value
     * @param {Number} a lower boundary
     * @param {Number} b upper boundary
     * @return {Number} clamp in range
     */
    clamp: (x: any, a: any, b: any) => any;
    /**
     * detect number was in [min, max]
     * @method
     * @param {number} v   value
     * @param {number} min lower
     * @param {number} max upper
     * @return {boolean} in [min, max] range ?
     */
    inRange(v: any, min: any, max: any): boolean;
    /**
     * get assets from keyframes assets
     * @method
     * @param {string} id assets refid
     * @param {object} assets assets object
     * @return {object} asset object
     */
    getAssets(id: any, assets: any): any;
    /**
     * get hex number from rgb array
     * @param {array} rgb rgb array
     * @return {number}
     */
    rgb2hex(rgb: any): number;
};
export default Tools;
