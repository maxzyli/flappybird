import { Disposable, Map } from "./Utils";
import { TextureAtlas } from "./TextureAtlas";
export declare class AssetManager implements Disposable {
    protected pathPrefix: string;
    protected textureLoader: (image: HTMLImageElement) => any;
    protected assets: Map<any>;
    protected errors: Map<string>;
    protected toLoad: number;
    protected loaded: number;
    protected rawDataUris: Map<string>;
    constructor(textureLoader: (image: HTMLImageElement) => any, pathPrefix?: string);
    private downloadText;
    protected downloadBinary(url: string, success: (data: Uint8Array) => void, error: (status: number, responseText: string) => void): void;
    setRawDataURI(path: string, data: string): void;
    loadBinary(path: string, success?: (path: string, binary: Uint8Array) => void, error?: (path: string, error: string) => void): void;
    loadText(path: string, success?: (path: string, text: string) => void, error?: (path: string, error: string) => void): void;
    loadTexture(path: string, success?: (path: string, image: HTMLImageElement) => void, error?: (path: string, error: string) => void): void;
    loadTextureAtlas(path: string, success?: (path: string, atlas: TextureAtlas) => void, error?: (path: string, error: string) => void): void;
    get(path: string): any;
    remove(path: string): void;
    removeAll(): void;
    isLoadingComplete(): boolean;
    getToLoad(): number;
    getLoaded(): number;
    dispose(): void;
    hasErrors(): boolean;
    getErrors(): Map<string>;
}
